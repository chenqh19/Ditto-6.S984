        -:    0:Source:memcached.c
        -:    0:Graph:memcached.gcno
        -:    0:Data:memcached.gcda
        -:    0:Runs:428
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: *  memcached - memory caching daemon
        -:    4: *
        -:    5: *       https://www.memcached.org/
        -:    6: *
        -:    7: *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.
        -:    8: *
        -:    9: *  Use and distribution licensed under the BSD license.  See
        -:   10: *  the LICENSE file for full text.
        -:   11: *
        -:   12: *  Authors:
        -:   13: *      Anatoly Vorobey <mellon@pobox.com>
        -:   14: *      Brad Fitzpatrick <brad@danga.com>
        -:   15: */
        -:   16:#include "memcached.h"
        -:   17:#include "storage.h"
        -:   18:#include "authfile.h"
        -:   19:#include "restart.h"
        -:   20:#include <sys/stat.h>
        -:   21:#include <sys/socket.h>
        -:   22:#include <sys/un.h>
        -:   23:#include <signal.h>
        -:   24:#include <sys/param.h>
        -:   25:#include <sys/resource.h>
        -:   26:#include <sys/uio.h>
        -:   27:#include <ctype.h>
        -:   28:#include <stdarg.h>
        -:   29:
        -:   30:/* some POSIX systems need the following definition
        -:   31: * to get mlockall flags out of sys/mman.h.  */
        -:   32:#ifndef _P1003_1B_VISIBLE
        -:   33:#define _P1003_1B_VISIBLE
        -:   34:#endif
        -:   35:#include <pwd.h>
        -:   36:#include <sys/mman.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <netinet/tcp.h>
        -:   39:#include <arpa/inet.h>
        -:   40:#include <errno.h>
        -:   41:#include <stdlib.h>
        -:   42:#include <stdio.h>
        -:   43:#include <string.h>
        -:   44:#include <time.h>
        -:   45:#include <assert.h>
        -:   46:#include <sysexits.h>
        -:   47:#include <stddef.h>
        -:   48:
        -:   49:#ifdef HAVE_GETOPT_LONG
        -:   50:#include <getopt.h>
        -:   51:#endif
        -:   52:
        -:   53:#ifdef TLS
        -:   54:#include "tls.h"
        -:   55:#endif
        -:   56:
        -:   57:#include "proto_text.h"
        -:   58:#include "proto_bin.h"
        -:   59:#include "proto_proxy.h"
        -:   60:
        -:   61:#if defined(__FreeBSD__)
        -:   62:#include <sys/sysctl.h>
        -:   63:#endif
        -:   64:
        -:   65:/*
        -:   66: * forward declarations
        -:   67: */
        -:   68:static void drive_machine(conn *c);
        -:   69:static int new_socket(struct addrinfo *ai);
        -:   70:static ssize_t tcp_read(conn *arg, void *buf, size_t count);
        -:   71:static ssize_t tcp_sendmsg(conn *arg, struct msghdr *msg, int flags);
        -:   72:static ssize_t tcp_write(conn *arg, void *buf, size_t count);
        -:   73:
        -:   74:enum try_read_result {
        -:   75:    READ_DATA_RECEIVED,
        -:   76:    READ_NO_DATA_RECEIVED,
        -:   77:    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */
        -:   78:    READ_MEMORY_ERROR      /** failed to allocate more memory */
        -:   79:};
        -:   80:
        -:   81:static int try_read_command_negotiate(conn *c);
        -:   82:static int try_read_command_udp(conn *c);
        -:   83:
        -:   84:static enum try_read_result try_read_network(conn *c);
        -:   85:static enum try_read_result try_read_udp(conn *c);
        -:   86:
        -:   87:static int start_conn_timeout_thread(void);
        -:   88:
        -:   89:/* stats */
        -:   90:static void stats_init(void);
        -:   91:static void conn_to_str(const conn *c, char *addr, char *svr_addr);
        -:   92:
        -:   93:/* defaults */
        -:   94:static void settings_init(void);
        -:   95:
        -:   96:/* event handling, network IO */
        -:   97:static void event_handler(const evutil_socket_t fd, const short which, void *arg);
        -:   98:static void conn_close(conn *c);
        -:   99:static void conn_init(void);
        -:  100:static bool update_event(conn *c, const int new_flags);
        -:  101:static void complete_nread(conn *c);
        -:  102:
        -:  103:static void conn_free(conn *c);
        -:  104:
        -:  105:/** exported globals **/
        -:  106:struct stats stats;
        -:  107:struct stats_state stats_state;
        -:  108:struct settings settings;
        -:  109:time_t process_started;     /* when the process was started */
        -:  110:conn **conns;
        -:  111:
        -:  112:struct slab_rebalance slab_rebal;
        -:  113:volatile int slab_rebalance_signal;
        -:  114:#ifdef EXTSTORE
        -:  115:/* hoping this is temporary; I'd prefer to cut globals, but will complete this
        -:  116: * battle another day.
        -:  117: */
        -:  118:void *ext_storage = NULL;
        -:  119:#endif
        -:  120:/** file scope variables **/
        -:  121:static conn *listen_conn = NULL;
        -:  122:static int max_fds;
        -:  123:static struct event_base *main_base;
        -:  124:
        -:  125:enum transmit_result {
        -:  126:    TRANSMIT_COMPLETE,   /** All done writing. */
        -:  127:    TRANSMIT_INCOMPLETE, /** More data remaining to write. */
        -:  128:    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */
        -:  129:    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */
        -:  130:};
        -:  131:
        -:  132:/* Default methods to read from/ write to a socket */
   559046:  133:ssize_t tcp_read(conn *c, void *buf, size_t count) {
  559046*:  134:    assert (c != NULL);
   559046:  135:    return read(c->sfd, buf, count);
        -:  136:}
        -:  137:
   415625:  138:ssize_t tcp_sendmsg(conn *c, struct msghdr *msg, int flags) {
  415625*:  139:    assert (c != NULL);
   415625:  140:    return sendmsg(c->sfd, msg, flags);
        -:  141:}
        -:  142:
     4045:  143:ssize_t tcp_write(conn *c, void *buf, size_t count) {
    4045*:  144:    assert (c != NULL);
     4045:  145:    return write(c->sfd, buf, count);
        -:  146:}
        -:  147:
        -:  148:static enum transmit_result transmit(conn *c);
        -:  149:
        -:  150:/* This reduces the latency without adding lots of extra wiring to be able to
        -:  151: * notify the listener thread of when to listen again.
        -:  152: * Also, the clock timer could be broken out into its own thread and we
        -:  153: * can block the listener via a condition.
        -:  154: */
        -:  155:static volatile bool allow_new_conns = true;
        -:  156:static int stop_main_loop = NOT_STOP;
        -:  157:static struct event maxconnsevent;
    #####:  158:static void maxconns_handler(const evutil_socket_t fd, const short which, void *arg) {
    #####:  159:    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};
        -:  160:
    #####:  161:    if (fd == -42 || allow_new_conns == false) {
        -:  162:        /* reschedule in 10ms if we need to keep polling */
    #####:  163:        evtimer_set(&maxconnsevent, maxconns_handler, 0);
    #####:  164:        event_base_set(main_base, &maxconnsevent);
    #####:  165:        evtimer_add(&maxconnsevent, &t);
        -:  166:    } else {
    #####:  167:        evtimer_del(&maxconnsevent);
    #####:  168:        accept_new_conns(true);
        -:  169:    }
    #####:  170:}
        -:  171:
        -:  172:/*
        -:  173: * given time value that's either unix time or delta from current unix time, return
        -:  174: * unix time. Use the fact that delta can't exceed one month (and real time value can't
        -:  175: * be that low).
        -:  176: */
   329436:  177:rel_time_t realtime(const time_t exptime) {
        -:  178:    /* no. of seconds in 30 days - largest possible delta exptime */
        -:  179:
   329436:  180:    if (exptime == 0) return 0; /* 0 means never expire */
        -:  181:
     1660:  182:    if (exptime > REALTIME_MAXDELTA) {
        -:  183:        /* if item expiration is at/before the server started, give it an
        -:  184:           expiration time of 1 second after the server started.
        -:  185:           (because 0 means don't expire).  without this, we'd
        -:  186:           underflow and wrap around to some large value way in the
        -:  187:           future, effectively making items expiring in the past
        -:  188:           really expiring never */
       13:  189:        if (exptime <= process_started)
        -:  190:            return (rel_time_t)1;
        8:  191:        return (rel_time_t)(exptime - process_started);
        -:  192:    } else {
     1647:  193:        return (rel_time_t)(exptime + current_time);
        -:  194:    }
        -:  195:}
        -:  196:
      120:  197:static void stats_init(void) {
      120:  198:    memset(&stats, 0, sizeof(struct stats));
      120:  199:    memset(&stats_state, 0, sizeof(struct stats_state));
      120:  200:    stats_state.accepting_conns = true; /* assuming we start in this state. */
        -:  201:
        -:  202:    /* make the time we started always be 2 seconds before we really
        -:  203:       did, so time(0) - time.started is never zero.  if so, things
        -:  204:       like 'settings.oldest_live' which act as booleans as well as
        -:  205:       values are now false in boolean context... */
      120:  206:    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;
      120:  207:    stats_prefix_init(settings.prefix_delimiter);
      120:  208:}
        -:  209:
        3:  210:void stats_reset(void) {
        3:  211:    STATS_LOCK();
        3:  212:    memset(&stats, 0, sizeof(struct stats));
        3:  213:    stats_prefix_clear();
        3:  214:    STATS_UNLOCK();
        3:  215:    threadlocal_stats_reset();
        3:  216:    item_stats_reset();
        3:  217:}
        -:  218:
      428:  219:static void settings_init(void) {
      428:  220:    settings.use_cas = true;
      428:  221:    settings.access = 0700;
      428:  222:    settings.port = 11211;
      428:  223:    settings.udpport = 0;
        -:  224:#ifdef TLS
        -:  225:    settings.ssl_enabled = false;
        -:  226:    settings.ssl_ctx = NULL;
        -:  227:    settings.ssl_chain_cert = NULL;
        -:  228:    settings.ssl_key = NULL;
        -:  229:    settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -:  230:    settings.ssl_keyformat = SSL_FILETYPE_PEM;
        -:  231:    settings.ssl_ciphers = NULL;
        -:  232:    settings.ssl_ca_cert = NULL;
        -:  233:    settings.ssl_last_cert_refresh_time = current_time;
        -:  234:    settings.ssl_wbuf_size = 16 * 1024; // default is 16KB (SSL max frame size is 17KB)
        -:  235:    settings.ssl_session_cache = false;
        -:  236:    settings.ssl_kernel_tls = false;
        -:  237:    settings.ssl_min_version = TLS1_2_VERSION;
        -:  238:#endif
        -:  239:    /* By default this string should be NULL for getaddrinfo() */
      428:  240:    settings.inter = NULL;
      428:  241:    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */
      428:  242:    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */
      428:  243:    settings.verbose = 0;
      428:  244:    settings.oldest_live = 0;
      428:  245:    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */
      428:  246:    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */
      428:  247:    settings.socketpath = NULL;       /* by default, not using a unix socket */
      428:  248:    settings.auth_file = NULL;        /* by default, not using ASCII authentication tokens */
      428:  249:    settings.factor = 1.25;
      428:  250:    settings.chunk_size = 48;         /* space for a modest key and value */
      428:  251:    settings.num_threads = 4;         /* N workers */
      428:  252:    settings.num_threads_per_udp = 0;
      428:  253:    settings.prefix_delimiter = ':';
      428:  254:    settings.detail_enabled = 0;
      428:  255:    settings.reqs_per_event = 20;
      428:  256:    settings.backlog = 1024;
      428:  257:    settings.binding_protocol = negotiating_prot;
      428:  258:    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */
      428:  259:    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */
      428:  260:    settings.slab_chunk_size_max = settings.slab_page_size / 2;
      428:  261:    settings.sasl = false;
      428:  262:    settings.maxconns_fast = true;
      428:  263:    settings.lru_crawler = false;
      428:  264:    settings.lru_crawler_sleep = 100;
      428:  265:    settings.lru_crawler_tocrawl = 0;
      428:  266:    settings.lru_maintainer_thread = false;
      428:  267:    settings.lru_segmented = true;
      428:  268:    settings.hot_lru_pct = 20;
      428:  269:    settings.warm_lru_pct = 40;
      428:  270:    settings.hot_max_factor = 0.2;
      428:  271:    settings.warm_max_factor = 2.0;
      428:  272:    settings.temp_lru = false;
      428:  273:    settings.temporary_ttl = 61;
      428:  274:    settings.idle_timeout = 0; /* disabled */
      428:  275:    settings.hashpower_init = 0;
      428:  276:    settings.slab_reassign = true;
      428:  277:    settings.slab_automove = 1;
      428:  278:    settings.slab_automove_ratio = 0.8;
      428:  279:    settings.slab_automove_window = 30;
      428:  280:    settings.shutdown_command = false;
      428:  281:    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;
      428:  282:    settings.flush_enabled = true;
      428:  283:    settings.dump_enabled = true;
      428:  284:    settings.crawls_persleep = 1000;
      428:  285:    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;
      428:  286:    settings.logger_buf_size = LOGGER_BUF_SIZE;
      428:  287:    settings.drop_privileges = false;
      428:  288:    settings.watch_enabled = true;
      428:  289:    settings.read_buf_mem_limit = 0;
        -:  290:#ifdef MEMCACHED_DEBUG
      428:  291:    settings.relaxed_privileges = false;
        -:  292:#endif
      428:  293:    settings.num_napi_ids = 0;
      428:  294:    settings.memory_file = NULL;
        -:  295:#ifdef SOCK_COOKIE_ID
      428:  296:    settings.sock_cookie_id = 0;
        -:  297:#endif
      428:  298:}
        -:  299:
        -:  300:extern pthread_mutex_t conn_lock;
        -:  301:
        -:  302:/* Connection timeout thread bits */
        -:  303:static pthread_t conn_timeout_tid;
        -:  304:static int do_run_conn_timeout_thread;
        -:  305:static pthread_cond_t conn_timeout_cond = PTHREAD_COND_INITIALIZER;
        -:  306:static pthread_mutex_t conn_timeout_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  307:
        -:  308:#define CONNS_PER_SLICE 100
        1:  309:static void *conn_timeout_thread(void *arg) {
        1:  310:    int i;
        1:  311:    conn *c;
        1:  312:    rel_time_t oldest_last_cmd;
        1:  313:    int sleep_time;
        1:  314:    int sleep_slice = max_fds / CONNS_PER_SLICE;
        1:  315:    if (sleep_slice == 0)
    #####:  316:        sleep_slice = CONNS_PER_SLICE;
        -:  317:
        1:  318:    useconds_t timeslice = 1000000 / sleep_slice;
        -:  319:
        1:  320:    mutex_lock(&conn_timeout_lock);
        4:  321:    while(do_run_conn_timeout_thread) {
        4:  322:        if (settings.verbose > 2)
    #####:  323:            fprintf(stderr, "idle timeout thread at top of connection list\n");
        -:  324:
        4:  325:        oldest_last_cmd = current_time;
        -:  326:
     4100:  327:        for (i = 0; i < max_fds; i++) {
     4096:  328:            if ((i % CONNS_PER_SLICE) == 0) {
       44:  329:                if (settings.verbose > 2)
    #####:  330:                    fprintf(stderr, "idle timeout thread sleeping for %ulus\n",
        -:  331:                        (unsigned int)timeslice);
       44:  332:                usleep(timeslice);
        -:  333:            }
        -:  334:
     4096:  335:            if (!conns[i])
     4073:  336:                continue;
        -:  337:
       23:  338:            c = conns[i];
        -:  339:
       23:  340:            if (!IS_TCP(c->transport))
       16:  341:                continue;
        -:  342:
        7:  343:            if (c->state != conn_new_cmd && c->state != conn_read)
        5:  344:                continue;
        -:  345:
        2:  346:            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  347:                timeout_conn(c);
        -:  348:            } else {
        1:  349:                if (c->last_cmd_time < oldest_last_cmd)
        -:  350:                    oldest_last_cmd = c->last_cmd_time;
        -:  351:            }
        -:  352:        }
        -:  353:
        -:  354:        /* This is the soonest we could have another connection time out */
        4:  355:        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;
        4:  356:        if (sleep_time <= 0)
        -:  357:            sleep_time = 1;
        -:  358:
        4:  359:        if (settings.verbose > 2)
    #####:  360:            fprintf(stderr,
        -:  361:                    "idle timeout thread finished pass, sleeping for %ds\n",
        -:  362:                    sleep_time);
        -:  363:
        4:  364:        struct timeval now;
        4:  365:        struct timespec to_sleep;
        4:  366:        gettimeofday(&now, NULL);
        4:  367:        to_sleep.tv_sec = now.tv_sec + sleep_time;
        4:  368:        to_sleep.tv_nsec = 0;
        -:  369:
        4:  370:        pthread_cond_timedwait(&conn_timeout_cond, &conn_timeout_lock, &to_sleep);
        -:  371:    }
        -:  372:
    #####:  373:    mutex_unlock(&conn_timeout_lock);
    #####:  374:    return NULL;
        -:  375:}
        -:  376:
        1:  377:static int start_conn_timeout_thread(void) {
        1:  378:    int ret;
        -:  379:
        1:  380:    if (settings.idle_timeout == 0)
        -:  381:        return -1;
        -:  382:
        1:  383:    do_run_conn_timeout_thread = 1;
        1:  384:    if ((ret = pthread_create(&conn_timeout_tid, NULL,
        -:  385:        conn_timeout_thread, NULL)) != 0) {
    #####:  386:        fprintf(stderr, "Can't create idle connection timeout thread: %s\n",
        -:  387:            strerror(ret));
    #####:  388:        return -1;
        -:  389:    }
        1:  390:    thread_setname(conn_timeout_tid, "mc-idletimeout");
        -:  391:
        1:  392:    return 0;
        -:  393:}
        -:  394:
        2:  395:int stop_conn_timeout_thread(void) {
        2:  396:    if (!do_run_conn_timeout_thread)
        -:  397:        return -1;
    #####:  398:    mutex_lock(&conn_timeout_lock);
    #####:  399:    do_run_conn_timeout_thread = 0;
    #####:  400:    pthread_cond_signal(&conn_timeout_cond);
    #####:  401:    mutex_unlock(&conn_timeout_lock);
    #####:  402:    pthread_join(conn_timeout_tid, NULL);
    #####:  403:    return 0;
        -:  404:}
        -:  405:
        -:  406:/*
        -:  407: * read buffer cache helper functions
        -:  408: */
   462741:  409:static void rbuf_release(conn *c) {
   462741:  410:    if (c->rbuf != NULL && c->rbytes == 0 && !IS_UDP(c->transport)) {
   456876:  411:        if (c->rbuf_malloced) {
        3:  412:            free(c->rbuf);
        3:  413:            c->rbuf_malloced = false;
        -:  414:        } else {
   456873:  415:            do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  416:        }
   456876:  417:        c->rsize = 0;
   456876:  418:        c->rbuf = NULL;
   456876:  419:        c->rcurr = NULL;
        -:  420:    }
   462741:  421:}
        -:  422:
   460586:  423:static bool rbuf_alloc(conn *c) {
   460586:  424:    if (c->rbuf == NULL) {
   456876:  425:        c->rbuf = do_cache_alloc(c->thread->rbuf_cache);
   456876:  426:        if (!c->rbuf) {
    #####:  427:            THR_STATS_LOCK(c->thread);
    #####:  428:            c->thread->stats.read_buf_oom++;
    #####:  429:            THR_STATS_UNLOCK(c->thread);
    #####:  430:            return false;
        -:  431:        }
   456876:  432:        c->rsize = READ_BUFFER_SIZE;
   456876:  433:        c->rcurr = c->rbuf;
        -:  434:    }
        -:  435:    return true;
        -:  436:}
        -:  437:
        -:  438:// Just for handling huge ASCII multigets.
        -:  439:// The previous system was essentially the same; realloc'ing until big enough,
        -:  440:// then realloc'ing back down after the request finished.
        3:  441:bool rbuf_switch_to_malloc(conn *c) {
        -:  442:    // Might as well start with x2 and work from there.
        3:  443:    size_t size = c->rsize * 2;
        3:  444:    char *tmp = malloc(size);
        3:  445:    if (!tmp)
        -:  446:        return false;
        -:  447:
        3:  448:    memcpy(tmp, c->rcurr, c->rbytes);
        3:  449:    do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  450:
        3:  451:    c->rcurr = c->rbuf = tmp;
        3:  452:    c->rsize = size;
        3:  453:    c->rbuf_malloced = true;
        3:  454:    return true;
        -:  455:}
        -:  456:
        -:  457:/*
        -:  458: * Initializes the connections array. We don't actually allocate connection
        -:  459: * structures until they're needed, so as to avoid wasting memory when the
        -:  460: * maximum connection count is much higher than the actual number of
        -:  461: * connections.
        -:  462: *
        -:  463: * This does end up wasting a few pointers' worth of memory for FDs that are
        -:  464: * used for things other than connections, but that's worth it in exchange for
        -:  465: * being able to directly index the conns array by FD.
        -:  466: */
      120:  467:static void conn_init(void) {
        -:  468:    /* We're unlikely to see an FD much higher than maxconns. */
      120:  469:    int next_fd = dup(1);
      120:  470:    if (next_fd < 0) {
    #####:  471:        perror("Failed to duplicate file descriptor\n");
    #####:  472:        exit(1);
        -:  473:    }
      120:  474:    int headroom = 10;      /* account for extra unexpected open FDs */
      120:  475:    struct rlimit rl;
        -:  476:
      120:  477:    max_fds = settings.maxconns + headroom + next_fd;
        -:  478:
        -:  479:    /* But if possible, get the actual highest FD we can possibly ever see. */
      120:  480:    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {
      120:  481:        max_fds = rl.rlim_max;
        -:  482:    } else {
    #####:  483:        fprintf(stderr, "Failed to query maximum file descriptor; "
        -:  484:                        "falling back to maxconns\n");
        -:  485:    }
        -:  486:
      120:  487:    close(next_fd);
        -:  488:
      120:  489:    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {
    #####:  490:        fprintf(stderr, "Failed to allocate connection structures\n");
        -:  491:        /* This is unrecoverable so bail out early. */
    #####:  492:        exit(1);
        -:  493:    }
      120:  494:}
        -:  495:
     322*:  496:static const char *prot_text(enum protocol prot) {
     322*:  497:    char *rv = "unknown";
     322*:  498:    switch(prot) {
       2*:  499:        case ascii_prot:
       2*:  500:            rv = "ascii";
       2*:  501:            break;
       1*:  502:        case binary_prot:
       1*:  503:            rv = "binary";
       1*:  504:            break;
     319*:  505:        case negotiating_prot:
     319*:  506:            rv = "auto-negotiate";
     319*:  507:            break;
        -:  508:#ifdef PROXY
        -:  509:        case proxy_prot:
        -:  510:            rv = "proxy";
        -:  511:            break;
        -:  512:#endif
        -:  513:    }
     322*:  514:    return rv;
        -:  515:}
        -:  516:
        1:  517:void conn_close_idle(conn *c) {
        1:  518:    if (settings.idle_timeout > 0 &&
        1:  519:        (current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  520:        if (c->state != conn_new_cmd && c->state != conn_read) {
    #####:  521:            if (settings.verbose > 1)
    #####:  522:                fprintf(stderr,
        -:  523:                    "fd %d wants to timeout, but isn't in read state", c->sfd);
    #####:  524:            return;
        -:  525:        }
        -:  526:
        1:  527:        if (settings.verbose > 1)
    #####:  528:            fprintf(stderr, "Closing idle fd %d\n", c->sfd);
        -:  529:
        1:  530:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  531:        c->thread->stats.idle_kicks++;
        1:  532:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  533:
        1:  534:        c->close_reason = IDLE_TIMEOUT_CLOSE;
        -:  535:
        1:  536:        conn_set_state(c, conn_closing);
        1:  537:        drive_machine(c);
        -:  538:    }
        -:  539:}
        -:  540:
       13:  541:static void _conn_event_readd(conn *c) {
       13:  542:    c->ev_flags = EV_READ | EV_PERSIST;
       13:  543:    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);
       13:  544:    event_base_set(c->thread->base, &c->event);
        -:  545:
        -:  546:    // TODO: call conn_cleanup/fail/etc
       13:  547:    if (event_add(&c->event, 0) == -1) {
    #####:  548:        perror("event_add");
        -:  549:    }
       13:  550:}
        -:  551:
        -:  552:/* bring conn back from a sidethread. could have had its event base moved. */
      399:  553:void conn_worker_readd(conn *c) {
      399:  554:    if (c->io_queues_submitted) { // TODO: ensure this is safe?
      386:  555:        c->io_queues_submitted--;
        -:  556:        // If we're still waiting for other queues to return, don't re-add the
        -:  557:        // connection yet.
      386:  558:        if (c->io_queues_submitted != 0) {
        -:  559:            return;
        -:  560:        }
        -:  561:    }
        -:  562:
      399:  563:    switch (c->state) {
       11:  564:        case conn_closing:
        -:  565:            // might be fixable: only need to do this because we can't do
        -:  566:            // event_del() without the event being armed.
       11:  567:            _conn_event_readd(c);
       11:  568:            drive_machine(c);
       11:  569:            break;
    #####:  570:        case conn_io_pending:
        -:  571:            // The event listener was removed as more data showed up while
        -:  572:            // waiting for the async response.
    #####:  573:            _conn_event_readd(c);
        -:  574:            // Explicit fall-through.
      386:  575:        case conn_io_queue:
      386:  576:            conn_set_state(c, conn_io_resume);
        -:  577:            // machine will know how to return based on secondary state.
      386:  578:            drive_machine(c);
      386:  579:            break;
        2:  580:        default:
        2:  581:            _conn_event_readd(c);
        2:  582:            conn_set_state(c, conn_new_cmd);
        -:  583:    }
        -:  584:
        -:  585:}
        -:  586:
      544:  587:void thread_io_queue_add(LIBEVENT_THREAD *t, int type, void *ctx, io_queue_stack_cb cb) {
      544:  588:    io_queue_cb_t *q = t->io_queues;
      584:  589:    while (q->type != IO_QUEUE_NONE) {
       40:  590:        q++;
        -:  591:    }
      544:  592:    q->type = type;
      544:  593:    q->ctx = ctx;
      544:  594:    q->submit_cb = cb;
      544:  595:    return;
        -:  596:}
        -:  597:
     2204:  598:void conn_io_queue_setup(conn *c) {
     2204:  599:    io_queue_cb_t *qcb = c->thread->io_queues;
     2204:  600:    io_queue_t *q = c->io_queues;
     3209:  601:    while (qcb->type != IO_QUEUE_NONE) {
     1005:  602:        q->type = qcb->type;
     1005:  603:        q->ctx = qcb->ctx;
     1005:  604:        q->stack_ctx = NULL;
     1005:  605:        q->count = 0;
     1005:  606:        qcb++;
     1005:  607:        q++;
        -:  608:    }
     2204:  609:}
        -:  610:
        -:  611:// To be called from conn_release_items to ensure the stack ptrs are reset.
       28:  612:static void conn_io_queue_reset(conn *c) {
       30:  613:    for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
       2*:  614:        assert(q->count == 0);
        2:  615:        q->stack_ctx = NULL;
        -:  616:    }
       28:  617:}
        -:  618:
     386*:  619:io_queue_cb_t *thread_io_queue_get(LIBEVENT_THREAD *t, int type) {
     386*:  620:    io_queue_cb_t *q = t->io_queues;
     386*:  621:    while (q->type != IO_QUEUE_NONE) {
     386*:  622:        if (q->type == type) {
    #####:  623:            return q;
        -:  624:        }
    #####:  625:        q++;
        -:  626:    }
        -:  627:    return NULL;
        -:  628:}
        -:  629:
      783:  630:io_queue_t *conn_io_queue_get(conn *c, int type) {
      783:  631:    io_queue_t *q = c->io_queues;
      783:  632:    while (q->type != IO_QUEUE_NONE) {
      783:  633:        if (q->type == type) {
      783:  634:            return q;
        -:  635:        }
    #####:  636:        q++;
        -:  637:    }
        -:  638:    return NULL;
        -:  639:}
        -:  640:
        -:  641:// called to return a single IO object to the original worker thread.
      388:  642:void conn_io_queue_return(io_pending_t *io) {
      388:  643:    io->return_cb(io);
      388:  644:}
        -:  645:
     2334:  646:conn *conn_new(const int sfd, enum conn_states init_state,
        -:  647:                const int event_flags,
        -:  648:                const int read_buffer_size, enum network_transport transport,
        -:  649:                struct event_base *base, void *ssl, uint64_t conntag,
        -:  650:                enum protocol bproto) {
     2334:  651:    conn *c;
        -:  652:
    2334*:  653:    assert(sfd >= 0 && sfd < max_fds);
     2334:  654:    c = conns[sfd];
        -:  655:
     2334:  656:    if (NULL == c) {
     2322:  657:        if (!(c = (conn *)calloc(1, sizeof(conn)))) {
    #####:  658:            STATS_LOCK();
    #####:  659:            stats.malloc_fails++;
    #####:  660:            STATS_UNLOCK();
    #####:  661:            fprintf(stderr, "Failed to allocate connection object\n");
    #####:  662:            return NULL;
        -:  663:        }
     2322:  664:        MEMCACHED_CONN_CREATE(c);
     2322:  665:        c->read = NULL;
     2322:  666:        c->sendmsg = NULL;
     2322:  667:        c->write = NULL;
     2322:  668:        c->rbuf = NULL;
        -:  669:
     2322:  670:        c->rsize = read_buffer_size;
        -:  671:
        -:  672:        // UDP connections use a persistent static buffer.
     2322:  673:        if (c->rsize) {
      202:  674:            c->rbuf = (char *)malloc((size_t)c->rsize);
        -:  675:        }
        -:  676:
     2322:  677:        if (c->rsize && c->rbuf == NULL) {
    #####:  678:            conn_free(c);
    #####:  679:            STATS_LOCK();
    #####:  680:            stats.malloc_fails++;
    #####:  681:            STATS_UNLOCK();
    #####:  682:            fprintf(stderr, "Failed to allocate buffers for connection\n");
    #####:  683:            return NULL;
        -:  684:        }
        -:  685:
        -:  686:
     2322:  687:        STATS_LOCK();
     2322:  688:        stats_state.conn_structs++;
     2322:  689:        STATS_UNLOCK();
        -:  690:
     2322:  691:        c->sfd = sfd;
     2322:  692:        conns[sfd] = c;
        -:  693:    }
        -:  694:
     2334:  695:    c->transport = transport;
     2334:  696:    c->protocol = bproto;
     2334:  697:    c->tag = conntag;
        -:  698:
        -:  699:    /* unix socket mode doesn't need this, so zeroed out.  but why
        -:  700:     * is this done for every command?  presumably for UDP
        -:  701:     * mode.  */
     2334:  702:    if (!settings.socketpath) {
      124:  703:        c->request_addr_size = sizeof(c->request_addr);
        -:  704:    } else {
     2210:  705:        c->request_addr_size = 0;
        -:  706:    }
        -:  707:
     2334:  708:    if (transport == tcp_transport && init_state == conn_new_cmd) {
       20:  709:        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,
        -:  710:                        &c->request_addr_size)) {
    #####:  711:            perror("getpeername");
    #####:  712:            memset(&c->request_addr, 0, sizeof(c->request_addr));
        -:  713:        }
        -:  714:    }
        -:  715:
     2334:  716:    if (init_state == conn_new_cmd) {
     2132:  717:        LOGGER_LOG(NULL, LOG_CONNEVENTS, LOGGER_CONNECTION_NEW, NULL,
        -:  718:                &c->request_addr, c->request_addr_size, c->transport, 0, sfd);
        -:  719:    }
        -:  720:
     2334:  721:    if (settings.verbose > 1) {
        6:  722:        if (init_state == conn_listening) {
        6:  723:            fprintf(stderr, "<%d server listening (%s)\n", sfd,
        -:  724:                prot_text(c->protocol));
        3:  725:        } else if (IS_UDP(transport)) {
    #####:  726:            fprintf(stderr, "<%d server listening (udp)\n", sfd);
        3:  727:        } else if (c->protocol == negotiating_prot) {
        1:  728:            fprintf(stderr, "<%d new auto-negotiating client connection\n",
        -:  729:                    sfd);
        2:  730:        } else if (c->protocol == ascii_prot) {
        1:  731:            fprintf(stderr, "<%d new ascii client connection.\n", sfd);
        1:  732:        } else if (c->protocol == binary_prot) {
        1:  733:            fprintf(stderr, "<%d new binary client connection.\n", sfd);
        -:  734:#ifdef PROXY
        -:  735:        } else if (c->protocol == proxy_prot) {
        -:  736:            fprintf(stderr, "<%d new proxy client connection.\n", sfd);
        -:  737:#endif
        -:  738:        } else {
    #####:  739:            fprintf(stderr, "<%d new unknown (%d) client connection\n",
        -:  740:                sfd, c->protocol);
    #####:  741:            assert(false);
        -:  742:        }
        -:  743:    }
        -:  744:
        -:  745:#ifdef TLS
        -:  746:    c->ssl = NULL;
        -:  747:    c->ssl_wbuf = NULL;
        -:  748:    c->ssl_enabled = false;
        -:  749:#endif
     2334:  750:    c->state = init_state;
     2334:  751:    c->rlbytes = 0;
     2334:  752:    c->cmd = -1;
     2334:  753:    c->rbytes = 0;
     2334:  754:    c->rcurr = c->rbuf;
     2334:  755:    c->ritem = 0;
     2334:  756:    c->rbuf_malloced = false;
     2334:  757:    c->item_malloced = false;
     2334:  758:    c->sasl_started = false;
     2334:  759:    c->set_stale = false;
     2334:  760:    c->mset_res = false;
     2334:  761:    c->close_after_write = false;
     2334:  762:    c->last_cmd_time = current_time; /* initialize for idle kicker */
        -:  763:    // wipe all queues.
     2334:  764:    memset(c->io_queues, 0, sizeof(c->io_queues));
     2334:  765:    c->io_queues_submitted = 0;
        -:  766:
     2334:  767:    c->item = 0;
        -:  768:
     2334:  769:    c->noreply = false;
        -:  770:
        -:  771:#ifdef TLS
        -:  772:    if (ssl) {
        -:  773:        c->ssl = (SSL*)ssl;
        -:  774:        c->read = ssl_read;
        -:  775:        c->sendmsg = ssl_sendmsg;
        -:  776:        c->write = ssl_write;
        -:  777:        c->ssl_enabled = true;
        -:  778:        SSL_set_info_callback(c->ssl, ssl_callback);
        -:  779:    } else
        -:  780:#else
        -:  781:    // This must be NULL if TLS is not enabled.
    2334*:  782:    assert(ssl == NULL);
        -:  783:#endif
        -:  784:    {
     2334:  785:        c->read = tcp_read;
     2334:  786:        c->sendmsg = tcp_sendmsg;
     2334:  787:        c->write = tcp_write;
        -:  788:    }
        -:  789:
     2334:  790:    if (IS_UDP(transport)) {
       72:  791:        c->try_read_command = try_read_command_udp;
        -:  792:    } else {
     2262:  793:        switch (c->protocol) {
        7:  794:            case ascii_prot:
        7:  795:                if (settings.auth_file == NULL) {
        4:  796:                    c->authenticated = true;
        4:  797:                    c->try_read_command = try_read_command_ascii;
        -:  798:                } else {
        3:  799:                    c->authenticated = false;
        3:  800:                    c->try_read_command = try_read_command_asciiauth;
        -:  801:                }
        -:  802:                break;
        6:  803:            case binary_prot:
        -:  804:                // binprot handles its own authentication via SASL parsing.
        6:  805:                c->authenticated = false;
        6:  806:                c->try_read_command = try_read_command_binary;
        6:  807:                break;
     2249:  808:            case negotiating_prot:
     2249:  809:                c->try_read_command = try_read_command_negotiate;
     2249:  810:                break;
        -:  811:#ifdef PROXY
        -:  812:            case proxy_prot:
        -:  813:                c->try_read_command = try_read_command_proxy;
        -:  814:                break;
        -:  815:#endif
        -:  816:        }
     2334:  817:    }
        -:  818:
     2334:  819:    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);
     2334:  820:    event_base_set(base, &c->event);
     2334:  821:    c->ev_flags = event_flags;
        -:  822:
     2334:  823:    if (event_add(&c->event, 0) == -1) {
    #####:  824:        perror("event_add");
    #####:  825:        return NULL;
        -:  826:    }
        -:  827:
     2334:  828:    STATS_LOCK();
     2334:  829:    stats_state.curr_conns++;
     2334:  830:    stats.total_conns++;
     2334:  831:    STATS_UNLOCK();
        -:  832:
     2334:  833:    MEMCACHED_CONN_ALLOCATE(c->sfd);
        -:  834:
     2334:  835:    return c;
        -:  836:}
        -:  837:
   468585:  838:void conn_release_items(conn *c) {
  468585*:  839:    assert(c != NULL);
        -:  840:
   468585:  841:    if (c->item) {
        2:  842:        if (c->item_malloced) {
    #####:  843:            free(c->item);
    #####:  844:            c->item_malloced = false;
        -:  845:        } else {
        2:  846:            item_remove(c->item);
        -:  847:        }
        2:  848:        c->item = 0;
        -:  849:    }
        -:  850:
        -:  851:    // Cull any unsent responses.
   468585:  852:    if (c->resp_head) {
        -:  853:        mc_resp *resp = c->resp_head;
        -:  854:        // r_f() handles the chain maintenance.
      122:  855:        while (resp) {
        -:  856:            // temporary by default. hide behind a debug flag in the future:
        -:  857:            // double free detection. Transmit loops can drop out early, but
        -:  858:            // here we could infinite loop.
       94:  859:            if (resp->free) {
    #####:  860:                fprintf(stderr, "ERROR: double free detected during conn_release_items(): [%d] [%s]\n",
    #####:  861:                        c->sfd, c->protocol == binary_prot ? "binary" : "ascii");
        -:  862:                // Since this is a critical failure, just leak the memory.
        -:  863:                // If these errors are seen, an abort() can be used instead.
    #####:  864:                c->resp_head = NULL;
    #####:  865:                c->resp = NULL;
    #####:  866:                break;
        -:  867:            }
       94:  868:            resp = resp_finish(c, resp);
        -:  869:        }
       28:  870:        conn_io_queue_reset(c);
        -:  871:    }
   468585:  872:}
        -:  873:
     2133:  874:static void conn_cleanup(conn *c) {
    2133*:  875:    assert(c != NULL);
        -:  876:
     2133:  877:    conn_release_items(c);
        -:  878:#ifdef PROXY
        -:  879:    if (c->proxy_rctx) {
        -:  880:        proxy_cleanup_conn(c);
        -:  881:    }
        -:  882:#endif
     2133:  883:    if (c->sasl_conn) {
    #####:  884:        assert(settings.sasl);
    #####:  885:        sasl_dispose(&c->sasl_conn);
    #####:  886:        c->sasl_conn = NULL;
        -:  887:    }
        -:  888:
     2133:  889:    if (IS_UDP(c->transport)) {
    #####:  890:        conn_set_state(c, conn_read);
        -:  891:    }
     2133:  892:}
        -:  893:
        -:  894:/*
        -:  895: * Frees a connection.
        -:  896: */
    #####:  897:void conn_free(conn *c) {
    #####:  898:    if (c) {
    #####:  899:        assert(c != NULL);
    #####:  900:        assert(c->sfd >= 0 && c->sfd < max_fds);
        -:  901:
    #####:  902:        MEMCACHED_CONN_DESTROY(c);
    #####:  903:        conns[c->sfd] = NULL;
    #####:  904:        if (c->rbuf)
    #####:  905:            free(c->rbuf);
        -:  906:#ifdef TLS
        -:  907:        if (c->ssl_wbuf)
        -:  908:            c->ssl_wbuf = NULL;
        -:  909:#endif
        -:  910:
    #####:  911:        free(c);
        -:  912:    }
    #####:  913:}
        -:  914:
     2133:  915:static void conn_close(conn *c) {
    2133*:  916:    assert(c != NULL);
        -:  917:
     2133:  918:    if (c->thread) {
    2131*:  919:        LOGGER_LOG(c->thread->l, LOG_CONNEVENTS, LOGGER_CONNECTION_CLOSE, NULL,
        -:  920:                &c->request_addr, c->request_addr_size, c->transport,
        -:  921:                c->close_reason, c->sfd);
        -:  922:    }
        -:  923:
        -:  924:    /* delete the event, the socket and the conn */
     2133:  925:    event_del(&c->event);
        -:  926:
     2133:  927:    if (settings.verbose > 1)
        3:  928:        fprintf(stderr, "<%d connection closed.\n", c->sfd);
        -:  929:
     2133:  930:    conn_cleanup(c);
        -:  931:
        -:  932:    // force release of read buffer.
     2133:  933:    if (c->thread) {
     2131:  934:        c->rbytes = 0;
     2131:  935:        rbuf_release(c);
        -:  936:    }
        -:  937:
     2133:  938:    MEMCACHED_CONN_RELEASE(c->sfd);
     2133:  939:    conn_set_state(c, conn_closed);
        -:  940:#ifdef TLS
        -:  941:    if (c->ssl) {
        -:  942:        SSL_shutdown(c->ssl);
        -:  943:        SSL_free(c->ssl);
        -:  944:    }
        -:  945:#endif
     2133:  946:    close(c->sfd);
     2133:  947:    c->close_reason = 0;
     2133:  948:    pthread_mutex_lock(&conn_lock);
     2133:  949:    allow_new_conns = true;
     2133:  950:    pthread_mutex_unlock(&conn_lock);
        -:  951:
     2133:  952:    STATS_LOCK();
     2133:  953:    stats_state.curr_conns--;
     2133:  954:    STATS_UNLOCK();
        -:  955:
     2133:  956:    return;
        -:  957:}
        -:  958:
        -:  959:// Since some connections might be off on side threads and some are managed as
        -:  960:// listeners we need to walk through them all from a central point.
        -:  961:// Must be called with all worker threads hung or in the process of closing.
        2:  962:void conn_close_all(void) {
        2:  963:    int i;
     2050:  964:    for (i = 0; i < max_fds; i++) {
     2048:  965:        if (conns[i] && conns[i]->state != conn_closed) {
        3:  966:            conn_close(conns[i]);
        -:  967:        }
        -:  968:    }
        2:  969:}
        -:  970:
        -:  971:/**
        -:  972: * Convert a state name to a human readable form.
        -:  973: */
      16*:  974:static const char *state_text(enum conn_states state) {
      16*:  975:    const char* const statenames[] = { "conn_listening",
        -:  976:                                       "conn_new_cmd",
        -:  977:                                       "conn_waiting",
        -:  978:                                       "conn_read",
        -:  979:                                       "conn_parse_cmd",
        -:  980:                                       "conn_write",
        -:  981:                                       "conn_nread",
        -:  982:                                       "conn_swallow",
        -:  983:                                       "conn_closing",
        -:  984:                                       "conn_mwrite",
        -:  985:                                       "conn_closed",
        -:  986:                                       "conn_watch",
        -:  987:                                       "conn_io_queue",
        -:  988:                                       "conn_io_resume",
        -:  989:                                       "conn_io_pending" };
      16*:  990:    return statenames[state];
        -:  991:}
        -:  992:
        -:  993:/*
        -:  994: * Sets a connection's current state in the state machine. Any special
        -:  995: * processing that needs to happen on certain state transitions can
        -:  996: * happen here.
        -:  997: */
  3279040:  998:void conn_set_state(conn *c, enum conn_states state) {
 3279040*:  999:    assert(c != NULL);
 3279040*: 1000:    assert(state >= conn_listening && state < conn_max_state);
        -: 1001:
  3279040: 1002:    if (state != c->state) {
  3279039: 1003:        if (settings.verbose > 2) {
    #####: 1004:            fprintf(stderr, "%d: going from %s to %s\n",
        -: 1005:                    c->sfd, state_text(c->state),
        -: 1006:                    state_text(state));
        -: 1007:        }
        -: 1008:
  3279039: 1009:        if (state == conn_write || state == conn_mwrite) {
  3279039: 1010:            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->resp->wbuf, c->resp->wbytes);
        -: 1011:        }
  3279039: 1012:        c->state = state;
        -: 1013:    }
  3279040: 1014:}
        -: 1015:
        -: 1016:/*
        -: 1017: * response object helper functions
        -: 1018: */
   461514: 1019:void resp_reset(mc_resp *resp) {
   461514: 1020:    if (resp->item) {
    #####: 1021:        item_remove(resp->item);
    #####: 1022:        resp->item = NULL;
        -: 1023:    }
   461514: 1024:    if (resp->write_and_free) {
        -: 1025:#ifdef PROXY
        -: 1026:        if (resp->proxy_res) {
        -: 1027:            LIBEVENT_THREAD *t = resp->bundle->thread;
        -: 1028:            pthread_mutex_lock(&t->proxy_limit_lock);
        -: 1029:            t->proxy_buffer_memory_used -= resp->wbytes;
        -: 1030:            pthread_mutex_unlock(&t->proxy_limit_lock);
        -: 1031:        }
        -: 1032:#endif
    #####: 1033:        free(resp->write_and_free);
    #####: 1034:        resp->write_and_free = NULL;
        -: 1035:    }
   461514: 1036:    resp->wbytes = 0;
   461514: 1037:    resp->tosend = 0;
   461514: 1038:    resp->iovcnt = 0;
   461514: 1039:    resp->chunked_data_iov = 0;
   461514: 1040:    resp->chunked_total = 0;
   461514: 1041:    resp->skip = false;
   461514: 1042:}
        -: 1043:
   532384: 1044:void resp_add_iov(mc_resp *resp, const void *buf, int len) {
  532384*: 1045:    assert(resp->iovcnt < MC_RESP_IOVCOUNT);
   532384: 1046:    int x = resp->iovcnt;
   532384: 1047:    resp->iov[x].iov_base = (void *)buf;
   532384: 1048:    resp->iov[x].iov_len = len;
   532384: 1049:    resp->iovcnt++;
   532384: 1050:    resp->tosend += len;
   532384: 1051:}
        -: 1052:
        -: 1053:// Notes that an IOV should be handled as a chunked item header.
        -: 1054:// TODO: I'm hoping this isn't a permanent abstraction while I learn what the
        -: 1055:// API should be.
    18975: 1056:void resp_add_chunked_iov(mc_resp *resp, const void *buf, int len) {
    18975: 1057:    resp->chunked_data_iov = resp->iovcnt;
    18975: 1058:    resp->chunked_total = len;
    18975: 1059:    resp_add_iov(resp, buf, len);
    18975: 1060:}
        -: 1061:
        -: 1062:// resp_allocate and resp_free are a wrapper around read buffers which makes
        -: 1063:// read buffers the only network memory to track.
        -: 1064:// Normally this would be too excessive. In this case it allows end users to
        -: 1065:// track a single memory limit for ephemeral connection buffers.
        -: 1066:// Fancy bit twiddling tricks are avoided to help keep this straightforward.
        -: 1067:static mc_resp* resp_allocate(conn *c) {
        -: 1068:    LIBEVENT_THREAD *th = c->thread;
        -: 1069:    mc_resp *resp = NULL;
        -: 1070:    mc_resp_bundle *b = th->open_bundle;
        -: 1071:
        -: 1072:    if (b != NULL) {
        -: 1073:        for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1074:            // loop around starting from the most likely to be free
        -: 1075:            int x = (i + b->next_check) % MAX_RESP_PER_BUNDLE;
        -: 1076:            if (b->r[x].free) {
        -: 1077:                resp = &b->r[x];
        -: 1078:                b->next_check = x+1;
        -: 1079:                break;
        -: 1080:            }
        -: 1081:        }
        -: 1082:
        -: 1083:        if (resp != NULL) {
        -: 1084:            b->refcount++;
        -: 1085:            memset(resp, 0, sizeof(*resp));
        -: 1086:            resp->free = false; // redundant, for clarity.
        -: 1087:            resp->bundle = b;
        -: 1088:            if (b->refcount == MAX_RESP_PER_BUNDLE) {
        -: 1089:                assert(b->prev == NULL);
        -: 1090:                // We only allocate off the head. Assign new head.
        -: 1091:                th->open_bundle = b->next;
        -: 1092:                // Remove ourselves from the list.
        -: 1093:                if (b->next) {
        -: 1094:                    b->next->prev = 0;
        -: 1095:                    b->next = 0;
        -: 1096:                }
        -: 1097:            }
        -: 1098:        }
        -: 1099:    }
        -: 1100:
        -: 1101:    if (resp == NULL) {
        -: 1102:        assert(th->open_bundle == NULL);
        -: 1103:        b = do_cache_alloc(th->rbuf_cache);
        -: 1104:        if (b) {
        -: 1105:            THR_STATS_LOCK(th);
        -: 1106:            th->stats.response_obj_bytes += READ_BUFFER_SIZE;
        -: 1107:            THR_STATS_UNLOCK(th);
        -: 1108:            b->next_check = 1;
        -: 1109:            b->refcount = 1;
        -: 1110:            for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1111:                b->r[i].free = true;
        -: 1112:            }
        -: 1113:            b->next = 0;
        -: 1114:            b->prev = 0;
        -: 1115:            b->thread = th;
        -: 1116:            th->open_bundle = b;
        -: 1117:            resp = &b->r[0];
        -: 1118:            memset(resp, 0, sizeof(*resp));
        -: 1119:            resp->free = false; // redundant. for clarity.
        -: 1120:            resp->bundle = b;
        -: 1121:        } else {
        -: 1122:            return NULL;
        -: 1123:        }
        -: 1124:    }
        -: 1125:
        -: 1126:    return resp;
        -: 1127:}
        -: 1128:
   620542: 1129:void resp_free(LIBEVENT_THREAD *th, mc_resp *resp) {
   620542: 1130:    mc_resp_bundle *b = resp->bundle;
        -: 1131:
   620542: 1132:    resp->free = true;
   620542: 1133:    b->refcount--;
   620542: 1134:    if (b->refcount == 0) {
   472714: 1135:        if (b == th->open_bundle && b->next == 0) {
        -: 1136:            // This is the final bundle. Just hold and reuse to skip init loop
  466474*: 1137:            assert(b->prev == 0);
   466474: 1138:            b->next_check = 0;
        -: 1139:        } else {
        -: 1140:            // Assert that we're either in the list or at the head.
    6240*: 1141:            assert((b->next || b->prev) || b == th->open_bundle);
        -: 1142:
        -: 1143:            // unlink from list.
     6240: 1144:            mc_resp_bundle **head = &th->open_bundle;
     6240: 1145:            if (*head == b) *head = b->next;
        -: 1146:            // Not tracking the tail.
    6240*: 1147:            assert(b->next != b && b->prev != b);
        -: 1148:
     6240: 1149:            if (b->next) b->next->prev = b->prev;
    6240*: 1150:            if (b->prev) b->prev->next = b->next;
        -: 1151:
        -: 1152:            // Now completely done with this buffer.
     6240: 1153:            do_cache_free(th->rbuf_cache, b);
     6240: 1154:            THR_STATS_LOCK(th);
     6240: 1155:            th->stats.response_obj_bytes -= READ_BUFFER_SIZE;
     6240: 1156:            THR_STATS_UNLOCK(th);
        -: 1157:        }
        -: 1158:    } else {
   147828: 1159:        mc_resp_bundle **head = &th->open_bundle;
        -: 1160:        // NOTE: since we're not tracking tail, latest free ends up in head.
   147828: 1161:        if (b == th->open_bundle || (b->prev || b->next)) {
        -: 1162:            // If we're already linked, leave it in place to save CPU.
        -: 1163:        } else {
        -: 1164:            // Non-zero refcount, need to link into the freelist.
     6298: 1165:            b->prev = 0;
     6298: 1166:            b->next = *head;
     6298: 1167:            if (b->next) b->next->prev = b;
     6298: 1168:            *head = b;
        -: 1169:        }
        -: 1170:
        -: 1171:    }
   620542: 1172:    THR_STATS_LOCK(th);
   620542: 1173:    th->stats.response_obj_count--;
   620542: 1174:    THR_STATS_UNLOCK(th);
   620542: 1175:}
        -: 1176:
   620544: 1177:bool resp_start(conn *c) {
   620544: 1178:    mc_resp *resp = resp_allocate(c);
   620544: 1179:    if (!resp) {
        2: 1180:        THR_STATS_LOCK(c->thread);
        2: 1181:        c->thread->stats.response_obj_oom++;
        2: 1182:        THR_STATS_UNLOCK(c->thread);
        2: 1183:        return false;
        -: 1184:    }
        -: 1185:
        -: 1186:    // handling the stats counters here to simplify testing
   620542: 1187:    THR_STATS_LOCK(c->thread);
   620542: 1188:    c->thread->stats.response_obj_count++;
   620542: 1189:    THR_STATS_UNLOCK(c->thread);
        -: 1190:
   620542: 1191:    if (!c->resp_head) {
   466476: 1192:        c->resp_head = resp;
        -: 1193:    }
   620542: 1194:    if (!c->resp) {
   466476: 1195:        c->resp = resp;
        -: 1196:    } else {
   154066: 1197:        c->resp->next = resp;
   154066: 1198:        c->resp = resp;
        -: 1199:    }
   620542: 1200:    if (IS_UDP(c->transport)) {
        -: 1201:        // need to hold on to some data for async responses.
       18: 1202:        c->resp->request_id = c->request_id;
       18: 1203:        c->resp->request_addr = c->request_addr;
       18: 1204:        c->resp->request_addr_size = c->request_addr_size;
        -: 1205:    }
        -: 1206:    return true;
        -: 1207:}
        -: 1208:
    #####: 1209:mc_resp *resp_start_unlinked(conn *c) {
    #####: 1210:    mc_resp *resp = resp_allocate(c);
    #####: 1211:    if (!resp) {
    #####: 1212:        THR_STATS_LOCK(c->thread);
    #####: 1213:        c->thread->stats.response_obj_oom++;
    #####: 1214:        THR_STATS_UNLOCK(c->thread);
    #####: 1215:        return false;
        -: 1216:    }
        -: 1217:
        -: 1218:    // handling the stats counters here to simplify testing
    #####: 1219:    THR_STATS_LOCK(c->thread);
    #####: 1220:    c->thread->stats.response_obj_count++;
    #####: 1221:    THR_STATS_UNLOCK(c->thread);
        -: 1222:
    #####: 1223:    if (IS_UDP(c->transport)) {
        -: 1224:        // need to hold on to some data for async responses.
    #####: 1225:        c->resp->request_id = c->request_id;
    #####: 1226:        c->resp->request_addr = c->request_addr;
    #####: 1227:        c->resp->request_addr_size = c->request_addr_size;
        -: 1228:    }
        -: 1229:
        -: 1230:    return resp;
        -: 1231:}
        -: 1232:
        -: 1233:// returns next response in chain.
   620542: 1234:mc_resp* resp_finish(conn *c, mc_resp *resp) {
   620542: 1235:    mc_resp *next = resp->next;
   620542: 1236:    if (resp->item) {
        -: 1237:        // TODO: cache hash value in resp obj?
    56290: 1238:        item_remove(resp->item);
    56290: 1239:        resp->item = NULL;
        -: 1240:    }
   620542: 1241:    if (resp->write_and_free) {
        -: 1242:#ifdef PROXY
        -: 1243:        if (resp->proxy_res) {
        -: 1244:            LIBEVENT_THREAD *t = resp->bundle->thread;
        -: 1245:            pthread_mutex_lock(&t->proxy_limit_lock);
        -: 1246:            t->proxy_buffer_memory_used -= resp->wbytes;
        -: 1247:            pthread_mutex_unlock(&t->proxy_limit_lock);
        -: 1248:        }
        -: 1249:#endif
     5415: 1250:        free(resp->write_and_free);
        -: 1251:    }
   620542: 1252:    if (resp->io_pending) {
      391: 1253:        io_pending_t *io = resp->io_pending;
        -: 1254:        // If we had a pending IO, tell it to internally clean up then return
        -: 1255:        // the main object back to our thread cache.
      391: 1256:        io->finalize_cb(io);
      391: 1257:        do_cache_free(c->thread->io_cache, io);
      391: 1258:        resp->io_pending = NULL;
        -: 1259:    }
   620542: 1260:    if (c->resp_head == resp) {
   620542: 1261:        c->resp_head = next;
        -: 1262:    }
   620542: 1263:    if (c->resp == resp) {
   466476: 1264:        c->resp = NULL;
        -: 1265:    }
   620542: 1266:    resp_free(c->thread, resp);
   620542: 1267:    return next;
        -: 1268:}
        -: 1269:
        -: 1270:// tells if connection has a depth of response objects to process.
       14: 1271:bool resp_has_stack(conn *c) {
       14: 1272:    return c->resp_head->next != NULL ? true : false;
        -: 1273:}
        -: 1274:
   446540: 1275:void out_string(conn *c, const char *str) {
   446540: 1276:    size_t len;
  446540*: 1277:    assert(c != NULL);
   446540: 1278:    mc_resp *resp = c->resp;
        -: 1279:
        -: 1280:    // if response was original filled with something, but we're now writing
        -: 1281:    // out an error or similar, have to reset the object first.
        -: 1282:    // TODO: since this is often redundant with allocation, how many callers
        -: 1283:    // are actually requiring it be reset? Can we fast test by just looking at
        -: 1284:    // tosend and reset if nonzero?
   446540: 1285:    resp_reset(resp);
        -: 1286:
   446540: 1287:    if (c->noreply) {
        -: 1288:        // TODO: just invalidate the response since nothing's been attempted
        -: 1289:        // to send yet?
   164204: 1290:        resp->skip = true;
   164204: 1291:        if (settings.verbose > 1)
    #####: 1292:            fprintf(stderr, ">%d NOREPLY %s\n", c->sfd, str);
   164204: 1293:        conn_set_state(c, conn_new_cmd);
   164204: 1294:        return;
        -: 1295:    }
        -: 1296:
   282336: 1297:    if (settings.verbose > 1)
    #####: 1298:        fprintf(stderr, ">%d %s\n", c->sfd, str);
        -: 1299:
        -: 1300:    // Fill response object with static string.
        -: 1301:
   282336: 1302:    len = strlen(str);
   282336: 1303:    if ((len + 2) > WRITE_BUFFER_SIZE) {
        -: 1304:        /* ought to be always enough. just fail for simplicity */
    #####: 1305:        str = "SERVER_ERROR output line too long";
    #####: 1306:        len = strlen(str);
        -: 1307:    }
        -: 1308:
   282336: 1309:    memcpy(resp->wbuf, str, len);
   282336: 1310:    memcpy(resp->wbuf + len, "\r\n", 2);
   282336: 1311:    resp_add_iov(resp, resp->wbuf, len + 2);
        -: 1312:
   282336: 1313:    conn_set_state(c, conn_new_cmd);
   282336: 1314:    return;
        -: 1315:}
        -: 1316:
        -: 1317:// For metaget-style ASCII commands. Ignores noreply, ensuring clients see
        -: 1318:// protocol level errors.
        4: 1319:void out_errstring(conn *c, const char *str) {
        4: 1320:    c->noreply = false;
        4: 1321:    out_string(c, str);
        4: 1322:}
        -: 1323:
        -: 1324:/*
        -: 1325: * Outputs a protocol-specific "out of memory" error. For ASCII clients,
        -: 1326: * this is equivalent to out_string().
        -: 1327: */
        7: 1328:void out_of_memory(conn *c, char *ascii_error) {
        7: 1329:    const static char error_prefix[] = "SERVER_ERROR ";
        7: 1330:    const static int error_prefix_len = sizeof(error_prefix) - 1;
        -: 1331:
        7: 1332:    if (c->protocol == binary_prot) {
        -: 1333:        /* Strip off the generic error prefix; it's irrelevant in binary */
    #####: 1334:        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {
    #####: 1335:            ascii_error += error_prefix_len;
        -: 1336:        }
    #####: 1337:        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);
        -: 1338:    } else {
        7: 1339:        out_string(c, ascii_error);
        -: 1340:    }
        7: 1341:}
        -: 1342:
     3028: 1343:static void append_bin_stats(const char *key, const uint16_t klen,
        -: 1344:                             const char *val, const uint32_t vlen,
        -: 1345:                             conn *c) {
     3028: 1346:    char *buf = c->stats.buffer + c->stats.offset;
     3028: 1347:    uint32_t bodylen = klen + vlen;
     3028: 1348:    protocol_binary_response_header header = {
        -: 1349:        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,
        -: 1350:        .response.opcode = PROTOCOL_BINARY_CMD_STAT,
     3028: 1351:        .response.keylen = (uint16_t)htons(klen),
        -: 1352:        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,
     3028: 1353:        .response.bodylen = htonl(bodylen),
     3028: 1354:        .response.opaque = c->opaque
        -: 1355:    };
        -: 1356:
     3028: 1357:    memcpy(buf, header.bytes, sizeof(header.response));
     3028: 1358:    buf += sizeof(header.response);
        -: 1359:
     3028: 1360:    if (klen > 0) {
     2987: 1361:        memcpy(buf, key, klen);
     2987: 1362:        buf += klen;
        -: 1363:
     2987: 1364:        if (vlen > 0) {
     2987: 1365:            memcpy(buf, val, vlen);
        -: 1366:        }
        -: 1367:    }
        -: 1368:
     3028: 1369:    c->stats.offset += sizeof(header.response) + bodylen;
     3028: 1370:}
        -: 1371:
   460166: 1372:static void append_ascii_stats(const char *key, const uint16_t klen,
        -: 1373:                               const char *val, const uint32_t vlen,
        -: 1374:                               conn *c) {
   460166: 1375:    char *pos = c->stats.buffer + c->stats.offset;
   460166: 1376:    uint32_t nbytes = 0;
   460166: 1377:    int remaining = c->stats.size - c->stats.offset;
   460166: 1378:    int room = remaining - 1;
        -: 1379:
   460166: 1380:    if (klen == 0 && vlen == 0) {
     5364: 1381:        nbytes = snprintf(pos, room, "END\r\n");
   454802: 1382:    } else if (vlen == 0) {
    #####: 1383:        nbytes = snprintf(pos, room, "STAT %s\r\n", key);
        -: 1384:    } else {
   454802: 1385:        nbytes = snprintf(pos, room, "STAT %s %s\r\n", key, val);
        -: 1386:    }
        -: 1387:
   460166: 1388:    c->stats.offset += nbytes;
   460166: 1389:}
        -: 1390:
   463194: 1391:static bool grow_stats_buf(conn *c, size_t needed) {
   463194: 1392:    size_t nsize = c->stats.size;
   463194: 1393:    size_t available = nsize - c->stats.offset;
   463194: 1394:    bool rv = true;
        -: 1395:
        -: 1396:    /* Special case: No buffer -- need to allocate fresh */
   463194: 1397:    if (c->stats.buffer == NULL) {
     5405: 1398:        nsize = 1024;
     5405: 1399:        available = c->stats.size = c->stats.offset = 0;
        -: 1400:    }
        -: 1401:
   472397: 1402:    while (needed > available) {
    9203*: 1403:        assert(nsize > 0);
     9203: 1404:        nsize = nsize << 1;
     9203: 1405:        available = nsize - c->stats.offset;
        -: 1406:    }
        -: 1407:
   463194: 1408:    if (nsize != c->stats.size) {
     9203: 1409:        char *ptr = realloc(c->stats.buffer, nsize);
     9203: 1410:        if (ptr) {
     9203: 1411:            c->stats.buffer = ptr;
     9203: 1412:            c->stats.size = nsize;
        -: 1413:        } else {
    #####: 1414:            STATS_LOCK();
    #####: 1415:            stats.malloc_fails++;
    #####: 1416:            STATS_UNLOCK();
    #####: 1417:            rv = false;
        -: 1418:        }
        -: 1419:    }
        -: 1420:
   463194: 1421:    return rv;
        -: 1422:}
        -: 1423:
   463194: 1424:void append_stats(const char *key, const uint16_t klen,
        -: 1425:                  const char *val, const uint32_t vlen,
        -: 1426:                  const void *cookie)
        -: 1427:{
        -: 1428:    /* value without a key is invalid */
   463194: 1429:    if (klen == 0 && vlen > 0) {
        -: 1430:        return;
        -: 1431:    }
        -: 1432:
   463194: 1433:    conn *c = (conn*)cookie;
        -: 1434:
   463194: 1435:    if (c->protocol == binary_prot) {
     3028: 1436:        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);
     3028: 1437:        if (!grow_stats_buf(c, needed)) {
        -: 1438:            return;
        -: 1439:        }
     3028: 1440:        append_bin_stats(key, klen, val, vlen, c);
        -: 1441:    } else {
   460166: 1442:        size_t needed = vlen + klen + 10; // 10 == "STAT = \r\n"
   460166: 1443:        if (!grow_stats_buf(c, needed)) {
        -: 1444:            return;
        -: 1445:        }
   460166: 1446:        append_ascii_stats(key, klen, val, vlen, c);
        -: 1447:    }
        -: 1448:
  463194*: 1449:    assert(c->stats.offset <= c->stats.size);
        -: 1450:}
        -: 1451:
   947603: 1452:static void reset_cmd_handler(conn *c) {
   947603: 1453:    c->cmd = -1;
   947603: 1454:    c->substate = bin_no_state;
   947603: 1455:    if (c->item != NULL) {
        -: 1456:        // TODO: Any other way to get here?
        -: 1457:        // SASL auth was mistakenly using it. Nothing else should?
    #####: 1458:        if (c->item_malloced) {
    #####: 1459:            free(c->item);
    #####: 1460:            c->item_malloced = false;
        -: 1461:        } else {
    #####: 1462:            item_remove(c->item);
        -: 1463:        }
    #####: 1464:        c->item = NULL;
        -: 1465:    }
   947603: 1466:    if (c->rbytes > 0) {
   149948: 1467:        conn_set_state(c, conn_parse_cmd);
   797655: 1468:    } else if (c->resp_head) {
   340758: 1469:        conn_set_state(c, conn_mwrite);
        -: 1470:    } else {
   456897: 1471:        conn_set_state(c, conn_waiting);
        -: 1472:    }
   947603: 1473:}
        -: 1474:
   327308: 1475:static void complete_nread(conn *c) {
  327308*: 1476:    assert(c != NULL);
        -: 1477:#ifdef PROXY
        -: 1478:    assert(c->protocol == ascii_prot
        -: 1479:           || c->protocol == binary_prot
        -: 1480:           || c->protocol == proxy_prot);
        -: 1481:#else
  327308*: 1482:    assert(c->protocol == ascii_prot
        -: 1483:           || c->protocol == binary_prot);
        -: 1484:#endif
   327308: 1485:    if (c->protocol == ascii_prot) {
   302983: 1486:        complete_nread_ascii(c);
    24325: 1487:    } else if (c->protocol == binary_prot) {
    24325: 1488:        complete_nread_binary(c);
        -: 1489:#ifdef PROXY
        -: 1490:    } else if (c->protocol == proxy_prot) {
        -: 1491:        complete_nread_proxy(c);
        -: 1492:#endif
        -: 1493:    }
   327308: 1494:}
        -: 1495:
        -: 1496:/* Destination must always be chunked */
        -: 1497:/* This should be part of item.c */
    27032: 1498:static int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {
    27032: 1499:    item_chunk *dch = (item_chunk *) ITEM_schunk(d_it);
        -: 1500:    /* Advance dch until we find free space */
    77099: 1501:    while (dch->size == dch->used) {
    77099: 1502:        if (dch->next) {
        -: 1503:            dch = dch->next;
        -: 1504:        } else {
        -: 1505:            break;
        -: 1506:        }
        -: 1507:    }
        -: 1508:
    27032: 1509:    if (s_it->it_flags & ITEM_CHUNKED) {
    13516: 1510:        int remain = len;
    13516: 1511:        item_chunk *sch = (item_chunk *) ITEM_schunk(s_it);
    13516: 1512:        int copied = 0;
        -: 1513:        /* Fills dch's to capacity, not straight copy sch in case data is
        -: 1514:         * being added or removed (ie append/prepend)
        -: 1515:         */
   136671: 1516:        while (sch && dch && remain) {
  123155*: 1517:            assert(dch->used <= dch->size);
   123155: 1518:            int todo = (dch->size - dch->used < sch->used - copied)
        -: 1519:                ? dch->size - dch->used : sch->used - copied;
   123155: 1520:            if (remain < todo)
        -: 1521:                todo = remain;
   123155: 1522:            memcpy(dch->data + dch->used, sch->data + copied, todo);
   123155: 1523:            dch->used += todo;
   123155: 1524:            copied += todo;
   123155: 1525:            remain -= todo;
  123155*: 1526:            assert(dch->used <= dch->size);
   123155: 1527:            if (dch->size == dch->used) {
    73103: 1528:                item_chunk *tch = do_item_alloc_chunk(dch, remain);
    73103: 1529:                if (tch) {
        -: 1530:                    dch = tch;
        -: 1531:                } else {
        -: 1532:                    return -1;
        -: 1533:                }
        -: 1534:            }
  123155*: 1535:            assert(copied <= sch->used);
   123155: 1536:            if (copied == sch->used) {
    93361: 1537:                copied = 0;
    93361: 1538:                sch = sch->next;
        -: 1539:            }
        -: 1540:        }
        -: 1541:        /* assert that the destination had enough space for the source */
   13516*: 1542:        assert(remain == 0);
        -: 1543:    } else {
        -: 1544:        int done = 0;
        -: 1545:        /* Fill dch's via a non-chunked item. */
    40548: 1546:        while (len > done && dch) {
    27032: 1547:            int todo = (dch->size - dch->used < len - done)
        -: 1548:                ? dch->size - dch->used : len - done;
        -: 1549:            //assert(dch->size - dch->used != 0);
    27032: 1550:            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);
    27032: 1551:            done += todo;
    27032: 1552:            dch->used += todo;
   27032*: 1553:            assert(dch->used <= dch->size);
    27032: 1554:            if (dch->size == dch->used) {
    27032: 1555:                item_chunk *tch = do_item_alloc_chunk(dch, len - done);
    27032: 1556:                if (tch) {
        -: 1557:                    dch = tch;
        -: 1558:                } else {
        -: 1559:                    return -1;
        -: 1560:                }
        -: 1561:            }
        -: 1562:        }
   13516*: 1563:        assert(len == done);
        -: 1564:    }
        -: 1565:    return 0;
        -: 1566:}
        -: 1567:
    16019: 1568:static int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {
    16019: 1569:    if (comm == NREAD_APPEND || comm == NREAD_APPENDVIV) {
     8012: 1570:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1571:            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||
     6758: 1572:                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {
    #####: 1573:                return -1;
        -: 1574:            }
        -: 1575:        } else {
     1254: 1576:            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);
     1254: 1577:            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);
        -: 1578:        }
        -: 1579:    } else {
        -: 1580:        /* NREAD_PREPEND */
     8007: 1581:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1582:            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||
     6758: 1583:                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {
    #####: 1584:                return -1;
        -: 1585:            }
        -: 1586:        } else {
     1249: 1587:            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);
     1249: 1588:            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);
        -: 1589:        }
        -: 1590:    }
        -: 1591:    return 0;
        -: 1592:}
        -: 1593:
        -: 1594:/*
        -: 1595: * Stores an item in the cache according to the semantics of one of the set
        -: 1596: * commands. Protected by the item lock.
        -: 1597: *
        -: 1598: * Returns the state of storage.
        -: 1599: */
   327377: 1600:enum store_item_type do_store_item(item *it, int comm, LIBEVENT_THREAD *t, const uint32_t hv, int *nbytes, uint64_t *cas, bool cas_stale) {
   327377: 1601:    char *key = ITEM_key(it);
   327377: 1602:    item *old_it = do_item_get(key, it->nkey, hv, t, DONT_UPDATE);
   327377: 1603:    enum store_item_type stored = NOT_STORED;
        -: 1604:
   327377: 1605:    enum cas_result { CAS_NONE, CAS_MATCH, CAS_BADVAL, CAS_STALE, CAS_MISS };
        -: 1606:
   327377: 1607:    item *new_it = NULL;
   327377: 1608:    client_flags_t flags;
        -: 1609:
        -: 1610:    /* Do the CAS test up front so we can apply to all store modes */
   327377: 1611:    enum cas_result cas_res = CAS_NONE;
        -: 1612:
   327377: 1613:    bool do_store = false;
   327377: 1614:    if (old_it != NULL) {
        -: 1615:        // Most of the CAS work requires something to compare to.
    36517: 1616:        uint64_t it_cas = ITEM_get_cas(it);
    36517: 1617:        uint64_t old_cas = ITEM_get_cas(old_it);
    36517: 1618:        if (it_cas == 0) {
        -: 1619:            cas_res = CAS_NONE;
       21: 1620:        } else if (it_cas == old_cas) {
        -: 1621:            cas_res = CAS_MATCH;
        9: 1622:        } else if (cas_stale && it_cas < old_cas) {
        -: 1623:            cas_res = CAS_STALE;
        -: 1624:        } else {
        8: 1625:            cas_res = CAS_BADVAL;
        -: 1626:        }
        -: 1627:
    36517: 1628:        switch (comm) {
      649: 1629:            case NREAD_ADD:
        -: 1630:                /* add only adds a nonexistent item, but promote to head of LRU */
      649: 1631:                do_item_update(old_it);
      649: 1632:                break;
       22: 1633:            case NREAD_CAS:
       22: 1634:                if (cas_res == CAS_MATCH) {
        -: 1635:                    // cas validates
        -: 1636:                    // it and old_it may belong to different classes.
        -: 1637:                    // I'm updating the stats for the one that's getting pushed out
       11: 1638:                    pthread_mutex_lock(&t->stats.mutex);
       11: 1639:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
       11: 1640:                    pthread_mutex_unlock(&t->stats.mutex);
       11: 1641:                    do_store = true;
       11: 1642:                } else if (cas_res == CAS_STALE) {
        -: 1643:                    // if we're allowed to set a stale value, CAS must be lower than
        -: 1644:                    // the current item's CAS.
        -: 1645:                    // This replaces the value, but should preserve TTL, and stale
        -: 1646:                    // item marker bit + token sent if exists.
        1: 1647:                    it->exptime = old_it->exptime;
        1: 1648:                    it->it_flags |= ITEM_STALE;
        1: 1649:                    if (old_it->it_flags & ITEM_TOKEN_SENT) {
        1: 1650:                        it->it_flags |= ITEM_TOKEN_SENT;
        -: 1651:                    }
        -: 1652:
        1: 1653:                    pthread_mutex_lock(&t->stats.mutex);
        1: 1654:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
        1: 1655:                    pthread_mutex_unlock(&t->stats.mutex);
        1: 1656:                    do_store = true;
        -: 1657:                } else {
        -: 1658:                    // NONE or BADVAL are the same for CAS cmd
       10: 1659:                    pthread_mutex_lock(&t->stats.mutex);
       10: 1660:                    t->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;
       10: 1661:                    pthread_mutex_unlock(&t->stats.mutex);
        -: 1662:
       10: 1663:                    if (settings.verbose > 1) {
    #####: 1664:                        fprintf(stderr, "CAS:  failure: expected %llu, got %llu\n",
    #####: 1665:                                (unsigned long long)ITEM_get_cas(old_it),
    #####: 1666:                                (unsigned long long)ITEM_get_cas(it));
        -: 1667:                    }
        -: 1668:                    stored = EXISTS;
        -: 1669:                }
        -: 1670:                break;
    16021: 1671:            case NREAD_APPEND:
        -: 1672:            case NREAD_PREPEND:
        -: 1673:            case NREAD_APPENDVIV:
        -: 1674:            case NREAD_PREPENDVIV:
    16021: 1675:                if (cas_res != CAS_NONE && cas_res != CAS_MATCH) {
        -: 1676:                    stored = EXISTS;
        -: 1677:                    break;
        -: 1678:                }
        -: 1679:#ifdef EXTSTORE
    16021: 1680:                if ((old_it->it_flags & ITEM_HDR) != 0) {
        -: 1681:                    /* block append/prepend from working with extstore-d items.
        -: 1682:                     * leave response code to NOT_STORED default */
        -: 1683:                    break;
        -: 1684:                }
        -: 1685:#endif
        -: 1686:                /* we have it and old_it here - alloc memory to hold both */
    16019: 1687:                FLAGS_CONV(old_it, flags);
    16019: 1688:                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);
        -: 1689:
        -: 1690:                // OOM trying to copy.
    16019: 1691:                if (new_it == NULL)
        -: 1692:                    break;
        -: 1693:                /* copy data from it and old_it to new_it */
    16019: 1694:                if (_store_item_copy_data(comm, old_it, new_it, it) == -1) {
        -: 1695:                    // failed data copy
        -: 1696:                    break;
        -: 1697:                } else {
        -: 1698:                    // refcount of new_it is 1 here. will end up 2 after link.
        -: 1699:                    // it's original ref is managed outside of this function
    16019: 1700:                    it = new_it;
    16019: 1701:                    do_store = true;
        -: 1702:                    // Upstream final object size for meta
    16019: 1703:                    if (nbytes != NULL) {
    16008: 1704:                        *nbytes = it->nbytes;
        -: 1705:                    }
        -: 1706:                }
        -: 1707:                break;
    19825: 1708:            case NREAD_REPLACE:
        -: 1709:            case NREAD_SET:
    19825: 1710:                do_store = true;
    19825: 1711:                break;
        -: 1712:        }
        -: 1713:
   36517*: 1714:        if (do_store) {
    35856: 1715:            STORAGE_delete(t->storage, old_it);
    35856: 1716:            item_replace(old_it, it, hv);
    35856: 1717:            stored = STORED;
        -: 1718:        }
        -: 1719:
    36517: 1720:        do_item_remove(old_it);         /* release our reference */
    36517: 1721:        if (new_it != NULL) {
        -: 1722:            // append/prepend end up with an extra reference for new_it.
    16019: 1723:            do_item_remove(new_it);
        -: 1724:        }
        -: 1725:    } else {
        -: 1726:        /* No pre-existing item to replace or compare to. */
   290860: 1727:        if (ITEM_get_cas(it) != 0) {
        -: 1728:            /* Asked for a CAS match but nothing to compare it to. */
   290860: 1729:            cas_res = CAS_MISS;
        -: 1730:        }
        -: 1731:
   290860: 1732:        switch (comm) {
        -: 1733:            case NREAD_ADD:
        -: 1734:            case NREAD_SET:
        -: 1735:            case NREAD_APPENDVIV:
        -: 1736:            case NREAD_PREPENDVIV:
   290773: 1737:                do_store = true;
   290773: 1738:                break;
        3: 1739:            case NREAD_CAS:
        -: 1740:                // LRU expired
        3: 1741:                stored = NOT_FOUND;
        3: 1742:                pthread_mutex_lock(&t->stats.mutex);
        3: 1743:                t->stats.cas_misses++;
        3: 1744:                pthread_mutex_unlock(&t->stats.mutex);
        3: 1745:                break;
        -: 1746:            case NREAD_REPLACE:
        -: 1747:            case NREAD_APPEND:
        -: 1748:            case NREAD_PREPEND:
        -: 1749:                /* Requires an existing item. */
        -: 1750:                break;
        -: 1751:        }
        -: 1752:
        3: 1753:        if (do_store) {
   290773: 1754:            do_item_link(it, hv);
   290773: 1755:            stored = STORED;
        -: 1756:        }
        -: 1757:    }
        -: 1758:
   327377: 1759:    if (stored == STORED && cas != NULL) {
   326626: 1760:        *cas = ITEM_get_cas(it);
        -: 1761:    }
  327377*: 1762:    LOGGER_LOG(t->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,
        -: 1763:            stored, comm, ITEM_key(it), it->nkey, it->nbytes, it->exptime,
        -: 1764:            ITEM_clsid(it), t->cur_sfd);
        -: 1765:
   327377: 1766:    return stored;
        -: 1767:}
        -: 1768:
        -: 1769:/* set up a connection to write a buffer then free it, used for stats */
     5415: 1770:void write_and_free(conn *c, char *buf, int bytes) {
     5415: 1771:    if (buf) {
     5415: 1772:        mc_resp *resp = c->resp;
     5415: 1773:        resp->write_and_free = buf;
     5415: 1774:        resp_add_iov(resp, buf, bytes);
     5415: 1775:        conn_set_state(c, conn_new_cmd);
        -: 1776:    } else {
    #####: 1777:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -: 1778:    }
     5415: 1779:}
        -: 1780:
   376644: 1781:void append_stat(const char *name, ADD_STAT add_stats, conn *c,
        -: 1782:                 const char *fmt, ...) {
   376644: 1783:    char val_str[STAT_VAL_LEN];
   376644: 1784:    int vlen;
   376644: 1785:    va_list ap;
        -: 1786:
  376644*: 1787:    assert(name);
  376644*: 1788:    assert(add_stats);
  376644*: 1789:    assert(c);
  376644*: 1790:    assert(fmt);
        -: 1791:
   376644: 1792:    va_start(ap, fmt);
   376644: 1793:    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);
   376644: 1794:    va_end(ap);
        -: 1795:
   376644: 1796:    add_stats(name, strlen(name), val_str, vlen, c);
   376644: 1797:}
        -: 1798:
        -: 1799:/* return server specific stats only */
     3797: 1800:void server_stats(ADD_STAT add_stats, conn *c) {
     3797: 1801:    pid_t pid = getpid();
     3797: 1802:    rel_time_t now = current_time;
        -: 1803:
     3797: 1804:    struct thread_stats thread_stats;
     3797: 1805:    threadlocal_stats_aggregate(&thread_stats);
     3797: 1806:    struct slab_stats slab_stats;
     3797: 1807:    slab_stats_aggregate(&thread_stats, &slab_stats);
        -: 1808:#ifndef WIN32
     3797: 1809:    struct rusage usage;
     3797: 1810:    getrusage(RUSAGE_SELF, &usage);
        -: 1811:#endif /* !WIN32 */
        -: 1812:
     3797: 1813:    STATS_LOCK();
        -: 1814:
     3797: 1815:    APPEND_STAT("pid", "%lu", (long)pid);
     3797: 1816:    APPEND_STAT("uptime", "%u", now - ITEM_UPDATE_INTERVAL);
     3797: 1817:    APPEND_STAT("time", "%ld", now + (long)process_started);
     3797: 1818:    APPEND_STAT("version", "%s", VERSION);
     3797: 1819:    APPEND_STAT("libevent", "%s", event_get_version());
     3797: 1820:    APPEND_STAT("pointer_size", "%d", (int)(8 * sizeof(void *)));
        -: 1821:
        -: 1822:#ifndef WIN32
     3797: 1823:    append_stat("rusage_user", add_stats, c, "%ld.%06ld",
     3797: 1824:                (long)usage.ru_utime.tv_sec,
     3797: 1825:                (long)usage.ru_utime.tv_usec);
     3797: 1826:    append_stat("rusage_system", add_stats, c, "%ld.%06ld",
     3797: 1827:                (long)usage.ru_stime.tv_sec,
     3797: 1828:                (long)usage.ru_stime.tv_usec);
        -: 1829:#endif /* !WIN32 */
        -: 1830:
     3797: 1831:    APPEND_STAT("max_connections", "%d", settings.maxconns);
     3797: 1832:    APPEND_STAT("curr_connections", "%llu", (unsigned long long)stats_state.curr_conns - 1);
     3797: 1833:    APPEND_STAT("total_connections", "%llu", (unsigned long long)stats.total_conns);
     3797: 1834:    if (settings.maxconns_fast) {
     3786: 1835:        APPEND_STAT("rejected_connections", "%llu", (unsigned long long)stats.rejected_conns);
        -: 1836:    }
     3797: 1837:    APPEND_STAT("connection_structures", "%u", stats_state.conn_structs);
     3797: 1838:    APPEND_STAT("response_obj_oom", "%llu", (unsigned long long)thread_stats.response_obj_oom);
     3797: 1839:    APPEND_STAT("response_obj_count", "%llu", (unsigned long long)thread_stats.response_obj_count);
     3797: 1840:    APPEND_STAT("response_obj_bytes", "%llu", (unsigned long long)thread_stats.response_obj_bytes);
     3797: 1841:    APPEND_STAT("read_buf_count", "%llu", (unsigned long long)thread_stats.read_buf_count);
     3797: 1842:    APPEND_STAT("read_buf_bytes", "%llu", (unsigned long long)thread_stats.read_buf_bytes);
     3797: 1843:    APPEND_STAT("read_buf_bytes_free", "%llu", (unsigned long long)thread_stats.read_buf_bytes_free);
     3797: 1844:    APPEND_STAT("read_buf_oom", "%llu", (unsigned long long)thread_stats.read_buf_oom);
     3797: 1845:    APPEND_STAT("reserved_fds", "%u", stats_state.reserved_fds);
        -: 1846:#ifdef PROXY
        -: 1847:    if (settings.proxy_enabled) {
        -: 1848:        APPEND_STAT("proxy_conn_requests", "%llu", (unsigned long long)thread_stats.proxy_conn_requests);
        -: 1849:        APPEND_STAT("proxy_conn_errors", "%llu", (unsigned long long)thread_stats.proxy_conn_errors);
        -: 1850:        APPEND_STAT("proxy_conn_oom", "%llu", (unsigned long long)thread_stats.proxy_conn_oom);
        -: 1851:        APPEND_STAT("proxy_req_active", "%llu", (unsigned long long)thread_stats.proxy_req_active);
        -: 1852:        APPEND_STAT("proxy_await_active", "%llu", (unsigned long long)thread_stats.proxy_await_active);
        -: 1853:    }
        -: 1854:#endif
     3797: 1855:    APPEND_STAT("cmd_get", "%llu", (unsigned long long)thread_stats.get_cmds);
     3797: 1856:    APPEND_STAT("cmd_set", "%llu", (unsigned long long)slab_stats.set_cmds);
     3797: 1857:    APPEND_STAT("cmd_flush", "%llu", (unsigned long long)thread_stats.flush_cmds);
     3797: 1858:    APPEND_STAT("cmd_touch", "%llu", (unsigned long long)thread_stats.touch_cmds);
     3797: 1859:    APPEND_STAT("cmd_meta", "%llu", (unsigned long long)thread_stats.meta_cmds);
     3797: 1860:    APPEND_STAT("get_hits", "%llu", (unsigned long long)slab_stats.get_hits);
     3797: 1861:    APPEND_STAT("get_misses", "%llu", (unsigned long long)thread_stats.get_misses);
     3797: 1862:    APPEND_STAT("get_expired", "%llu", (unsigned long long)thread_stats.get_expired);
     3797: 1863:    APPEND_STAT("get_flushed", "%llu", (unsigned long long)thread_stats.get_flushed);
        -: 1864:#ifdef EXTSTORE
     3797: 1865:    if (c->thread->storage) {
     1049: 1866:        APPEND_STAT("get_extstore", "%llu", (unsigned long long)thread_stats.get_extstore);
     1049: 1867:        APPEND_STAT("get_aborted_extstore", "%llu", (unsigned long long)thread_stats.get_aborted_extstore);
     1049: 1868:        APPEND_STAT("get_oom_extstore", "%llu", (unsigned long long)thread_stats.get_oom_extstore);
     1049: 1869:        APPEND_STAT("recache_from_extstore", "%llu", (unsigned long long)thread_stats.recache_from_extstore);
     1049: 1870:        APPEND_STAT("miss_from_extstore", "%llu", (unsigned long long)thread_stats.miss_from_extstore);
     1049: 1871:        APPEND_STAT("badcrc_from_extstore", "%llu", (unsigned long long)thread_stats.badcrc_from_extstore);
        -: 1872:    }
        -: 1873:#endif
     3797: 1874:    APPEND_STAT("delete_misses", "%llu", (unsigned long long)thread_stats.delete_misses);
     3797: 1875:    APPEND_STAT("delete_hits", "%llu", (unsigned long long)slab_stats.delete_hits);
     3797: 1876:    APPEND_STAT("incr_misses", "%llu", (unsigned long long)thread_stats.incr_misses);
     3797: 1877:    APPEND_STAT("incr_hits", "%llu", (unsigned long long)slab_stats.incr_hits);
     3797: 1878:    APPEND_STAT("decr_misses", "%llu", (unsigned long long)thread_stats.decr_misses);
     3797: 1879:    APPEND_STAT("decr_hits", "%llu", (unsigned long long)slab_stats.decr_hits);
     3797: 1880:    APPEND_STAT("cas_misses", "%llu", (unsigned long long)thread_stats.cas_misses);
     3797: 1881:    APPEND_STAT("cas_hits", "%llu", (unsigned long long)slab_stats.cas_hits);
     3797: 1882:    APPEND_STAT("cas_badval", "%llu", (unsigned long long)slab_stats.cas_badval);
     3797: 1883:    APPEND_STAT("touch_hits", "%llu", (unsigned long long)slab_stats.touch_hits);
     3797: 1884:    APPEND_STAT("touch_misses", "%llu", (unsigned long long)thread_stats.touch_misses);
     3797: 1885:    APPEND_STAT("store_too_large", "%llu", (unsigned long long)thread_stats.store_too_large);
     3797: 1886:    APPEND_STAT("store_no_memory", "%llu", (unsigned long long)thread_stats.store_no_memory);
     3797: 1887:    APPEND_STAT("auth_cmds", "%llu", (unsigned long long)thread_stats.auth_cmds);
     3797: 1888:    APPEND_STAT("auth_errors", "%llu", (unsigned long long)thread_stats.auth_errors);
     3797: 1889:    if (settings.idle_timeout) {
        9: 1890:        APPEND_STAT("idle_kicks", "%llu", (unsigned long long)thread_stats.idle_kicks);
        -: 1891:    }
     3797: 1892:    APPEND_STAT("bytes_read", "%llu", (unsigned long long)thread_stats.bytes_read);
     3797: 1893:    APPEND_STAT("bytes_written", "%llu", (unsigned long long)thread_stats.bytes_written);
     3797: 1894:    APPEND_STAT("limit_maxbytes", "%llu", (unsigned long long)settings.maxbytes);
     3797: 1895:    APPEND_STAT("accepting_conns", "%u", stats_state.accepting_conns);
     3797: 1896:    APPEND_STAT("listen_disabled_num", "%llu", (unsigned long long)stats.listen_disabled_num);
     3797: 1897:    APPEND_STAT("time_in_listen_disabled_us", "%llu", stats.time_in_listen_disabled_us);
     3797: 1898:    APPEND_STAT("threads", "%d", settings.num_threads);
     3797: 1899:    APPEND_STAT("conn_yields", "%llu", (unsigned long long)thread_stats.conn_yields);
     3797: 1900:    APPEND_STAT("hash_power_level", "%u", stats_state.hash_power_level);
     3797: 1901:    APPEND_STAT("hash_bytes", "%llu", (unsigned long long)stats_state.hash_bytes);
     3797: 1902:    APPEND_STAT("hash_is_expanding", "%u", stats_state.hash_is_expanding);
     3797: 1903:    if (settings.slab_reassign) {
     3786: 1904:        APPEND_STAT("slab_reassign_rescues", "%llu", stats.slab_reassign_rescues);
     3786: 1905:        APPEND_STAT("slab_reassign_chunk_rescues", "%llu", stats.slab_reassign_chunk_rescues);
     3786: 1906:        APPEND_STAT("slab_reassign_evictions_nomem", "%llu", stats.slab_reassign_evictions_nomem);
     3786: 1907:        APPEND_STAT("slab_reassign_inline_reclaim", "%llu", stats.slab_reassign_inline_reclaim);
     3786: 1908:        APPEND_STAT("slab_reassign_busy_items", "%llu", stats.slab_reassign_busy_items);
     3786: 1909:        APPEND_STAT("slab_reassign_busy_deletes", "%llu", stats.slab_reassign_busy_deletes);
     3786: 1910:        APPEND_STAT("slab_reassign_running", "%u", stats_state.slab_reassign_running);
     3786: 1911:        APPEND_STAT("slabs_moved", "%llu", stats.slabs_moved);
        -: 1912:    }
     3797: 1913:    if (settings.lru_crawler) {
     3763: 1914:        APPEND_STAT("lru_crawler_running", "%u", stats_state.lru_crawler_running);
     3763: 1915:        APPEND_STAT("lru_crawler_starts", "%u", stats.lru_crawler_starts);
        -: 1916:    }
     3797: 1917:    if (settings.lru_maintainer_thread) {
     3770: 1918:        APPEND_STAT("lru_maintainer_juggles", "%llu", (unsigned long long)stats.lru_maintainer_juggles);
        -: 1919:    }
     3797: 1920:    APPEND_STAT("malloc_fails", "%llu",
     3797: 1921:                (unsigned long long)stats.malloc_fails);
     3797: 1922:    APPEND_STAT("log_worker_dropped", "%llu", (unsigned long long)stats.log_worker_dropped);
     3797: 1923:    APPEND_STAT("log_worker_written", "%llu", (unsigned long long)stats.log_worker_written);
     3797: 1924:    APPEND_STAT("log_watcher_skipped", "%llu", (unsigned long long)stats.log_watcher_skipped);
     3797: 1925:    APPEND_STAT("log_watcher_sent", "%llu", (unsigned long long)stats.log_watcher_sent);
     3797: 1926:    APPEND_STAT("log_watchers", "%llu", (unsigned long long)stats_state.log_watchers);
     3797: 1927:    STATS_UNLOCK();
        -: 1928:#ifdef EXTSTORE
     3797: 1929:    storage_stats(add_stats, c);
        -: 1930:#endif
        -: 1931:#ifdef PROXY
        -: 1932:    proxy_stats(settings.proxy_ctx, add_stats, c);
        -: 1933:#endif
        -: 1934:#ifdef TLS
        -: 1935:    if (settings.ssl_enabled) {
        -: 1936:        if (settings.ssl_session_cache) {
        -: 1937:            APPEND_STAT("ssl_new_sessions", "%llu", (unsigned long long)stats.ssl_new_sessions);
        -: 1938:        }
        -: 1939:        APPEND_STAT("ssl_handshake_errors", "%llu", (unsigned long long)stats.ssl_handshake_errors);
        -: 1940:        APPEND_STAT("time_since_server_cert_refresh", "%u", now - settings.ssl_last_cert_refresh_time);
        -: 1941:    }
        -: 1942:#endif
     3797: 1943:    APPEND_STAT("unexpected_napi_ids", "%llu", (unsigned long long)stats.unexpected_napi_ids);
     3797: 1944:    APPEND_STAT("round_robin_fallback", "%llu", (unsigned long long)stats.round_robin_fallback);
     3797: 1945:}
        -: 1946:
       21: 1947:void process_stat_settings(ADD_STAT add_stats, void *c) {
      21*: 1948:    assert(add_stats);
       21: 1949:    APPEND_STAT("maxbytes", "%llu", (unsigned long long)settings.maxbytes);
       21: 1950:    APPEND_STAT("maxconns", "%d", settings.maxconns);
       21: 1951:    APPEND_STAT("tcpport", "%d", settings.port);
       21: 1952:    APPEND_STAT("udpport", "%d", settings.udpport);
       21: 1953:    APPEND_STAT("inter", "%s", settings.inter ? settings.inter : "NULL");
       21: 1954:    APPEND_STAT("verbosity", "%d", settings.verbose);
       21: 1955:    APPEND_STAT("oldest", "%lu", (unsigned long)settings.oldest_live);
       21: 1956:    APPEND_STAT("evictions", "%s", settings.evict_to_free ? "on" : "off");
       42: 1957:    APPEND_STAT("domain_socket", "%s",
       21: 1958:                settings.socketpath ? settings.socketpath : "NULL");
       21: 1959:    APPEND_STAT("umask", "%o", settings.access);
       42: 1960:    APPEND_STAT("shutdown_command", "%s",
       21: 1961:                settings.shutdown_command ? "yes" : "no");
       21: 1962:    APPEND_STAT("growth_factor", "%.2f", settings.factor);
       21: 1963:    APPEND_STAT("chunk_size", "%d", settings.chunk_size);
       21: 1964:    APPEND_STAT("num_threads", "%d", settings.num_threads);
       21: 1965:    APPEND_STAT("num_threads_per_udp", "%d", settings.num_threads_per_udp);
       21: 1966:    APPEND_STAT("stat_key_prefix", "%c", settings.prefix_delimiter);
       41: 1967:    APPEND_STAT("detail_enabled", "%s",
       21: 1968:                settings.detail_enabled ? "yes" : "no");
       21: 1969:    APPEND_STAT("reqs_per_event", "%d", settings.reqs_per_event);
       22: 1970:    APPEND_STAT("cas_enabled", "%s", settings.use_cas ? "yes" : "no");
       21: 1971:    APPEND_STAT("tcp_backlog", "%d", settings.backlog);
       42: 1972:    APPEND_STAT("binding_protocol", "%s",
       21: 1973:                prot_text(settings.binding_protocol));
       42: 1974:    APPEND_STAT("auth_enabled_sasl", "%s", settings.sasl ? "yes" : "no");
       21: 1975:    APPEND_STAT("auth_enabled_ascii", "%s", settings.auth_file ? settings.auth_file : "no");
       21: 1976:    APPEND_STAT("item_size_max", "%d", settings.item_size_max);
       25: 1977:    APPEND_STAT("maxconns_fast", "%s", settings.maxconns_fast ? "yes" : "no");
       21: 1978:    APPEND_STAT("hashpower_init", "%d", settings.hashpower_init);
       25: 1979:    APPEND_STAT("slab_reassign", "%s", settings.slab_reassign ? "yes" : "no");
       21: 1980:    APPEND_STAT("slab_automove", "%d", settings.slab_automove);
       21: 1981:    APPEND_STAT("slab_automove_ratio", "%.2f", settings.slab_automove_ratio);
       21: 1982:    APPEND_STAT("slab_automove_window", "%u", settings.slab_automove_window);
       21: 1983:    APPEND_STAT("slab_chunk_max", "%d", settings.slab_chunk_size_max);
       25: 1984:    APPEND_STAT("lru_crawler", "%s", settings.lru_crawler ? "yes" : "no");
       21: 1985:    APPEND_STAT("lru_crawler_sleep", "%d", settings.lru_crawler_sleep);
       21: 1986:    APPEND_STAT("lru_crawler_tocrawl", "%lu", (unsigned long)settings.lru_crawler_tocrawl);
       21: 1987:    APPEND_STAT("tail_repair_time", "%d", settings.tail_repair_time);
       21: 1988:    APPEND_STAT("flush_enabled", "%s", settings.flush_enabled ? "yes" : "no");
       21: 1989:    APPEND_STAT("dump_enabled", "%s", settings.dump_enabled ? "yes" : "no");
       21: 1990:    APPEND_STAT("hash_algorithm", "%s", settings.hash_algorithm);
       26: 1991:    APPEND_STAT("lru_maintainer_thread", "%s", settings.lru_maintainer_thread ? "yes" : "no");
       26: 1992:    APPEND_STAT("lru_segmented", "%s", settings.lru_segmented ? "yes" : "no");
       21: 1993:    APPEND_STAT("hot_lru_pct", "%d", settings.hot_lru_pct);
       21: 1994:    APPEND_STAT("warm_lru_pct", "%d", settings.warm_lru_pct);
       21: 1995:    APPEND_STAT("hot_max_factor", "%.2f", settings.hot_max_factor);
       21: 1996:    APPEND_STAT("warm_max_factor", "%.2f", settings.warm_max_factor);
       41: 1997:    APPEND_STAT("temp_lru", "%s", settings.temp_lru ? "yes" : "no");
       21: 1998:    APPEND_STAT("temporary_ttl", "%u", settings.temporary_ttl);
       21: 1999:    APPEND_STAT("idle_timeout", "%d", settings.idle_timeout);
       21: 2000:    APPEND_STAT("watcher_logbuf_size", "%u", settings.logger_watcher_buf_size);
       21: 2001:    APPEND_STAT("worker_logbuf_size", "%u", settings.logger_buf_size);
       21: 2002:    APPEND_STAT("read_buf_mem_limit", "%u", settings.read_buf_mem_limit);
       42: 2003:    APPEND_STAT("track_sizes", "%s", item_stats_sizes_status() ? "yes" : "no");
       21: 2004:    APPEND_STAT("inline_ascii_response", "%s", "no"); // setting is dead, cannot be yes.
        -: 2005:#ifdef HAVE_DROP_PRIVILEGES
        -: 2006:    APPEND_STAT("drop_privileges", "%s", settings.drop_privileges ? "yes" : "no");
        -: 2007:#endif
        -: 2008:#ifdef EXTSTORE
       21: 2009:    APPEND_STAT("ext_item_size", "%u", settings.ext_item_size);
       21: 2010:    APPEND_STAT("ext_item_age", "%u", settings.ext_item_age);
       21: 2011:    APPEND_STAT("ext_low_ttl", "%u", settings.ext_low_ttl);
       21: 2012:    APPEND_STAT("ext_recache_rate", "%u", settings.ext_recache_rate);
       21: 2013:    APPEND_STAT("ext_wbuf_size", "%u", settings.ext_wbuf_size);
       21: 2014:    APPEND_STAT("ext_compact_under", "%u", settings.ext_compact_under);
       21: 2015:    APPEND_STAT("ext_drop_under", "%u", settings.ext_drop_under);
       21: 2016:    APPEND_STAT("ext_max_sleep", "%u", settings.ext_max_sleep);
       21: 2017:    APPEND_STAT("ext_max_frag", "%.2f", settings.ext_max_frag);
       21: 2018:    APPEND_STAT("slab_automove_freeratio", "%.3f", settings.slab_automove_freeratio);
       42: 2019:    APPEND_STAT("ext_drop_unread", "%s", settings.ext_drop_unread ? "yes" : "no");
        -: 2020:#endif
        -: 2021:#ifdef TLS
        -: 2022:    APPEND_STAT("ssl_enabled", "%s", settings.ssl_enabled ? "yes" : "no");
        -: 2023:    APPEND_STAT("ssl_chain_cert", "%s", settings.ssl_chain_cert);
        -: 2024:    APPEND_STAT("ssl_key", "%s", settings.ssl_key);
        -: 2025:    APPEND_STAT("ssl_verify_mode", "%d", settings.ssl_verify_mode);
        -: 2026:    APPEND_STAT("ssl_keyformat", "%d", settings.ssl_keyformat);
        -: 2027:    APPEND_STAT("ssl_ciphers", "%s", settings.ssl_ciphers ? settings.ssl_ciphers : "NULL");
        -: 2028:    APPEND_STAT("ssl_ca_cert", "%s", settings.ssl_ca_cert ? settings.ssl_ca_cert : "NULL");
        -: 2029:    APPEND_STAT("ssl_wbuf_size", "%u", settings.ssl_wbuf_size);
        -: 2030:    APPEND_STAT("ssl_session_cache", "%s", settings.ssl_session_cache ? "yes" : "no");
        -: 2031:    APPEND_STAT("ssl_kernel_tls", "%s", settings.ssl_kernel_tls ? "yes" : "no");
        -: 2032:    APPEND_STAT("ssl_min_version", "%s", ssl_proto_text(settings.ssl_min_version));
        -: 2033:#endif
        -: 2034:#ifdef PROXY
        -: 2035:    APPEND_STAT("proxy_enabled", "%s", settings.proxy_enabled ? "yes" : "no");
        -: 2036:    APPEND_STAT("proxy_uring_enabled", "%s", settings.proxy_uring ? "yes" : "no");
        -: 2037:#endif
       21: 2038:    APPEND_STAT("num_napi_ids", "%s", settings.num_napi_ids);
       21: 2039:    APPEND_STAT("memory_file", "%s", settings.memory_file);
       21: 2040:    APPEND_STAT("client_flags_size", "%d", sizeof(client_flags_t));
       21: 2041:}
        -: 2042:
     1609: 2043:static int nz_strcmp(int nzlength, const char *nz, const char *z) {
     1609: 2044:    int zlength=strlen(z);
     1609: 2045:    return (zlength == nzlength) && (strncmp(nz, z, zlength) == 0) ? 0 : -1;
        -: 2046:}
        -: 2047:
     5378: 2048:bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {
     5378: 2049:    bool ret = true;
        -: 2050:
     5378: 2051:    if (add_stats != NULL) {
     5378: 2052:        if (!stat_type) {
        -: 2053:            /* prepare general statistics for the engine */
     3797: 2054:            STATS_LOCK();
     3797: 2055:            APPEND_STAT("bytes", "%llu", (unsigned long long)stats_state.curr_bytes);
     3797: 2056:            APPEND_STAT("curr_items", "%llu", (unsigned long long)stats_state.curr_items);
     3797: 2057:            APPEND_STAT("total_items", "%llu", (unsigned long long)stats.total_items);
     3797: 2058:            STATS_UNLOCK();
     3797: 2059:            APPEND_STAT("slab_global_page_pool", "%u", global_page_pool_size(NULL));
     3797: 2060:            item_stats_totals(add_stats, c);
     1581: 2061:        } else if (nz_strcmp(nkey, stat_type, "items") == 0) {
     1553: 2062:            item_stats(add_stats, c);
       28: 2063:        } else if (nz_strcmp(nkey, stat_type, "slabs") == 0) {
       28: 2064:            slabs_stats(add_stats, c);
    #####: 2065:        } else if (nz_strcmp(nkey, stat_type, "sizes") == 0) {
    #####: 2066:            item_stats_sizes(add_stats, c);
    #####: 2067:        } else if (nz_strcmp(nkey, stat_type, "sizes_enable") == 0) {
    #####: 2068:            item_stats_sizes_enable(add_stats, c);
    #####: 2069:        } else if (nz_strcmp(nkey, stat_type, "sizes_disable") == 0) {
    #####: 2070:            item_stats_sizes_disable(add_stats, c);
        -: 2071:        } else {
        -: 2072:            ret = false;
        -: 2073:        }
        -: 2074:    } else {
        -: 2075:        ret = false;
        -: 2076:    }
        -: 2077:
     5378: 2078:    return ret;
        -: 2079:}
        -: 2080:
        -: 2081:static inline void get_conn_text(const conn *c, const int af,
        -: 2082:                char* addr, struct sockaddr *sock_addr) {
        -: 2083:    char addr_text[MAXPATHLEN];
        -: 2084:    addr_text[0] = '\0';
        -: 2085:    const char *protoname = "?";
        -: 2086:    unsigned short port = 0;
        -: 2087:
        -: 2088:    switch (af) {
        -: 2089:        case AF_INET:
        -: 2090:            (void) inet_ntop(af,
        -: 2091:                    &((struct sockaddr_in *)sock_addr)->sin_addr,
        -: 2092:                    addr_text,
        -: 2093:                    sizeof(addr_text) - 1);
        -: 2094:            port = ntohs(((struct sockaddr_in *)sock_addr)->sin_port);
        -: 2095:            protoname = IS_UDP(c->transport) ? "udp" : "tcp";
        -: 2096:            break;
        -: 2097:
        -: 2098:        case AF_INET6:
        -: 2099:            addr_text[0] = '[';
        -: 2100:            addr_text[1] = '\0';
        -: 2101:            if (inet_ntop(af,
        -: 2102:                    &((struct sockaddr_in6 *)sock_addr)->sin6_addr,
        -: 2103:                    addr_text + 1,
        -: 2104:                    sizeof(addr_text) - 2)) {
        -: 2105:                strncat(addr_text, "]", 2);
        -: 2106:            }
        -: 2107:            port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);
        -: 2108:            protoname = IS_UDP(c->transport) ? "udp6" : "tcp6";
        -: 2109:            break;
        -: 2110:
        -: 2111:#ifndef DISABLE_UNIX_SOCKET
        -: 2112:        case AF_UNIX:
        -: 2113:        {
        -: 2114:            size_t pathlen = 0;
        -: 2115:            // this strncpy call originally could piss off an address
        -: 2116:            // sanitizer; we supplied the size of the dest buf as a limiter,
        -: 2117:            // but optimized versions of strncpy could read past the end of
        -: 2118:            // *src while looking for a null terminator. Since buf and
        -: 2119:            // sun_path here are both on the stack they could even overlap,
        -: 2120:            // which is "undefined". In all OSS versions of strncpy I could
        -: 2121:            // find this has no effect; it'll still only copy until the first null
        -: 2122:            // terminator is found. Thus it's possible to get the OS to
        -: 2123:            // examine past the end of sun_path but it's unclear to me if this
        -: 2124:            // can cause any actual problem.
        -: 2125:            //
        -: 2126:            // We need a safe_strncpy util function but I'll punt on figuring
        -: 2127:            // that out for now.
        -: 2128:            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
        -: 2129:            if (MAXPATHLEN <= pathlen) {
        -: 2130:                pathlen = MAXPATHLEN - 1;
        -: 2131:            }
        -: 2132:            strncpy(addr_text,
        -: 2133:                    ((struct sockaddr_un *)sock_addr)->sun_path,
        -: 2134:                    pathlen);
        -: 2135:            addr_text[pathlen] = '\0';
        -: 2136:            protoname = "unix";
        -: 2137:        }
        -: 2138:            break;
        -: 2139:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 2140:    }
        -: 2141:
        -: 2142:    if (strlen(addr_text) < 2) {
        -: 2143:        /* Most likely this is a connected UNIX-domain client which
        -: 2144:         * has no peer socket address, but there's no portable way
        -: 2145:         * to tell for sure.
        -: 2146:         */
        -: 2147:        snprintf(addr_text, MAXPATHLEN, "<AF %d>", af);
        -: 2148:    }
        -: 2149:
        -: 2150:    if (port) {
        -: 2151:        snprintf(addr, MAXPATHLEN + 11, "%s:%s:%u", protoname, addr_text, port);
        -: 2152:    } else {
        -: 2153:        snprintf(addr, MAXPATHLEN + 11, "%s:%s", protoname, addr_text);
        -: 2154:    }
        -: 2155:}
        -: 2156:
       16: 2157:static void conn_to_str(const conn *c, char *addr, char *svr_addr) {
       16: 2158:    if (!c) {
    #####: 2159:        memcpy(addr, "<null>", 6);
       16: 2160:    } else if (c->state == conn_closed) {
    #####: 2161:        memcpy(addr, "<closed>", 8);
        -: 2162:    } else {
       16: 2163:        struct sockaddr_in6 local_addr;
       16: 2164:        struct sockaddr *sock_addr = (void *)&c->request_addr;
        -: 2165:
        -: 2166:        /* For listen ports and idle UDP ports, show listen address */
       16: 2167:        if (c->state == conn_listening ||
       12: 2168:                (IS_UDP(c->transport) &&
        -: 2169:                 c->state == conn_read)) {
        8: 2170:            memset(&local_addr, 0, sizeof(local_addr));
        8: 2171:            socklen_t local_addr_len = sizeof(local_addr);
        -: 2172:
        8: 2173:            if (getsockname(c->sfd,
        -: 2174:                        (struct sockaddr *)&local_addr,
        -: 2175:                        &local_addr_len) == 0) {
        8: 2176:                sock_addr = (struct sockaddr *)&local_addr;
        -: 2177:            }
        -: 2178:        }
       16: 2179:        get_conn_text(c, sock_addr->sa_family, addr, sock_addr);
        -: 2180:
       16: 2181:        if (c->state != conn_listening && !(IS_UDP(c->transport) &&
        -: 2182:                 c->state == conn_read)) {
        8: 2183:            struct sockaddr_storage svr_sock_addr;
        8: 2184:            memset(&svr_sock_addr, 0, sizeof(svr_sock_addr));
        8: 2185:            socklen_t svr_addr_len = sizeof(svr_sock_addr);
        8: 2186:            getsockname(c->sfd, (struct sockaddr *)&svr_sock_addr, &svr_addr_len);
        8: 2187:            get_conn_text(c, svr_sock_addr.ss_family, svr_addr, (struct sockaddr *)&svr_sock_addr);
        -: 2188:        }
        -: 2189:    }
       16: 2190:}
        -: 2191:
        4: 2192:void process_stats_conns(ADD_STAT add_stats, void *c) {
        4: 2193:    int i;
        4: 2194:    char key_str[STAT_KEY_LEN];
        4: 2195:    char val_str[STAT_VAL_LEN];
        4: 2196:    size_t extras_len = sizeof(":unix:") + sizeof("65535");
        4: 2197:    char addr[MAXPATHLEN + extras_len];
        4: 2198:    char svr_addr[MAXPATHLEN + extras_len];
        4: 2199:    memset(addr, 0, sizeof(addr));
        4: 2200:    memset(svr_addr, 0, sizeof(svr_addr));
        4: 2201:    int klen = 0, vlen = 0;
        -: 2202:
       4*: 2203:    assert(add_stats);
        -: 2204:
     4100: 2205:    for (i = 0; i < max_fds; i++) {
     4096: 2206:        if (conns[i]) {
        -: 2207:            /* This is safe to do unlocked because conns are never freed; the
        -: 2208:             * worst that'll happen will be a minor inconsistency in the
        -: 2209:             * output -- not worth the complexity of the locking that'd be
        -: 2210:             * required to prevent it.
        -: 2211:             */
       16: 2212:            if (IS_UDP(conns[i]->transport)) {
        4: 2213:                APPEND_NUM_STAT(i, "UDP", "%s", "UDP");
        -: 2214:            }
       16: 2215:            if (conns[i]->state != conn_closed) {
       16: 2216:                conn_to_str(conns[i], addr, svr_addr);
        -: 2217:
       16: 2218:                APPEND_NUM_STAT(i, "addr", "%s", addr);
       16: 2219:                if (conns[i]->state != conn_listening &&
       12: 2220:                    !(IS_UDP(conns[i]->transport) && conns[i]->state == conn_read)) {
        8: 2221:                    APPEND_NUM_STAT(i, "listen_addr", "%s", svr_addr);
        -: 2222:                }
       16: 2223:                APPEND_NUM_STAT(i, "state", "%s",
       16: 2224:                        state_text(conns[i]->state));
       16: 2225:                APPEND_NUM_STAT(i, "secs_since_last_cmd", "%d",
     4096: 2226:                        current_time - conns[i]->last_cmd_time);
        -: 2227:            }
        -: 2228:        }
        -: 2229:    }
        4: 2230:}
        -: 2231:
        -: 2232:#define IT_REFCOUNT_LIMIT 60000
   133465: 2233:item* limited_get(const char *key, size_t nkey, LIBEVENT_THREAD *t, uint32_t exptime, bool should_touch, bool do_update, bool *overflow) {
   133465: 2234:    item *it;
   133465: 2235:    if (should_touch) {
        8: 2236:        it = item_touch(key, nkey, exptime, t);
        -: 2237:    } else {
   133457: 2238:        it = item_get(key, nkey, t, do_update);
        -: 2239:    }
   133465: 2240:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2241:        item_remove(it);
    #####: 2242:        it = NULL;
    #####: 2243:        *overflow = true;
        -: 2244:    } else {
   133465: 2245:        *overflow = false;
        -: 2246:    }
   133465: 2247:    return it;
        -: 2248:}
        -: 2249:
        -: 2250:// Semantics are different than limited_get; since the item is returned
        -: 2251:// locked, caller can directly change what it needs.
        -: 2252:// though it might eventually be a better interface to sink it all into
        -: 2253:// items.c.
       14: 2254:item* limited_get_locked(const char *key, size_t nkey, LIBEVENT_THREAD *t, bool do_update, uint32_t *hv, bool *overflow) {
       14: 2255:    item *it;
       14: 2256:    it = item_get_locked(key, nkey, t, do_update, hv);
       14: 2257:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2258:        do_item_remove(it);
    #####: 2259:        it = NULL;
    #####: 2260:        item_unlock(*hv);
    #####: 2261:        *overflow = true;
        -: 2262:    } else {
       14: 2263:        *overflow = false;
        -: 2264:    }
       14: 2265:    return it;
        -: 2266:}
        -: 2267:
        -: 2268:/*
        -: 2269: * adds a delta value to a numeric item.
        -: 2270: *
        -: 2271: * c     connection requesting the operation
        -: 2272: * it    item to adjust
        -: 2273: * incr  true to increment value, false to decrement
        -: 2274: * delta amount to adjust value by
        -: 2275: * buf   buffer for response string
        -: 2276: *
        -: 2277: * returns a response string to send back to the client.
        -: 2278: */
      412: 2279:enum delta_result_type do_add_delta(LIBEVENT_THREAD *t, const char *key, const size_t nkey,
        -: 2280:                                    const bool incr, const int64_t delta,
        -: 2281:                                    char *buf, uint64_t *cas,
        -: 2282:                                    const uint32_t hv,
        -: 2283:                                    item **it_ret) {
      412: 2284:    char *ptr;
      412: 2285:    uint64_t value;
      412: 2286:    int res;
      412: 2287:    item *it;
        -: 2288:
      412: 2289:    it = do_item_get(key, nkey, hv, t, DONT_UPDATE);
      412: 2290:    if (!it) {
        -: 2291:        return DELTA_ITEM_NOT_FOUND;
        -: 2292:    }
        -: 2293:
        -: 2294:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2295:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2296:#ifdef EXTSTORE
      337: 2297:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2298:#else
        -: 2299:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2300:#endif
        1: 2301:        do_item_remove(it);
        1: 2302:        return NON_NUMERIC;
        -: 2303:    }
        -: 2304:
      336: 2305:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
        1: 2306:        do_item_remove(it);
        1: 2307:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2308:    }
        -: 2309:
      335: 2310:    ptr = ITEM_data(it);
        -: 2311:
      335: 2312:    if (!safe_strtoull(ptr, &value)) {
        4: 2313:        do_item_remove(it);
        4: 2314:        return NON_NUMERIC;
        -: 2315:    }
        -: 2316:
      331: 2317:    if (incr) {
      297: 2318:        value += delta;
        -: 2319:        //MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2320:    } else {
       34: 2321:        if(delta > value) {
        5: 2322:            value = 0;
        -: 2323:        } else {
       29: 2324:            value -= delta;
        -: 2325:        }
        -: 2326:        //MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2327:    }
        -: 2328:
      331: 2329:    pthread_mutex_lock(&t->stats.mutex);
      331: 2330:    if (incr) {
      297: 2331:        t->stats.slab_stats[ITEM_clsid(it)].incr_hits++;
        -: 2332:    } else {
       34: 2333:        t->stats.slab_stats[ITEM_clsid(it)].decr_hits++;
        -: 2334:    }
      331: 2335:    pthread_mutex_unlock(&t->stats.mutex);
        -: 2336:
      331: 2337:    itoa_u64(value, buf);
      331: 2338:    res = strlen(buf);
        -: 2339:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2340:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2341:     * increase. */
      331: 2342:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2343:        /* When changing the value without replacing the item, we
        -: 2344:           need to update the CAS on the existing item. */
        -: 2345:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2346:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2347:         * whether to remove an item or not. */
       77: 2348:        item_stats_sizes_remove(it);
       77: 2349:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
       77: 2350:        item_stats_sizes_add(it);
       77: 2351:        memcpy(ITEM_data(it), buf, res);
       77: 2352:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
       77: 2353:        do_item_update(it);
      254: 2354:    } else if (it->refcount > 1) {
      254: 2355:        item *new_it;
      254: 2356:        client_flags_t flags;
     254*: 2357:        FLAGS_CONV(it, flags);
      254: 2358:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
      254: 2359:        if (new_it == 0) {
    #####: 2360:            do_item_remove(it);
    #####: 2361:            return EOM;
        -: 2362:        }
      254: 2363:        memcpy(ITEM_data(new_it), buf, res);
      254: 2364:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
      254: 2365:        item_replace(it, new_it, hv);
        -: 2366:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2367:        // returning the CAS of the old item below.
      254: 2368:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
      254: 2369:        do_item_remove(new_it);       /* release our reference */
        -: 2370:    } else {
        -: 2371:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2372:         * item. TODO: Add a counter? */
    #####: 2373:        if (settings.verbose) {
    #####: 2374:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2375:        }
    #####: 2376:        if (it->refcount == 1)
    #####: 2377:            do_item_remove(it);
    #####: 2378:        return DELTA_ITEM_NOT_FOUND;
        -: 2379:    }
        -: 2380:
      331: 2381:    if (cas) {
       64: 2382:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2383:    }
      331: 2384:    if (it_ret != NULL) {
        8: 2385:        *it_ret = it;
        -: 2386:    } else {
      323: 2387:        do_item_remove(it);         /* release our reference */
        -: 2388:    }
        -: 2389:    return OK;
        -: 2390:}
        -: 2391:
      127: 2392:static int try_read_command_negotiate(conn *c) {
     127*: 2393:    assert(c != NULL);
     127*: 2394:    assert(c->protocol == negotiating_prot);
     127*: 2395:    assert(c->rcurr <= (c->rbuf + c->rsize));
     127*: 2396:    assert(c->rbytes > 0);
        -: 2397:
      127: 2398:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        9: 2399:        c->protocol = binary_prot;
        9: 2400:        c->try_read_command = try_read_command_binary;
        -: 2401:    } else {
        -: 2402:        // authentication doesn't work with negotiated protocol.
      118: 2403:        c->protocol = ascii_prot;
      118: 2404:        c->try_read_command = try_read_command_ascii;
        -: 2405:    }
        -: 2406:
      127: 2407:    if (settings.verbose > 1) {
    #####: 2408:        fprintf(stderr, "%d: Client using the %s protocol\n", c->sfd,
        -: 2409:                prot_text(c->protocol));
        -: 2410:    }
        -: 2411:
      127: 2412:    return c->try_read_command(c);
        -: 2413:}
        -: 2414:
       18: 2415:static int try_read_command_udp(conn *c) {
      18*: 2416:    assert(c != NULL);
      18*: 2417:    assert(c->rcurr <= (c->rbuf + c->rsize));
      18*: 2418:    assert(c->rbytes > 0);
        -: 2419:
       18: 2420:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        7: 2421:        c->protocol = binary_prot;
        7: 2422:        return try_read_command_binary(c);
        -: 2423:    } else {
       11: 2424:        c->protocol = ascii_prot;
       11: 2425:        return try_read_command_ascii(c);
        -: 2426:    }
        -: 2427:}
        -: 2428:
        -: 2429:/*
        -: 2430: * read a UDP request.
        -: 2431: */
       21: 2432:static enum try_read_result try_read_udp(conn *c) {
       21: 2433:    int res;
        -: 2434:
      21*: 2435:    assert(c != NULL);
        -: 2436:
       21: 2437:    c->request_addr_size = sizeof(c->request_addr);
       42: 2438:    res = recvfrom(c->sfd, c->rbuf, c->rsize,
       21: 2439:                   0, (struct sockaddr *)&c->request_addr,
        -: 2440:                   &c->request_addr_size);
       21: 2441:    if (res > 8) {
       18: 2442:        unsigned char *buf = (unsigned char *)c->rbuf;
       18: 2443:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 2444:        c->thread->stats.bytes_read += res;
       18: 2445:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2446:
        -: 2447:        /* Beginning of UDP packet is the request ID; save it. */
       18: 2448:        c->request_id = buf[0] * 256 + buf[1];
        -: 2449:
        -: 2450:        /* If this is a multi-packet request, drop it. */
       18: 2451:        if (buf[4] != 0 || buf[5] != 1) {
        -: 2452:            return READ_NO_DATA_RECEIVED;
        -: 2453:        }
        -: 2454:
        -: 2455:        /* Don't care about any of the rest of the header. */
       18: 2456:        res -= 8;
       18: 2457:        memmove(c->rbuf, c->rbuf + 8, res);
        -: 2458:
       18: 2459:        c->rbytes = res;
       18: 2460:        c->rcurr = c->rbuf;
       18: 2461:        return READ_DATA_RECEIVED;
        -: 2462:    }
        -: 2463:    return READ_NO_DATA_RECEIVED;
        -: 2464:}
        -: 2465:
        -: 2466:/*
        -: 2467: * read from network as much as we can, handle buffer overflow and connection
        -: 2468: * close.
        -: 2469: * before reading, move the remaining incomplete fragment of a command
        -: 2470: * (if any) to the beginning of the buffer.
        -: 2471: *
        -: 2472: * To protect us from someone flooding a connection with bogus data causing
        -: 2473: * the connection to eat up all available memory, break out and start looking
        -: 2474: * at the data I've got after a number of reallocs...
        -: 2475: *
        -: 2476: * @return enum try_read_result
        -: 2477: */
   460586: 2478:static enum try_read_result try_read_network(conn *c) {
   460586: 2479:    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;
   460586: 2480:    int res;
   460586: 2481:    int num_allocs = 0;
  460586*: 2482:    assert(c != NULL);
        -: 2483:
   460586: 2484:    if (c->rcurr != c->rbuf) {
     3705: 2485:        if (c->rbytes != 0) /* otherwise there's nothing to copy */
     3705: 2486:            memmove(c->rbuf, c->rcurr, c->rbytes);
     3705: 2487:        c->rcurr = c->rbuf;
        -: 2488:    }
        -: 2489:
   460589: 2490:    while (1) {
        -: 2491:        // TODO: move to rbuf_* func?
   460589: 2492:        if (c->rbytes >= c->rsize && c->rbuf_malloced) {
        3: 2493:            if (num_allocs == 4) {
    #####: 2494:                return gotdata;
        -: 2495:            }
        3: 2496:            ++num_allocs;
        3: 2497:            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);
        3: 2498:            if (!new_rbuf) {
    #####: 2499:                STATS_LOCK();
    #####: 2500:                stats.malloc_fails++;
    #####: 2501:                STATS_UNLOCK();
    #####: 2502:                if (settings.verbose > 0) {
    #####: 2503:                    fprintf(stderr, "Couldn't realloc input buffer\n");
        -: 2504:                }
    #####: 2505:                c->rbytes = 0; /* ignore what we read */
    #####: 2506:                out_of_memory(c, "SERVER_ERROR out of memory reading request");
    #####: 2507:                c->close_after_write = true;
    #####: 2508:                return READ_MEMORY_ERROR;
        -: 2509:            }
        3: 2510:            c->rcurr = c->rbuf = new_rbuf;
        3: 2511:            c->rsize *= 2;
        -: 2512:        }
        -: 2513:
   460589: 2514:        int avail = c->rsize - c->rbytes;
   460589: 2515:        res = c->read(c, c->rbuf + c->rbytes, avail);
   460589: 2516:        if (res > 0) {
   458495: 2517:            pthread_mutex_lock(&c->thread->stats.mutex);
   458495: 2518:            c->thread->stats.bytes_read += res;
   458495: 2519:            pthread_mutex_unlock(&c->thread->stats.mutex);
   458495: 2520:            gotdata = READ_DATA_RECEIVED;
   458495: 2521:            c->rbytes += res;
   458495: 2522:            if (res == avail && c->rbuf_malloced) {
        -: 2523:                // Resize rbuf and try a few times if huge ascii multiget.
        3: 2524:                continue;
        -: 2525:            } else {
        -: 2526:                break;
        -: 2527:            }
        -: 2528:        }
     2094: 2529:        if (res == 0) {
     2093: 2530:            c->close_reason = NORMAL_CLOSE;
     2093: 2531:            return READ_ERROR;
        -: 2532:        }
        1: 2533:        if (res == -1) {
        1: 2534:            if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 2535:                break;
        -: 2536:            }
        1: 2537:            return READ_ERROR;
        -: 2538:        }
        -: 2539:    }
        -: 2540:    return gotdata;
        -: 2541:}
        -: 2542:
   475001: 2543:static bool update_event(conn *c, const int new_flags) {
  475001*: 2544:    assert(c != NULL);
        -: 2545:
   475001: 2546:    struct event_base *base = c->event.ev_base;
   475001: 2547:    if (c->ev_flags == new_flags)
        -: 2548:        return true;
     1655: 2549:    if (event_del(&c->event) == -1) return false;
     1655: 2550:    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);
     1655: 2551:    event_base_set(base, &c->event);
     1655: 2552:    c->ev_flags = new_flags;
    1655*: 2553:    if (event_add(&c->event, 0) == -1) return false;
        -: 2554:    return true;
        -: 2555:}
        -: 2556:
        -: 2557:/*
        -: 2558: * Sets whether we are listening for new connections or not.
        -: 2559: */
    #####: 2560:void do_accept_new_conns(const bool do_accept) {
    #####: 2561:    conn *next;
        -: 2562:
    #####: 2563:    for (next = listen_conn; next; next = next->next) {
    #####: 2564:        if (do_accept) {
    #####: 2565:            update_event(next, EV_READ | EV_PERSIST);
    #####: 2566:            if (listen(next->sfd, settings.backlog) != 0) {
    #####: 2567:                perror("listen");
        -: 2568:            }
        -: 2569:        }
        -: 2570:        else {
    #####: 2571:            update_event(next, 0);
    #####: 2572:            if (listen(next->sfd, 0) != 0) {
    #####: 2573:                perror("listen");
        -: 2574:            }
        -: 2575:        }
        -: 2576:    }
        -: 2577:
    #####: 2578:    if (do_accept) {
    #####: 2579:        struct timeval maxconns_exited;
    #####: 2580:        uint64_t elapsed_us;
    #####: 2581:        gettimeofday(&maxconns_exited,NULL);
    #####: 2582:        STATS_LOCK();
    #####: 2583:        elapsed_us =
    #####: 2584:            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000
    #####: 2585:            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);
    #####: 2586:        stats.time_in_listen_disabled_us += elapsed_us;
    #####: 2587:        stats_state.accepting_conns = true;
    #####: 2588:        STATS_UNLOCK();
        -: 2589:    } else {
    #####: 2590:        STATS_LOCK();
    #####: 2591:        stats_state.accepting_conns = false;
    #####: 2592:        gettimeofday(&stats.maxconns_entered,NULL);
    #####: 2593:        stats.listen_disabled_num++;
    #####: 2594:        STATS_UNLOCK();
    #####: 2595:        allow_new_conns = false;
    #####: 2596:        maxconns_handler(-42, 0, 0);
        -: 2597:    }
    #####: 2598:}
        -: 2599:
        -: 2600:#define TRANSMIT_ONE_RESP true
        -: 2601:#define TRANSMIT_ALL_RESP false
   467077: 2602:static int _transmit_pre(conn *c, struct iovec *iovs, int iovused, bool one_resp) {
   467077: 2603:    mc_resp *resp = c->resp_head;
  1089144: 2604:    while (resp && iovused + resp->iovcnt < IOV_MAX-1) {
   622099: 2605:        if (resp->skip) {
        -: 2606:            // Don't actually unchain the resp obj here since it's singly-linked.
        -: 2607:            // Just let the post function handle it linearly.
   164211: 2608:            resp = resp->next;
   164211: 2609:            continue;
        -: 2610:        }
   457888: 2611:        if (resp->chunked_data_iov) {
        -: 2612:            // Handle chunked items specially.
        -: 2613:            // They spend much more time in send so we can be a bit wasteful
        -: 2614:            // in rebuilding iovecs for them.
    19318: 2615:            item_chunk *ch = (item_chunk *)ITEM_schunk((item *)resp->iov[resp->chunked_data_iov].iov_base);
    19318: 2616:            int x;
    77272: 2617:            for (x = 0; x < resp->iovcnt; x++) {
        -: 2618:                // This iov is tracking how far we've copied so far.
    57954: 2619:                if (x == resp->chunked_data_iov) {
    19318: 2620:                    int done = resp->chunked_total - resp->iov[x].iov_len;
        -: 2621:                    // Start from the len to allow binprot to cut the \r\n
    19318: 2622:                    int todo = resp->iov[x].iov_len;
   156451: 2623:                    while (ch && todo > 0 && iovused < IOV_MAX-1) {
   137133: 2624:                        int skip = 0;
   137133: 2625:                        if (!ch->used) {
    32834: 2626:                            ch = ch->next;
    32834: 2627:                            continue;
        -: 2628:                        }
        -: 2629:                        // Skip parts we've already sent.
   104299: 2630:                        if (done >= ch->used) {
     3818: 2631:                            done -= ch->used;
     3818: 2632:                            ch = ch->next;
     3818: 2633:                            continue;
   100481: 2634:                        } else if (done) {
      349: 2635:                            skip = done;
      349: 2636:                            done = 0;
        -: 2637:                        }
   100481: 2638:                        iovs[iovused].iov_base = ch->data + skip;
        -: 2639:                        // Stupid binary protocol makes this go negative.
   100481: 2640:                        iovs[iovused].iov_len = ch->used - skip > todo ? todo : ch->used - skip;
   100481: 2641:                        iovused++;
   100481: 2642:                        todo -= ch->used - skip;
   100481: 2643:                        ch = ch->next;
        -: 2644:                    }
        -: 2645:                } else {
    38636: 2646:                    iovs[iovused].iov_base = resp->iov[x].iov_base;
    38636: 2647:                    iovs[iovused].iov_len = resp->iov[x].iov_len;
    38636: 2648:                    iovused++;
        -: 2649:                }
    57954: 2650:                if (iovused >= IOV_MAX-1)
        -: 2651:                    break;
        -: 2652:            }
        -: 2653:        } else {
   438570: 2654:            memcpy(&iovs[iovused], resp->iov, sizeof(struct iovec)*resp->iovcnt);
   438570: 2655:            iovused += resp->iovcnt;
        -: 2656:        }
        -: 2657:
        -: 2658:        // done looking at first response, walk down the chain.
   457888: 2659:        resp = resp->next;
        -: 2660:        // used for UDP mode: UDP cannot send multiple responses per packet.
   457888: 2661:        if (one_resp)
        -: 2662:            break;
        -: 2663:    }
   467077: 2664:    return iovused;
        -: 2665:}
        -: 2666:
        -: 2667:/*
        -: 2668: * Decrements and completes responses based on how much data was transmitted.
        -: 2669: * Takes the connection and current result bytes.
        -: 2670: */
   466789: 2671:static void _transmit_post(conn *c, ssize_t res) {
        -: 2672:    // We've written some of the data. Remove the completed
        -: 2673:    // responses from the list of pending writes.
   466789: 2674:    mc_resp *resp = c->resp_head;
  1087237: 2675:    while (resp) {
   620789: 2676:        int x;
   620789: 2677:        if (resp->skip) {
   164211: 2678:            resp = resp_finish(c, resp);
   164211: 2679:            continue;
        -: 2680:        }
        -: 2681:
        -: 2682:        // fastpath check. all small responses should cut here.
   456578: 2683:        if (res >= resp->tosend) {
   456237: 2684:            res -= resp->tosend;
   456237: 2685:            resp = resp_finish(c, resp);
   456237: 2686:            continue;
        -: 2687:        }
        -: 2688:
        -: 2689:        // it's fine to re-check iov's that were zeroed out before.
      755: 2690:        for (x = 0; x < resp->iovcnt; x++) {
      755: 2691:            struct iovec *iov = &resp->iov[x];
      755: 2692:            if (res >= iov->iov_len) {
      414: 2693:                resp->tosend -= iov->iov_len;
      414: 2694:                res -= iov->iov_len;
      414: 2695:                iov->iov_len = 0;
        -: 2696:            } else {
        -: 2697:                // Dumb special case for chunked items. Currently tracking
        -: 2698:                // where to inject the chunked item via iov_base.
        -: 2699:                // Extra not-great since chunked items can't be the first
        -: 2700:                // index, so we have to check for non-zero c_d_iov first.
      341: 2701:                if (!resp->chunked_data_iov || x != resp->chunked_data_iov) {
      163: 2702:                    iov->iov_base = (char *)iov->iov_base + res;
        -: 2703:                }
      341: 2704:                iov->iov_len -= res;
      341: 2705:                resp->tosend -= res;
      341: 2706:                res = 0;
      341: 2707:                break;
        -: 2708:            }
        -: 2709:        }
        -: 2710:
        -: 2711:        // are we done with this response object?
      341: 2712:        if (resp->tosend == 0) {
    #####: 2713:            resp = resp_finish(c, resp);
        -: 2714:        } else {
        -: 2715:            // Jammed up here. This is the new head.
        -: 2716:            break;
        -: 2717:        }
        -: 2718:    }
   466789: 2719:}
        -: 2720:
        -: 2721:/*
        -: 2722: * Transmit the next chunk of data from our list of msgbuf structures.
        -: 2723: *
        -: 2724: * Returns:
        -: 2725: *   TRANSMIT_COMPLETE   All done writing.
        -: 2726: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2727: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2728: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2729: */
   467045: 2730:static enum transmit_result transmit(conn *c) {
  467045*: 2731:    assert(c != NULL);
   467045: 2732:    struct iovec iovs[IOV_MAX];
   467045: 2733:    struct msghdr msg;
   467045: 2734:    int iovused = 0;
        -: 2735:
        -: 2736:    // init the msg.
   467045: 2737:    memset(&msg, 0, sizeof(struct msghdr));
   467045: 2738:    msg.msg_iov = iovs;
        -: 2739:
   467045: 2740:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ALL_RESP);
   467045: 2741:    if (iovused == 0) {
        -: 2742:        // Avoid the syscall if we're only handling a noreply.
        -: 2743:        // Return the response object.
    51420: 2744:        _transmit_post(c, 0);
    51420: 2745:        return TRANSMIT_COMPLETE;
        -: 2746:    }
        -: 2747:
        -: 2748:    // Alright, send.
   415625: 2749:    ssize_t res;
   415625: 2750:    msg.msg_iovlen = iovused;
   415625: 2751:    res = c->sendmsg(c, &msg, 0);
   415625: 2752:    if (res >= 0) {
   415337: 2753:        pthread_mutex_lock(&c->thread->stats.mutex);
   415337: 2754:        c->thread->stats.bytes_written += res;
   415337: 2755:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2756:
        -: 2757:        // Decrement any partial IOV's and complete any finished resp's.
   415337: 2758:        _transmit_post(c, res);
        -: 2759:
   415337: 2760:        if (c->resp_head) {
        -: 2761:            return TRANSMIT_INCOMPLETE;
        -: 2762:        } else {
   415010: 2763:            return TRANSMIT_COMPLETE;
        -: 2764:        }
        -: 2765:    }
        -: 2766:
      288: 2767:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      286: 2768:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2769:            if (settings.verbose > 0)
    #####: 2770:                fprintf(stderr, "Couldn't update event\n");
    #####: 2771:            conn_set_state(c, conn_closing);
    #####: 2772:            return TRANSMIT_HARD_ERROR;
        -: 2773:        }
        -: 2774:        return TRANSMIT_SOFT_ERROR;
        -: 2775:    }
        -: 2776:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2777:       we have a real error, on which we close the connection */
        2: 2778:    if (settings.verbose > 0)
    #####: 2779:        perror("Failed to write, and not due to blocking");
        -: 2780:
        2: 2781:    conn_set_state(c, conn_closing);
        2: 2782:    return TRANSMIT_HARD_ERROR;
        -: 2783:}
        -: 2784:
       32: 2785:static void build_udp_header(unsigned char *hdr, mc_resp *resp) {
        -: 2786:    // We need to communicate the total number of packets
        -: 2787:    // If this isn't set, it's the first time this response is building a udp
        -: 2788:    // header, so "tosend" must be static.
       32: 2789:    if (!resp->udp_total) {
       18: 2790:        uint32_t total;
       18: 2791:        total = resp->tosend / UDP_DATA_SIZE;
       18: 2792:        if (resp->tosend % UDP_DATA_SIZE)
       18: 2793:            total++;
        -: 2794:        // The spec doesn't really say what we should do here. It's _probably_
        -: 2795:        // better to bail out?
       18: 2796:        if (total > USHRT_MAX) {
        -: 2797:            total = USHRT_MAX;
        -: 2798:        }
       18: 2799:        resp->udp_total = total;
        -: 2800:    }
        -: 2801:
        -: 2802:    // TODO: why wasn't this hto*'s and casts?
        -: 2803:    // this ends up sending UDP hdr data specifically in host byte order.
       32: 2804:    *hdr++ = resp->request_id / 256;
       32: 2805:    *hdr++ = resp->request_id % 256;
       32: 2806:    *hdr++ = resp->udp_sequence / 256;
       32: 2807:    *hdr++ = resp->udp_sequence % 256;
       32: 2808:    *hdr++ = resp->udp_total / 256;
       32: 2809:    *hdr++ = resp->udp_total % 256;
       32: 2810:    *hdr++ = 0;
       32: 2811:    *hdr++ = 0;
       32: 2812:    resp->udp_sequence++;
       32: 2813:}
        -: 2814:
        -: 2815:/*
        -: 2816: * UDP specific transmit function. Uses its own function rather than check
        -: 2817: * IS_UDP() five times. If we ever implement sendmmsg or similar support they
        -: 2818: * will diverge even more.
        -: 2819: * Does not use TLS.
        -: 2820: *
        -: 2821: * Returns:
        -: 2822: *   TRANSMIT_COMPLETE   All done writing.
        -: 2823: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2824: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2825: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2826: */
       32: 2827:static enum transmit_result transmit_udp(conn *c) {
      32*: 2828:    assert(c != NULL);
       32: 2829:    struct iovec iovs[IOV_MAX];
       32: 2830:    struct msghdr msg;
       32: 2831:    mc_resp *resp;
       32: 2832:    int iovused = 0;
       32: 2833:    unsigned char udp_hdr[UDP_HEADER_SIZE];
        -: 2834:
        -: 2835:    // We only send one UDP packet per call (ugh), so we can only operate on a
        -: 2836:    // single response at a time.
       32: 2837:    resp = c->resp_head;
        -: 2838:
       32: 2839:    if (!resp) {
        -: 2840:        return TRANSMIT_COMPLETE;
        -: 2841:    }
        -: 2842:
       32: 2843:    if (resp->skip) {
    #####: 2844:        resp = resp_finish(c, resp);
    #####: 2845:        return TRANSMIT_INCOMPLETE;
        -: 2846:    }
        -: 2847:
        -: 2848:    // clear the message and initialize it.
       32: 2849:    memset(&msg, 0, sizeof(struct msghdr));
       32: 2850:    msg.msg_iov = iovs;
        -: 2851:
        -: 2852:    // the UDP source to return to.
       32: 2853:    msg.msg_name = &resp->request_addr;
       32: 2854:    msg.msg_namelen = resp->request_addr_size;
        -: 2855:
        -: 2856:    // First IOV is the custom UDP header.
       32: 2857:    iovs[0].iov_base = (void *)udp_hdr;
       32: 2858:    iovs[0].iov_len = UDP_HEADER_SIZE;
       32: 2859:    build_udp_header(udp_hdr, resp);
       32: 2860:    iovused++;
        -: 2861:
        -: 2862:    // Fill the IOV's the standard way.
        -: 2863:    // TODO: might get a small speedup if we let it break early with a length
        -: 2864:    // limit.
       32: 2865:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ONE_RESP);
        -: 2866:
        -: 2867:    // Clip the IOV's to the max UDP packet size.
        -: 2868:    // If we add support for send_mmsg, this can be where we split msg's.
        -: 2869:    {
       32: 2870:        int x = 0;
       32: 2871:        int len = 0;
      143: 2872:        for (x = 0; x < iovused; x++) {
       93: 2873:            if (len + iovs[x].iov_len >= UDP_MAX_PAYLOAD_SIZE) {
       14: 2874:                iovs[x].iov_len = UDP_MAX_PAYLOAD_SIZE - len;
       14: 2875:                x++;
       14: 2876:                break;
        -: 2877:            } else {
       79: 2878:                len += iovs[x].iov_len;
        -: 2879:            }
        -: 2880:        }
       32: 2881:        iovused = x;
        -: 2882:    }
        -: 2883:
       32: 2884:    ssize_t res;
       32: 2885:    msg.msg_iovlen = iovused;
        -: 2886:    // NOTE: uses system sendmsg since we have no support for indirect UDP.
       32: 2887:    res = sendmsg(c->sfd, &msg, 0);
       32: 2888:    if (res >= 0) {
       32: 2889:        pthread_mutex_lock(&c->thread->stats.mutex);
       32: 2890:        c->thread->stats.bytes_written += res;
       32: 2891:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2892:
        -: 2893:        // Ignore the header size from forwarding the IOV's
       32: 2894:        res -= UDP_HEADER_SIZE;
        -: 2895:
        -: 2896:        // Decrement any partial IOV's and complete any finished resp's.
       32: 2897:        _transmit_post(c, res);
        -: 2898:
       32: 2899:        if (c->resp_head) {
        -: 2900:            return TRANSMIT_INCOMPLETE;
        -: 2901:        } else {
       18: 2902:            return TRANSMIT_COMPLETE;
        -: 2903:        }
        -: 2904:    }
        -: 2905:
    #####: 2906:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    #####: 2907:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2908:            if (settings.verbose > 0)
    #####: 2909:                fprintf(stderr, "Couldn't update event\n");
    #####: 2910:            conn_set_state(c, conn_closing);
    #####: 2911:            return TRANSMIT_HARD_ERROR;
        -: 2912:        }
        -: 2913:        return TRANSMIT_SOFT_ERROR;
        -: 2914:    }
        -: 2915:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2916:       we have a real error, on which we close the connection */
    #####: 2917:    if (settings.verbose > 0)
    #####: 2918:        perror("Failed to write, and not due to blocking");
        -: 2919:
    #####: 2920:    conn_set_state(c, conn_read);
    #####: 2921:    return TRANSMIT_HARD_ERROR;
        -: 2922:}
        -: 2923:
        -: 2924:
        -: 2925:/* Does a looped read to fill data chunks */
        -: 2926:/* TODO: restrict number of times this can loop.
        -: 2927: * Also, benchmark using readv's.
        -: 2928: */
     8262: 2929:static int read_into_chunked_item(conn *c) {
     8262: 2930:    int total = 0;
     8262: 2931:    int res;
    8262*: 2932:    assert(c->rcurr != c->ritem);
        -: 2933:
    97759: 2934:    while (c->rlbytes > 0) {
    93234: 2935:        item_chunk *ch = (item_chunk *)c->ritem;
    93234: 2936:        if (ch->size == ch->used) {
        -: 2937:            // FIXME: ch->next is currently always 0. remove this?
    41442: 2938:            if (ch->next) {
    #####: 2939:                c->ritem = (char *) ch->next;
        -: 2940:            } else {
        -: 2941:                /* Allocate next chunk. Binary protocol needs 2b for \r\n */
    41442: 2942:                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +
    41442: 2943:                       ((c->protocol == binary_prot) ? 2 : 0));
    41442: 2944:                if (!c->ritem) {
        -: 2945:                    // We failed an allocation. Let caller handle cleanup.
        -: 2946:                    total = -2;
        -: 2947:                    break;
        -: 2948:                }
        -: 2949:                // ritem has new chunk, restart the loop.
    41442: 2950:                continue;
        -: 2951:                //assert(c->rlbytes == 0);
        -: 2952:            }
        -: 2953:        }
        -: 2954:
    51792: 2955:        int unused = ch->size - ch->used;
        -: 2956:        /* first check if we have leftovers in the conn_read buffer */
    51792: 2957:        if (c->rbytes > 0) {
    17313: 2958:            total = 0;
    17313: 2959:            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
    17313: 2960:            tocopy = tocopy > unused ? unused : tocopy;
    17313: 2961:            if (c->ritem != c->rcurr) {
    17313: 2962:                memmove(ch->data + ch->used, c->rcurr, tocopy);
        -: 2963:            }
    17313: 2964:            total += tocopy;
    17313: 2965:            c->rlbytes -= tocopy;
    17313: 2966:            c->rcurr += tocopy;
    17313: 2967:            c->rbytes -= tocopy;
    17313: 2968:            ch->used += tocopy;
    17313: 2969:            if (c->rlbytes == 0) {
        -: 2970:                break;
        -: 2971:            }
        -: 2972:        } else {
        -: 2973:            /*  now try reading from the socket */
    68958: 2974:            res = c->read(c, ch->data + ch->used,
    34479: 2975:                    (unused > c->rlbytes ? c->rlbytes : unused));
    34479: 2976:            if (res > 0) {
    33661: 2977:                pthread_mutex_lock(&c->thread->stats.mutex);
    33661: 2978:                c->thread->stats.bytes_read += res;
    33661: 2979:                pthread_mutex_unlock(&c->thread->stats.mutex);
    33661: 2980:                ch->used += res;
    33661: 2981:                total += res;
    33661: 2982:                c->rlbytes -= res;
        -: 2983:            } else {
        -: 2984:                /* Reset total to the latest result so caller can handle it */
        -: 2985:                total = res;
        -: 2986:                break;
        -: 2987:            }
        -: 2988:        }
        -: 2989:    }
        -: 2990:
        -: 2991:    /* At some point I will be able to ditch the \r\n from item storage and
        -: 2992:       remove all of these kludges.
        -: 2993:       The above binprot check ensures inline space for \r\n, but if we do
        -: 2994:       exactly enough allocs there will be no additional chunk for \r\n.
        -: 2995:     */
     8262: 2996:    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {
      202: 2997:        item_chunk *ch = (item_chunk *)c->ritem;
      202: 2998:        if (ch->size - ch->used < 2) {
        2: 2999:            c->ritem = (char *) do_item_alloc_chunk(ch, 2);
        2: 3000:            if (!c->ritem) {
    #####: 3001:                total = -2;
        -: 3002:            }
        -: 3003:        }
        -: 3004:    }
     8262: 3005:    return total;
        -: 3006:}
        -: 3007:
   479733: 3008:static void drive_machine(conn *c) {
   479733: 3009:    bool stop = false;
   479733: 3010:    int sfd;
   479733: 3011:    socklen_t addrlen;
   479733: 3012:    struct sockaddr_storage addr;
   479733: 3013:    int nreqs = settings.reqs_per_event;
   479733: 3014:    int res;
   479733: 3015:    const char *str;
        -: 3016:#ifdef HAVE_ACCEPT4
   479733: 3017:    static int  use_accept4 = 1;
        -: 3018:#else
        -: 3019:    static int  use_accept4 = 0;
        -: 3020:#endif
        -: 3021:
  479733*: 3022:    assert(c != NULL);
        -: 3023:
  4116002: 3024:    while (!stop) {
        -: 3025:
  3636269: 3026:        switch(c->state) {
     2175: 3027:        case conn_listening:
     2175: 3028:            addrlen = sizeof(addr);
        -: 3029:#ifdef HAVE_ACCEPT4
     2175: 3030:            if (use_accept4) {
     2175: 3031:                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);
        -: 3032:            } else {
    #####: 3033:                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3034:            }
        -: 3035:#else
        -: 3036:            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3037:#endif
     2175: 3038:            if (sfd == -1) {
    #####: 3039:                if (use_accept4 && errno == ENOSYS) {
    #####: 3040:                    use_accept4 = 0;
    #####: 3041:                    continue;
        -: 3042:                }
    #####: 3043:                perror(use_accept4 ? "accept4()" : "accept()");
    #####: 3044:                if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 3045:                    /* these are transient, so don't log anything */
        -: 3046:                    stop = true;
    #####: 3047:                } else if (errno == EMFILE) {
    #####: 3048:                    if (settings.verbose > 0)
    #####: 3049:                        fprintf(stderr, "Too many open connections\n");
    #####: 3050:                    accept_new_conns(false);
    #####: 3051:                    stop = true;
        -: 3052:                } else {
    #####: 3053:                    perror("accept()");
    #####: 3054:                    stop = true;
        -: 3055:                }
        -: 3056:                break;
        -: 3057:            }
     2175: 3058:            if (!use_accept4) {
    #####: 3059:                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {
    #####: 3060:                    perror("setting O_NONBLOCK");
    #####: 3061:                    close(sfd);
    #####: 3062:                    break;
        -: 3063:                }
        -: 3064:            }
        -: 3065:
     2175: 3066:            bool reject;
     2175: 3067:            if (settings.maxconns_fast) {
     2166: 3068:                reject = sfd >= settings.maxconns - 1;
     2166: 3069:                if (reject) {
       43: 3070:                    STATS_LOCK();
       43: 3071:                    stats.rejected_conns++;
       43: 3072:                    STATS_UNLOCK();
        -: 3073:                }
        -: 3074:            } else {
        -: 3075:                reject = false;
        -: 3076:            }
        -: 3077:
     2166: 3078:            if (reject) {
       43: 3079:                str = "ERROR Too many open connections\r\n";
       43: 3080:                res = write(sfd, str, strlen(str));
       43: 3081:                close(sfd);
        -: 3082:            } else {
     2132: 3083:                void *ssl_v = NULL;
        -: 3084:#ifdef TLS
        -: 3085:                SSL *ssl = NULL;
        -: 3086:                if (c->ssl_enabled) {
        -: 3087:                    assert(IS_TCP(c->transport) && settings.ssl_enabled);
        -: 3088:
        -: 3089:                    if (settings.ssl_ctx == NULL) {
        -: 3090:                        if (settings.verbose) {
        -: 3091:                            fprintf(stderr, "SSL context is not initialized\n");
        -: 3092:                        }
        -: 3093:                        close(sfd);
        -: 3094:                        break;
        -: 3095:                    }
        -: 3096:                    SSL_LOCK();
        -: 3097:                    ssl = SSL_new(settings.ssl_ctx);
        -: 3098:                    SSL_UNLOCK();
        -: 3099:                    if (ssl == NULL) {
        -: 3100:                        if (settings.verbose) {
        -: 3101:                            fprintf(stderr, "Failed to created the SSL object\n");
        -: 3102:                        }
        -: 3103:                        close(sfd);
        -: 3104:                        break;
        -: 3105:                    }
        -: 3106:                    SSL_set_fd(ssl, sfd);
        -: 3107:                    int ret = SSL_accept(ssl);
        -: 3108:                    if (ret <= 0) {
        -: 3109:                        int err = SSL_get_error(ssl, ret);
        -: 3110:                        if (err == SSL_ERROR_SYSCALL || err == SSL_ERROR_SSL) {
        -: 3111:                            if (settings.verbose) {
        -: 3112:                                fprintf(stderr, "SSL connection failed with error code : %d : %s\n", err, strerror(errno));
        -: 3113:                            }
        -: 3114:                            SSL_free(ssl);
        -: 3115:                            close(sfd);
        -: 3116:                            STATS_LOCK();
        -: 3117:                            stats.ssl_handshake_errors++;
        -: 3118:                            STATS_UNLOCK();
        -: 3119:                            break;
        -: 3120:                        }
        -: 3121:                    }
        -: 3122:                }
        -: 3123:                ssl_v = (void*) ssl;
        -: 3124:#endif
        -: 3125:
     2132: 3126:                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,
        -: 3127:                                     READ_BUFFER_CACHED, c->transport, ssl_v, c->tag, c->protocol);
        -: 3128:            }
        -: 3129:
        -: 3130:            stop = true;
        -: 3131:            break;
        -: 3132:
   460610: 3133:        case conn_waiting:
   460610: 3134:            rbuf_release(c);
   460610: 3135:            if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3136:                if (settings.verbose > 0)
    #####: 3137:                    fprintf(stderr, "Couldn't update event\n");
    #####: 3138:                conn_set_state(c, conn_closing);
    #####: 3139:                break;
        -: 3140:            }
        -: 3141:
   460610: 3142:            conn_set_state(c, conn_read);
   460610: 3143:            stop = true;
   460610: 3144:            break;
        -: 3145:
   460607: 3146:        case conn_read:
   460607: 3147:            if (!IS_UDP(c->transport)) {
        -: 3148:                // Assign a read buffer if necessary.
   460586: 3149:                if (!rbuf_alloc(c)) {
        -: 3150:                    // TODO: Some way to allow for temporary failures.
    #####: 3151:                    conn_set_state(c, conn_closing);
    #####: 3152:                    break;
        -: 3153:                }
   460586: 3154:                res = try_read_network(c);
        -: 3155:            } else {
        -: 3156:                // UDP connections always have a static buffer.
       21: 3157:                res = try_read_udp(c);
        -: 3158:            }
        -: 3159:
   460607: 3160:            switch (res) {
        3: 3161:            case READ_NO_DATA_RECEIVED:
        3: 3162:                conn_set_state(c, conn_waiting);
        3: 3163:                break;
   458510: 3164:            case READ_DATA_RECEIVED:
   458510: 3165:                conn_set_state(c, conn_parse_cmd);
   458510: 3166:                break;
     2094: 3167:            case READ_ERROR:
     2094: 3168:                conn_set_state(c, conn_closing);
     2094: 3169:                break;
        -: 3170:            case READ_MEMORY_ERROR: /* Failed to allocate more memory */
        -: 3171:                /* State already set by try_read_network */
        -: 3172:                break;
        -: 3173:            }
        -: 3174:            break;
        -: 3175:
   608458: 3176:        case conn_parse_cmd:
   608458: 3177:            c->noreply = false;
   608458: 3178:            if (c->try_read_command(c) == 0) {
        -: 3179:                /* we need more data! */
     7385: 3180:                if (c->resp_head) {
        -: 3181:                    // Buffered responses waiting, flush in the meantime.
     3675: 3182:                    conn_set_state(c, conn_mwrite);
        -: 3183:                } else {
     3710: 3184:                    conn_set_state(c, conn_waiting);
        -: 3185:                }
        -: 3186:            }
        -: 3187:
        -: 3188:            break;
        -: 3189:
   957034: 3190:        case conn_new_cmd:
        -: 3191:            /* Only process nreqs at a time to avoid starving other
        -: 3192:               connections */
        -: 3193:
   957034: 3194:            --nreqs;
   957034: 3195:            if (nreqs >= 0) {
   947603: 3196:                reset_cmd_handler(c);
     9431: 3197:            } else if (c->resp_head) {
        -: 3198:                // flush response pipe on yield.
     4630: 3199:                conn_set_state(c, conn_mwrite);
        -: 3200:            } else {
     4801: 3201:                pthread_mutex_lock(&c->thread->stats.mutex);
     4801: 3202:                c->thread->stats.conn_yields++;
     4801: 3203:                pthread_mutex_unlock(&c->thread->stats.mutex);
     4801: 3204:                if (c->rbytes > 0) {
        -: 3205:                    /* We have already read in data into the input buffer,
        -: 3206:                       so libevent will most likely not signal read events
        -: 3207:                       on the socket (unless more data is available. As a
        -: 3208:                       hack we should just put in a request to write data,
        -: 3209:                       because that should be possible ;-)
        -: 3210:                    */
     4773: 3211:                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 3212:                        if (settings.verbose > 0)
    #####: 3213:                            fprintf(stderr, "Couldn't update event\n");
    #####: 3214:                        conn_set_state(c, conn_closing);
    #####: 3215:                        break;
        -: 3216:                    }
        -: 3217:                }
        -: 3218:                stop = true;
        -: 3219:            }
        -: 3220:            break;
        -: 3221:
   676724: 3222:        case conn_nread:
   676724: 3223:            if (c->rlbytes == 0) {
   327308: 3224:                complete_nread(c);
   327308: 3225:                break;
        -: 3226:            }
        -: 3227:
        -: 3228:            /* Check if rbytes < 0, to prevent crash */
   349416: 3229:            if (c->rlbytes < 0) {
    #####: 3230:                if (settings.verbose) {
    #####: 3231:                    fprintf(stderr, "Invalid rlbytes to read: len %d\n", c->rlbytes);
        -: 3232:                }
    #####: 3233:                conn_set_state(c, conn_closing);
    #####: 3234:                break;
        -: 3235:            }
        -: 3236:
   349416: 3237:            if (c->item_malloced || ((((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) ) {
        -: 3238:                /* first check if we have leftovers in the conn_read buffer */
   341154: 3239:                if (c->rbytes > 0) {
   319776: 3240:                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
   319776: 3241:                    memmove(c->ritem, c->rcurr, tocopy);
   319776: 3242:                    c->ritem += tocopy;
   319776: 3243:                    c->rlbytes -= tocopy;
   319776: 3244:                    c->rcurr += tocopy;
   319776: 3245:                    c->rbytes -= tocopy;
   319776: 3246:                    if (c->rlbytes == 0) {
        -: 3247:                        break;
        -: 3248:                    }
        -: 3249:                }
        -: 3250:
        -: 3251:                /*  now try reading from the socket */
    63323: 3252:                res = c->read(c, c->ritem, c->rlbytes);
    63323: 3253:                if (res > 0) {
    54821: 3254:                    pthread_mutex_lock(&c->thread->stats.mutex);
    54821: 3255:                    c->thread->stats.bytes_read += res;
    54821: 3256:                    pthread_mutex_unlock(&c->thread->stats.mutex);
    54821: 3257:                    if (c->rcurr == c->ritem) {
    #####: 3258:                        c->rcurr += res;
        -: 3259:                    }
    54821: 3260:                    c->ritem += res;
    54821: 3261:                    c->rlbytes -= res;
    54821: 3262:                    break;
        -: 3263:                }
        -: 3264:            } else {
     8262: 3265:                res = read_into_chunked_item(c);
     8262: 3266:                if (res > 0)
        -: 3267:                    break;
        -: 3268:            }
        -: 3269:
     9320: 3270:            if (res == 0) { /* end of stream */
        2: 3271:                c->close_reason = NORMAL_CLOSE;
        2: 3272:                conn_set_state(c, conn_closing);
        2: 3273:                break;
        -: 3274:            }
        -: 3275:
     9318: 3276:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
     9318: 3277:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3278:                    if (settings.verbose > 0)
    #####: 3279:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3280:                    conn_set_state(c, conn_closing);
    #####: 3281:                    break;
        -: 3282:                }
        -: 3283:                stop = true;
        -: 3284:                break;
        -: 3285:            }
        -: 3286:
        -: 3287:            /* Memory allocation failure */
    #####: 3288:            if (res == -2) {
    #####: 3289:                out_of_memory(c, "SERVER_ERROR Out of memory during read");
    #####: 3290:                c->sbytes = c->rlbytes;
    #####: 3291:                conn_set_state(c, conn_swallow);
        -: 3292:                // Ensure this flag gets cleared. It gets killed on conn_new()
        -: 3293:                // so any conn_closing is fine, calling complete_nread is
        -: 3294:                // fine. This swallow semms to be the only other case.
    #####: 3295:                c->set_stale = false;
    #####: 3296:                c->mset_res = false;
    #####: 3297:                break;
        -: 3298:            }
        -: 3299:            /* otherwise we have a real error, on which we close the connection */
    #####: 3300:            if (settings.verbose > 0) {
    #####: 3301:                fprintf(stderr, "Failed to read, and not due to blocking:\n"
        -: 3302:                        "errno: %d %s \n"
        -: 3303:                        "rcurr=%p ritem=%p rbuf=%p rlbytes=%d rsize=%d\n",
    #####: 3304:                        errno, strerror(errno),
    #####: 3305:                        (void *)c->rcurr, (void *)c->ritem, (void *)c->rbuf,
        -: 3306:                        (int)c->rlbytes, (int)c->rsize);
        -: 3307:            }
    #####: 3308:            conn_set_state(c, conn_closing);
    #####: 3309:            break;
        -: 3310:
      669: 3311:        case conn_swallow:
        -: 3312:            /* we are reading sbytes and throwing them away */
      669: 3313:            if (c->sbytes <= 0) {
       12: 3314:                conn_set_state(c, conn_new_cmd);
       12: 3315:                break;
        -: 3316:            }
        -: 3317:
        -: 3318:            /* first check if we have leftovers in the conn_read buffer */
      657: 3319:            if (c->rbytes > 0) {
       11: 3320:                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;
       11: 3321:                c->sbytes -= tocopy;
       11: 3322:                c->rcurr += tocopy;
       11: 3323:                c->rbytes -= tocopy;
       11: 3324:                break;
        -: 3325:            }
        -: 3326:
        -: 3327:            /*  now try reading from the socket */
      646: 3328:            res = c->read(c, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);
      646: 3329:            if (res > 0) {
      632: 3330:                pthread_mutex_lock(&c->thread->stats.mutex);
      632: 3331:                c->thread->stats.bytes_read += res;
      632: 3332:                pthread_mutex_unlock(&c->thread->stats.mutex);
      632: 3333:                c->sbytes -= res;
      632: 3334:                break;
        -: 3335:            }
       14: 3336:            if (res == 0) { /* end of stream */
    #####: 3337:                c->close_reason = NORMAL_CLOSE;
    #####: 3338:                conn_set_state(c, conn_closing);
    #####: 3339:                break;
        -: 3340:            }
       14: 3341:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
       14: 3342:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3343:                    if (settings.verbose > 0)
    #####: 3344:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3345:                    conn_set_state(c, conn_closing);
    #####: 3346:                    break;
        -: 3347:                }
        -: 3348:                stop = true;
        -: 3349:                break;
        -: 3350:            }
        -: 3351:            /* otherwise we have a real error, on which we close the connection */
    #####: 3352:            if (settings.verbose > 0)
    #####: 3353:                fprintf(stderr, "Failed to read, and not due to blocking\n");
    #####: 3354:            conn_set_state(c, conn_closing);
    #####: 3355:            break;
        -: 3356:
   467463: 3357:        case conn_write:
        -: 3358:        case conn_mwrite:
        -: 3359:            /* have side IO's that must process before transmit() can run.
        -: 3360:             * remove the connection from the worker thread and dispatch the
        -: 3361:             * IO queue
        -: 3362:             */
  467463*: 3363:            assert(c->io_queues_submitted == 0);
        -: 3364:
   501398: 3365:            for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
    33935: 3366:                if (q->stack_ctx != NULL) {
      386: 3367:                    io_queue_cb_t *qcb = thread_io_queue_get(c->thread, q->type);
      386: 3368:                    qcb->submit_cb(q);
      386: 3369:                    c->io_queues_submitted++;
        -: 3370:                }
        -: 3371:            }
   467463: 3372:            if (c->io_queues_submitted != 0) {
      386: 3373:                conn_set_state(c, conn_io_queue);
        -: 3374:
      386: 3375:                stop = true;
      386: 3376:                break;
        -: 3377:            }
        -: 3378:
   467077: 3379:            switch (!IS_UDP(c->transport) ? transmit(c) : transmit_udp(c)) {
   466448: 3380:            case TRANSMIT_COMPLETE:
   466448: 3381:                if (c->state == conn_mwrite) {
        -: 3382:                    // Free up IO wraps and any half-uploaded items.
   466448: 3383:                    conn_release_items(c);
   466448: 3384:                    conn_set_state(c, conn_new_cmd);
   466448: 3385:                    if (c->close_after_write) {
        8: 3386:                        conn_set_state(c, conn_closing);
        -: 3387:                    }
        -: 3388:                } else {
    #####: 3389:                    if (settings.verbose > 0)
    #####: 3390:                        fprintf(stderr, "Unexpected state %d\n", c->state);
    #####: 3391:                    conn_set_state(c, conn_closing);
        -: 3392:                }
        -: 3393:                break;
        -: 3394:
        -: 3395:            case TRANSMIT_INCOMPLETE:
        -: 3396:            case TRANSMIT_HARD_ERROR:
        -: 3397:                break;                   /* Continue in state machine. */
        -: 3398:
      286: 3399:            case TRANSMIT_SOFT_ERROR:
      286: 3400:                stop = true;
      286: 3401:                break;
        -: 3402:            }
        -: 3403:            break;
        -: 3404:
     2130: 3405:        case conn_closing:
     2130: 3406:            if (IS_UDP(c->transport))
    #####: 3407:                conn_cleanup(c);
        -: 3408:            else
     2130: 3409:                conn_close(c);
        -: 3410:            stop = true;
        -: 3411:            break;
        -: 3412:
    #####: 3413:        case conn_closed:
        -: 3414:            /* This only happens if dormando is an idiot. */
    #####: 3415:            abort();
        -: 3416:            break;
        -: 3417:
        -: 3418:        case conn_watch:
        -: 3419:            /* We handed off our connection to the logger thread. */
  4116002: 3420:            stop = true;
        -: 3421:            break;
    #####: 3422:        case conn_io_queue:
        -: 3423:            /* Woke up while waiting for an async return, but not ready. */
    #####: 3424:            event_del(&c->event);
    #####: 3425:            conn_set_state(c, conn_io_pending);
    #####: 3426:            stop = true;
    #####: 3427:            break;
        -: 3428:        case conn_io_pending:
        -: 3429:            /* Should not be reachable */
    #####: 3430:            assert(false);
        -: 3431:            break;
      386: 3432:        case conn_io_resume:
        -: 3433:            /* Complete our queued IO's from within the worker thread. */
      386: 3434:            conn_set_state(c, conn_mwrite);
      386: 3435:            break;
        -: 3436:        case conn_max_state:
    #####: 3437:            assert(false);
        -: 3438:            break;
        -: 3439:        }
   285275: 3440:    }
        -: 3441:
   479733: 3442:    return;
        -: 3443:}
        -: 3444:
   479335: 3445:void event_handler(const evutil_socket_t fd, const short which, void *arg) {
   479335: 3446:    conn *c;
        -: 3447:
   479335: 3448:    c = (conn *)arg;
  479335*: 3449:    assert(c != NULL);
        -: 3450:
   479335: 3451:    c->which = which;
        -: 3452:
        -: 3453:    /* sanity */
   479335: 3454:    if (fd != c->sfd) {
    #####: 3455:        if (settings.verbose > 0)
    #####: 3456:            fprintf(stderr, "Catastrophic: event fd doesn't match conn fd!\n");
    #####: 3457:        conn_close(c);
    #####: 3458:        return;
        -: 3459:    }
        -: 3460:
   479335: 3461:    drive_machine(c);
        -: 3462:
        -: 3463:    /* wait for next event */
   479335: 3464:    return;
        -: 3465:}
        -: 3466:
       50: 3467:static int new_socket(struct addrinfo *ai) {
       50: 3468:    int sfd;
       50: 3469:    int flags;
        -: 3470:
       50: 3471:    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
        -: 3472:        return -1;
        -: 3473:    }
        -: 3474:
      100: 3475:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       50: 3476:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3477:        perror("setting O_NONBLOCK");
    #####: 3478:        close(sfd);
    #####: 3479:        return -1;
        -: 3480:    }
        -: 3481:    return sfd;
        -: 3482:}
        -: 3483:
        -: 3484:
        -: 3485:/*
        -: 3486: * Sets a socket's send buffer size to the maximum allowed by the system.
        -: 3487: */
       18: 3488:static void maximize_sndbuf(const int sfd) {
       18: 3489:    socklen_t intsize = sizeof(int);
       18: 3490:    int last_good = 0;
       18: 3491:    int min, max, avg;
       18: 3492:    int old_size;
        -: 3493:
        -: 3494:    /* Start with the default size. */
        -: 3495:#ifdef _WIN32
        -: 3496:    if (getsockopt((SOCKET)sfd, SOL_SOCKET, SO_SNDBUF, (char *)&old_size, &intsize) != 0) {
        -: 3497:#else
       18: 3498:    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {
        -: 3499:#endif /* #ifdef _WIN32 */
    #####: 3500:        if (settings.verbose > 0)
    #####: 3501:            perror("getsockopt(SO_SNDBUF)");
    #####: 3502:        return;
        -: 3503:    }
        -: 3504:
        -: 3505:    /* Binary-search for the real maximum. */
       18: 3506:    min = old_size;
       18: 3507:    max = MAX_SENDBUF_SIZE;
        -: 3508:
      522: 3509:    while (min <= max) {
      504: 3510:        avg = ((unsigned int)(min + max)) / 2;
      504: 3511:        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {
      504: 3512:            last_good = avg;
      504: 3513:            min = avg + 1;
        -: 3514:        } else {
    #####: 3515:            max = avg - 1;
        -: 3516:        }
        -: 3517:    }
        -: 3518:
       18: 3519:    if (settings.verbose > 1)
      18*: 3520:        fprintf(stderr, "<%d send buffer was %d, now %d\n", sfd, old_size, last_good);
        -: 3521:}
        -: 3522:
        -: 3523:/**
        -: 3524: * Create a socket and bind it to a specific port number
        -: 3525: * @param interface the interface to bind to
        -: 3526: * @param port the port number to bind to
        -: 3527: * @param transport the transport protocol (TCP / UDP)
        -: 3528: * @param portnumber_file A filepointer to write the port numbers to
        -: 3529: *        when they are successfully added to the list of ports we
        -: 3530: *        listen on.
        -: 3531: */
       32: 3532:static int server_socket(const char *interface,
        -: 3533:                         int port,
        -: 3534:                         enum network_transport transport,
        -: 3535:                         FILE *portnumber_file, bool ssl_enabled,
        -: 3536:                         uint64_t conntag,
        -: 3537:                         enum protocol bproto) {
       32: 3538:    int sfd;
       32: 3539:    struct linger ling = {0, 0};
       32: 3540:    struct addrinfo *ai;
       32: 3541:    struct addrinfo *next;
       32: 3542:    struct addrinfo hints = { .ai_flags = AI_PASSIVE,
        -: 3543:                              .ai_family = AF_UNSPEC };
       32: 3544:    char port_buf[NI_MAXSERV];
       32: 3545:    int error;
       32: 3546:    int success = 0;
       32: 3547:    int flags =1;
        -: 3548:
       32: 3549:    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;
        -: 3550:
       32: 3551:    if (port == -1) {
        9: 3552:        port = 0;
        -: 3553:    }
       32: 3554:    snprintf(port_buf, sizeof(port_buf), "%d", port);
       32: 3555:    error= getaddrinfo(interface, port_buf, &hints, &ai);
       32: 3556:    if (error != 0) {
        1: 3557:        if (error != EAI_SYSTEM)
        1: 3558:          fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(error));
        -: 3559:        else
    #####: 3560:          perror("getaddrinfo()");
        1: 3561:        return 1;
        -: 3562:    }
        -: 3563:
       81: 3564:    for (next= ai; next; next= next->ai_next) {
       50: 3565:        conn *listen_conn_add;
       50: 3566:        if ((sfd = new_socket(next)) == -1) {
        -: 3567:            /* getaddrinfo can return "junk" addresses,
        -: 3568:             * we make sure at least one works before erroring.
        -: 3569:             */
    #####: 3570:            if (errno == EMFILE) {
        -: 3571:                /* ...unless we're out of fds */
    #####: 3572:                perror("server_socket");
    #####: 3573:                exit(EX_OSERR);
        -: 3574:            }
    #####: 3575:            continue;
        -: 3576:        }
        -: 3577:
       50: 3578:        if (settings.num_napi_ids) {
    #####: 3579:            socklen_t len = sizeof(socklen_t);
    #####: 3580:            int napi_id;
    #####: 3581:            error = getsockopt(sfd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &napi_id, &len);
    #####: 3582:            if (error != 0) {
    #####: 3583:                fprintf(stderr, "-N <num_napi_ids> option not supported\n");
    #####: 3584:                exit(EXIT_FAILURE);
        -: 3585:            }
        -: 3586:        }
        -: 3587:
        -: 3588:#ifdef IPV6_V6ONLY
       50: 3589:        if (next->ai_family == AF_INET6) {
       19: 3590:            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));
       19: 3591:            if (error != 0) {
    #####: 3592:                perror("setsockopt");
    #####: 3593:                close(sfd);
    #####: 3594:                continue;
        -: 3595:            }
        -: 3596:        }
        -: 3597:#endif
        -: 3598:#ifdef SOCK_COOKIE_ID
       50: 3599:        if (settings.sock_cookie_id != 0) {
    #####: 3600:            error = setsockopt(sfd, SOL_SOCKET, SOCK_COOKIE_ID, (void *)&settings.sock_cookie_id, sizeof(uint32_t));
    #####: 3601:            if (error != 0)
    #####: 3602:                perror("setsockopt");
        -: 3603:        }
        -: 3604:#endif
        -: 3605:
       50: 3606:        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       50: 3607:        if (IS_UDP(transport)) {
       18: 3608:            maximize_sndbuf(sfd);
        -: 3609:        } else {
       32: 3610:            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       32: 3611:            if (error != 0)
    #####: 3612:                perror("setsockopt");
        -: 3613:
       32: 3614:            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
       32: 3615:            if (error != 0)
    #####: 3616:                perror("setsockopt");
        -: 3617:
       32: 3618:            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));
       32: 3619:            if (error != 0)
    #####: 3620:                perror("setsockopt");
        -: 3621:        }
        -: 3622:
       50: 3623:        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {
    #####: 3624:            if (errno != EADDRINUSE) {
    #####: 3625:                perror("bind()");
    #####: 3626:                close(sfd);
    #####: 3627:                freeaddrinfo(ai);
    #####: 3628:                return 1;
        -: 3629:            }
    #####: 3630:            close(sfd);
    #####: 3631:            continue;
        -: 3632:        } else {
       50: 3633:            success++;
       50: 3634:            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {
    #####: 3635:                perror("listen()");
    #####: 3636:                close(sfd);
    #####: 3637:                freeaddrinfo(ai);
    #####: 3638:                return 1;
        -: 3639:            }
       50: 3640:            if (portnumber_file != NULL &&
       38: 3641:                (next->ai_addr->sa_family == AF_INET ||
        -: 3642:                 next->ai_addr->sa_family == AF_INET6)) {
       38: 3643:                union {
        -: 3644:                    struct sockaddr_in in;
        -: 3645:                    struct sockaddr_in6 in6;
        -: 3646:                } my_sockaddr;
       38: 3647:                socklen_t len = sizeof(my_sockaddr);
       38: 3648:                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {
       38: 3649:                    if (next->ai_addr->sa_family == AF_INET) {
       57: 3650:                        fprintf(portnumber_file, "%s INET: %u\n",
        -: 3651:                                IS_UDP(transport) ? "UDP" : "TCP",
       19: 3652:                                ntohs(my_sockaddr.in.sin_port));
        -: 3653:                    } else {
       38: 3654:                        fprintf(portnumber_file, "%s INET6: %u\n",
        -: 3655:                                IS_UDP(transport) ? "UDP" : "TCP",
       19: 3656:                                ntohs(my_sockaddr.in6.sin6_port));
        -: 3657:                    }
        -: 3658:                }
        -: 3659:            }
        -: 3660:        }
        -: 3661:
       50: 3662:        if (IS_UDP(transport)) {
        -: 3663:            int c;
        -: 3664:
       90: 3665:            for (c = 0; c < settings.num_threads_per_udp; c++) {
        -: 3666:                /* Allocate one UDP file descriptor per worker thread;
        -: 3667:                 * this allows "stats conns" to separately list multiple
        -: 3668:                 * parallel UDP requests in progress.
        -: 3669:                 *
        -: 3670:                 * The dispatch code round-robins new connection requests
        -: 3671:                 * among threads, so this is guaranteed to assign one
        -: 3672:                 * FD to each thread.
        -: 3673:                 */
       72: 3674:                int per_thread_fd;
       72: 3675:                if (c == 0) {
        -: 3676:                    per_thread_fd = sfd;
        -: 3677:                } else {
       54: 3678:                    per_thread_fd = dup(sfd);
       54: 3679:                    if (per_thread_fd < 0) {
    #####: 3680:                        perror("Failed to duplicate file descriptor");
    #####: 3681:                        exit(EXIT_FAILURE);
        -: 3682:                    }
        -: 3683:                }
       72: 3684:                dispatch_conn_new(per_thread_fd, conn_read,
        -: 3685:                                  EV_READ | EV_PERSIST,
        -: 3686:                                  UDP_READ_BUFFER_SIZE, transport, NULL, conntag, bproto);
        -: 3687:            }
        -: 3688:        } else {
       32: 3689:            if (!(listen_conn_add = conn_new(sfd, conn_listening,
        -: 3690:                                             EV_READ | EV_PERSIST, 1,
        -: 3691:                                             transport, main_base, NULL, conntag, bproto))) {
    #####: 3692:                fprintf(stderr, "failed to create listening connection\n");
    #####: 3693:                exit(EXIT_FAILURE);
        -: 3694:            }
        -: 3695:#ifdef TLS
        -: 3696:            listen_conn_add->ssl_enabled = ssl_enabled;
        -: 3697:#else
      32*: 3698:            assert(ssl_enabled == false);
        -: 3699:#endif
       32: 3700:            listen_conn_add->next = listen_conn;
       32: 3701:            listen_conn = listen_conn_add;
        -: 3702:        }
        -: 3703:    }
        -: 3704:
       31: 3705:    freeaddrinfo(ai);
        -: 3706:
        -: 3707:    /* Return zero iff we detected no errors in starting up connections */
       31: 3708:    return success == 0;
        -: 3709:}
        -: 3710:
       32: 3711:static int server_sockets(int port, enum network_transport transport,
        -: 3712:                          FILE *portnumber_file) {
       32: 3713:    bool ssl_enabled = false;
        -: 3714:
        -: 3715:#ifdef TLS
        -: 3716:    const char *notls = "notls";
        -: 3717:    ssl_enabled = settings.ssl_enabled;
        -: 3718:#endif
        -: 3719:
       32: 3720:    if (settings.inter == NULL) {
       19: 3721:        return server_socket(settings.inter, port, transport, portnumber_file, ssl_enabled, 0, settings.binding_protocol);
        -: 3722:    } else {
        -: 3723:        // tokenize them and bind to each one of them..
       13: 3724:        char *b;
       13: 3725:        int ret = 0;
       13: 3726:        char *list = strdup(settings.inter);
        -: 3727:
       13: 3728:        if (list == NULL) {
    #####: 3729:            fprintf(stderr, "Failed to allocate memory for parsing server interface string\n");
    #####: 3730:            return 1;
        -: 3731:        }
        -: 3732:        // If we encounter any failure, preserve the first errno for the caller.
       13: 3733:        int errno_save = 0;
       13: 3734:        for (char *p = strtok_r(list, ";,", &b);
       26: 3735:            p != NULL;
       13: 3736:            p = strtok_r(NULL, ";,", &b)) {
       13: 3737:            uint64_t conntag = 0;
       13: 3738:            int the_port = port;
        -: 3739:#ifdef TLS
        -: 3740:            ssl_enabled = settings.ssl_enabled;
        -: 3741:            // "notls" option is valid only when memcached is run with SSL enabled.
        -: 3742:            if (strncmp(p, notls, strlen(notls)) == 0) {
        -: 3743:                if (!settings.ssl_enabled) {
        -: 3744:                    fprintf(stderr, "'notls' option is valid only when SSL is enabled\n");
        -: 3745:                    free(list);
        -: 3746:                    return 1;
        -: 3747:                }
        -: 3748:                ssl_enabled = false;
        -: 3749:                p += strlen(notls) + 1;
        -: 3750:            }
        -: 3751:#endif
        -: 3752:
        -: 3753:            // Allow forcing the protocol of this listener.
       13: 3754:            const char *protostr = "proto";
       13: 3755:            enum protocol bproto = settings.binding_protocol;
       13: 3756:            if (strncmp(p, protostr, strlen(protostr)) == 0) {
    #####: 3757:                p += strlen(protostr);
    #####: 3758:                if (*p == '[') {
    #####: 3759:                    char *e = strchr(p, ']');
    #####: 3760:                    if (e == NULL) {
    #####: 3761:                        fprintf(stderr, "Invalid protocol spec: \"%s\"\n", p);
    #####: 3762:                        free(list);
    #####: 3763:                        return 1;
        -: 3764:                    }
    #####: 3765:                    char *st = ++p; // skip '[';
    #####: 3766:                    *e = '\0';
    #####: 3767:                    size_t len = e - st;
    #####: 3768:                    p = ++e; // skip ']'
    #####: 3769:                    p++; // skip an assumed ':'
        -: 3770:
    #####: 3771:                    if (strncmp(st, "ascii", len) == 0) {
        -: 3772:                        bproto = ascii_prot;
    #####: 3773:                    } else if (strncmp(st, "binary", len) == 0) {
        -: 3774:                        bproto = binary_prot;
    #####: 3775:                    } else if (strncmp(st, "negotiating", len) == 0) {
        -: 3776:                        bproto = negotiating_prot;
    #####: 3777:                    } else if (strncmp(st, "proxy", len) == 0) {
        -: 3778:#ifdef PROXY
        -: 3779:                        if (settings.proxy_enabled) {
        -: 3780:                            bproto = proxy_prot;
        -: 3781:                        } else {
        -: 3782:                            fprintf(stderr, "Proxy must be enabled to use: \"%s\"\n", list);
        -: 3783:                            free(list);
        -: 3784:                            return 1;
        -: 3785:                        }
        -: 3786:#else
    #####: 3787:                        fprintf(stderr, "Server not built with proxy: \"%s\"\n", list);
    #####: 3788:                        free(list);
    #####: 3789:                        return 1;
        -: 3790:#endif
        -: 3791:                    }
        -: 3792:                }
        -: 3793:            }
        -: 3794:
       13: 3795:            const char *tagstr = "tag";
       13: 3796:            if (strncmp(p, tagstr, strlen(tagstr)) == 0) {
    #####: 3797:                p += strlen(tagstr);
        -: 3798:                // NOTE: should probably retire the [] dumbassery. those're
        -: 3799:                // shell characters.
    #####: 3800:                if (*p == '[' || *p == '_') {
    #####: 3801:                    char *e = strchr(p, ']');
    #####: 3802:                    if (e == NULL) {
    #####: 3803:                        e = strchr(p+1, '_');
        -: 3804:                    }
    #####: 3805:                    if (e == NULL) {
    #####: 3806:                        fprintf(stderr, "Invalid tag in socket config: \"%s\"\n", p);
    #####: 3807:                        free(list);
    #####: 3808:                        return 1;
        -: 3809:                    }
    #####: 3810:                    char *st = ++p; // skip '['
    #####: 3811:                    *e = '\0';
    #####: 3812:                    size_t len = e - st;
    #####: 3813:                    p = ++e; // skip ']'
    #####: 3814:                    p++; // skip an assumed ':'
        -: 3815:
        -: 3816:                    // validate the tag and copy it in.
    #####: 3817:                    if (len > 8 || len < 1) {
    #####: 3818:                        fprintf(stderr, "Listener tags must be between 1 and 8 characters: \"%s\"\n", st);
    #####: 3819:                        free(list);
    #####: 3820:                        return 1;
        -: 3821:                    }
        -: 3822:
        -: 3823:                    // C programmers love turning string comparisons into
        -: 3824:                    // integer comparisons.
    #####: 3825:                    memcpy(&conntag, st, len);
        -: 3826:                }
        -: 3827:            }
        -: 3828:
       13: 3829:            char *h = NULL;
       13: 3830:            if (*p == '[') {
        -: 3831:                // expecting it to be an IPv6 address enclosed in []
        -: 3832:                // i.e. RFC3986 style recommended by RFC5952
    #####: 3833:                char *e = strchr(p, ']');
    #####: 3834:                if (e == NULL) {
    #####: 3835:                    fprintf(stderr, "Invalid IPV6 address: \"%s\"", p);
    #####: 3836:                    free(list);
    #####: 3837:                    return 1;
        -: 3838:                }
    #####: 3839:                h = ++p; // skip the opening '['
    #####: 3840:                *e = '\0';
    #####: 3841:                p = ++e; // skip the closing ']'
        -: 3842:            }
        -: 3843:
       13: 3844:            char *s = strchr(p, ':');
       13: 3845:            if (s != NULL) {
        -: 3846:                // If no more semicolons - attempt to treat as port number.
        -: 3847:                // Otherwise the only valid option is an unenclosed IPv6 without port, until
        -: 3848:                // of course there was an RFC3986 IPv6 address previously specified -
        -: 3849:                // in such a case there is no good option, will just send it to fail as port number.
    #####: 3850:                if (strchr(s + 1, ':') == NULL || h != NULL) {
    #####: 3851:                    *s = '\0';
    #####: 3852:                    ++s;
    #####: 3853:                    if (!safe_strtol(s, &the_port)) {
    #####: 3854:                        fprintf(stderr, "Invalid port number: \"%s\"\n", s);
    #####: 3855:                        free(list);
    #####: 3856:                        return 1;
        -: 3857:                    }
        -: 3858:                }
        -: 3859:            }
        -: 3860:
       13: 3861:            if (h != NULL)
    #####: 3862:                p = h;
        -: 3863:
       13: 3864:            if (strcmp(p, "*") == 0) {
    #####: 3865:                p = NULL;
        -: 3866:            }
       13: 3867:            ret |= server_socket(p, the_port, transport, portnumber_file, ssl_enabled, conntag, bproto);
       13: 3868:            if (ret != 0 && errno_save == 0) errno_save = errno;
        -: 3869:        }
       13: 3870:        free(list);
       13: 3871:        errno = errno_save;
       13: 3872:        return ret;
        -: 3873:    }
        -: 3874:}
        -: 3875:
        -: 3876:#ifndef DISABLE_UNIX_SOCKET
       98: 3877:static int new_socket_unix(void) {
       98: 3878:    int sfd;
       98: 3879:    int flags;
        -: 3880:
       98: 3881:    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
    #####: 3882:        perror("socket()");
    #####: 3883:        return -1;
        -: 3884:    }
        -: 3885:
      196: 3886:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       98: 3887:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3888:        perror("setting O_NONBLOCK");
    #####: 3889:        close(sfd);
    #####: 3890:        return -1;
        -: 3891:    }
        -: 3892:    return sfd;
        -: 3893:}
        -: 3894:
       98: 3895:static int server_socket_unix(const char *path, int access_mask) {
       98: 3896:    int sfd;
       98: 3897:    struct linger ling = {0, 0};
       98: 3898:    struct sockaddr_un addr;
       98: 3899:    struct stat tstat;
       98: 3900:    int flags =1;
       98: 3901:    int old_umask;
        -: 3902:
       98: 3903:    if (!path) {
        -: 3904:        return 1;
        -: 3905:    }
        -: 3906:
       98: 3907:    if ((sfd = new_socket_unix()) == -1) {
        -: 3908:        return 1;
        -: 3909:    }
        -: 3910:
        -: 3911:    /*
        -: 3912:     * Clean up a previous socket file if we left it around
        -: 3913:     */
       98: 3914:    if (lstat(path, &tstat) == 0) {
    #####: 3915:        if (S_ISSOCK(tstat.st_mode))
    #####: 3916:            unlink(path);
        -: 3917:    }
        -: 3918:
       98: 3919:    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       98: 3920:    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       98: 3921:    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
        -: 3922:
        -: 3923:    /*
        -: 3924:     * the memset call clears nonstandard fields in some implementations
        -: 3925:     * that otherwise mess things up.
        -: 3926:     */
       98: 3927:    memset(&addr, 0, sizeof(addr));
        -: 3928:
       98: 3929:    addr.sun_family = AF_UNIX;
       98: 3930:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
      98*: 3931:    assert(strcmp(addr.sun_path, path) == 0);
       98: 3932:    old_umask = umask( ~(access_mask&0777));
       98: 3933:    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
    #####: 3934:        perror("bind()");
    #####: 3935:        close(sfd);
    #####: 3936:        umask(old_umask);
    #####: 3937:        return 1;
        -: 3938:    }
       98: 3939:    umask(old_umask);
       98: 3940:    if (listen(sfd, settings.backlog) == -1) {
    #####: 3941:        perror("listen()");
    #####: 3942:        close(sfd);
    #####: 3943:        return 1;
        -: 3944:    }
       98: 3945:    if (!(listen_conn = conn_new(sfd, conn_listening,
        -: 3946:                                 EV_READ | EV_PERSIST, 1,
        -: 3947:                                 local_transport, main_base, NULL, 0, settings.binding_protocol))) {
    #####: 3948:        fprintf(stderr, "failed to create listening connection\n");
    #####: 3949:        exit(EXIT_FAILURE);
        -: 3950:    }
        -: 3951:
        -: 3952:    return 0;
        -: 3953:}
        -: 3954:#else
        -: 3955:#define server_socket_unix(path, access_mask)   -1
        -: 3956:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 3957:
        -: 3958:/*
        -: 3959: * We keep the current time of day in a global variable that's updated by a
        -: 3960: * timer event. This saves us a bunch of time() system calls (we really only
        -: 3961: * need to get the time once a second, whereas there can be tens of thousands
        -: 3962: * of requests a second) and allows us to use server-start-relative timestamps
        -: 3963: * rather than absolute UNIX timestamps, a space savings on systems where
        -: 3964: * sizeof(time_t) > sizeof(unsigned int).
        -: 3965: */
        -: 3966:volatile rel_time_t current_time;
        -: 3967:static struct event clockevent;
        -: 3968:#ifdef MEMCACHED_DEBUG
        -: 3969:volatile bool is_paused;
        -: 3970:volatile int64_t delta;
        -: 3971:#endif
        -: 3972:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 3973:static bool monotonic = false;
        -: 3974:static int64_t monotonic_start;
        -: 3975:#endif
        -: 3976:
        -: 3977:/* libevent uses a monotonic clock when available for event scheduling. Aside
        -: 3978: * from jitter, simply ticking our internal timer here is accurate enough.
        -: 3979: * Note that users who are setting explicit dates for expiration times *must*
        -: 3980: * ensure their clocks are correct before starting memcached. */
      481: 3981:static void clock_handler(const evutil_socket_t fd, const short which, void *arg) {
      481: 3982:    struct timeval t = {.tv_sec = 1, .tv_usec = 0};
      481: 3983:    static bool initialized = false;
        -: 3984:
      481: 3985:    if (initialized) {
        -: 3986:        /* only delete the event if it's actually there. */
      362: 3987:        evtimer_del(&clockevent);
        -: 3988:    } else {
      119: 3989:        initialized = true;
        -: 3990:    }
        -: 3991:
        -: 3992:    // While we're here, check for hash table expansion.
        -: 3993:    // This function should be quick to avoid delaying the timer.
      481: 3994:    assoc_start_expand(stats_state.curr_items);
        -: 3995:    // also, if HUP'ed we need to do some maintenance.
        -: 3996:    // for now that's just the authfile reload.
      481: 3997:    if (settings.sig_hup) {
        1: 3998:        settings.sig_hup = false;
        -: 3999:
        1: 4000:        authfile_load(settings.auth_file);
        -: 4001:#ifdef PROXY
        -: 4002:        if (settings.proxy_ctx) {
        -: 4003:            proxy_start_reload(settings.proxy_ctx);
        -: 4004:        }
        -: 4005:#endif
        -: 4006:    }
        -: 4007:
      481: 4008:    evtimer_set(&clockevent, clock_handler, 0);
      481: 4009:    event_base_set(main_base, &clockevent);
      481: 4010:    evtimer_add(&clockevent, &t);
        -: 4011:
        -: 4012:#ifdef MEMCACHED_DEBUG
      962: 4013:    if (is_paused) return;
        -: 4014:#endif
        -: 4015:
        -: 4016:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
      481: 4017:    if (monotonic) {
      481: 4018:        struct timespec ts;
      481: 4019:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)
        -: 4020:            return;
        -: 4021:#ifdef MEMCACHED_DEBUG
      481: 4022:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start + delta);
        -: 4023:#else
        -: 4024:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);
        -: 4025:#endif
      481: 4026:        return;
        -: 4027:    }
        -: 4028:#endif
        -: 4029:    {
    #####: 4030:        struct timeval tv;
    #####: 4031:        gettimeofday(&tv, NULL);
        -: 4032:#ifdef MEMCACHED_DEBUG
    #####: 4033:        current_time = (rel_time_t) (tv.tv_sec - process_started + delta);
        -: 4034:#else
        -: 4035:        current_time = (rel_time_t) (tv.tv_sec - process_started);
        -: 4036:#endif
        -: 4037:    }
        -: 4038:}
        -: 4039:
      596: 4040:static const char* flag_enabled_disabled(bool flag) {
      596: 4041:    return (flag ? "enabled" : "disabled");
        -: 4042:}
        -: 4043:
     2216: 4044:static void verify_default(const char* param, bool condition) {
     2216: 4045:    if (!condition) {
    #####: 4046:        printf("Default value of [%s] has changed."
        -: 4047:            " Modify the help text and default value check.\n", param);
    #####: 4048:        exit(EXIT_FAILURE);
        -: 4049:    }
     2216: 4050:}
        -: 4051:
      298: 4052:static void usage(void) {
      298: 4053:    printf(PACKAGE " " VERSION "\n");
      298: 4054:    printf("-p, --port=<num>          TCP port to listen on (default: %d)\n"
        -: 4055:           "-U, --udp-port=<num>      UDP port to listen on (default: %d, off)\n",
        -: 4056:           settings.port, settings.udpport);
        -: 4057:#ifndef DISABLE_UNIX_SOCKET
      298: 4058:    printf("-s, --unix-socket=<file>  UNIX socket to listen on (disables network support)\n");
      298: 4059:    printf("-a, --unix-mask=<mask>    access mask for UNIX socket, in octal (default: %o)\n",
        -: 4060:            settings.access);
        -: 4061:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      298: 4062:    printf("-A, --enable-shutdown     enable ascii \"shutdown\" command\n");
      298: 4063:    printf("-l, --listen=<addr>       interface to listen on (default: INADDR_ANY)\n");
        -: 4064:#ifdef TLS
        -: 4065:    printf("                          if TLS/SSL is enabled, 'notls' prefix can be used to\n"
        -: 4066:           "                          disable for specific listeners (-l notls:<ip>:<port>) \n");
        -: 4067:#endif
      596: 4068:    printf("-d, --daemon              run as a daemon\n"
        -: 4069:           "-r, --enable-coredumps    maximize core file limit\n"
        -: 4070:           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
        -: 4071:           "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
        -: 4072:           "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
        -: 4073:           "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
        -: 4074:           "-k, --lock-memory         lock down all paged memory\n"
        -: 4075:           "-v, --verbose             verbose (print errors/warnings while in event loop)\n"
        -: 4076:           "-vv                       very verbose (also print client commands/responses)\n"
        -: 4077:           "-vvv                      extremely verbose (internal state transitions)\n"
        -: 4078:           "-h, --help                print this help and exit\n"
        -: 4079:           "-i, --license             print memcached and libevent license\n"
        -: 4080:           "-V, --version             print version and exit\n"
        -: 4081:           "-P, --pidfile=<file>      save PID in <file>, only used with -d option\n"
        -: 4082:           "-f, --slab-growth-factor=<num> chunk size growth factor (default: %2.2f)\n"
        -: 4083:           "-n, --slab-min-size=<bytes> min space used for key+value+flags (default: %d)\n",
      298: 4084:           (unsigned long) settings.maxbytes / (1 << 20),
        -: 4085:           settings.maxconns, settings.factor, settings.chunk_size);
      298: 4086:    verify_default("udp-port",settings.udpport == 0);
      298: 4087:    printf("-L, --enable-largepages  try to use large memory pages (if available)\n");
      596: 4088:    printf("-D <char>     Use <char> as the delimiter between key prefixes and IDs.\n"
        -: 4089:           "              This is used for per-prefix stats reporting. The default is\n"
        -: 4090:           "              \"%c\" (colon). If this option is specified, stats collection\n"
        -: 4091:           "              is turned on automatically; if not, then it may be turned on\n"
        -: 4092:           "              by sending the \"stats detail on\" command to the server.\n",
      298: 4093:           settings.prefix_delimiter);
      298: 4094:    printf("-t, --threads=<num>       number of threads to use (default: %d)\n", settings.num_threads);
      298: 4095:    printf("-R, --max-reqs-per-event  maximum number of requests per event, limits the\n"
        -: 4096:           "                          requests processed per connection to prevent \n"
        -: 4097:           "                          starvation (default: %d)\n", settings.reqs_per_event);
      298: 4098:    printf("-C, --disable-cas         disable use of CAS\n");
      298: 4099:    printf("-b, --listen-backlog=<num> set the backlog queue limit (default: %d)\n", settings.backlog);
      596: 4100:    printf("-B, --protocol=<name>     protocol - one of ascii, binary, or auto (default: %s)\n",
        -: 4101:           prot_text(settings.binding_protocol));
      596: 4102:    printf("-I, --max-item-size=<num> adjusts max item size\n"
        -: 4103:           "                          (default: %dm, min: %dk, max: %dm)\n",
      298: 4104:           settings.item_size_max/ (1 << 20), ITEM_SIZE_MAX_LOWER_LIMIT / (1 << 10),  ITEM_SIZE_MAX_UPPER_LIMIT / (1 << 20));
        -: 4105:#ifdef ENABLE_SASL
        -: 4106:    printf("-S, --enable-sasl         turn on Sasl authentication\n");
        -: 4107:#endif
      298: 4108:    printf("-F, --disable-flush-all   disable flush_all command\n");
      298: 4109:    printf("-X, --disable-dumping     disable stats cachedump and lru_crawler metadump\n");
      298: 4110:    printf("-W  --disable-watch       disable watch commands (live logging)\n");
      298: 4111:    printf("-Y, --auth-file=<file>    (EXPERIMENTAL) enable ASCII protocol authentication. format:\n"
        -: 4112:           "                          user:pass\\nuser2:pass2\\n\n");
      298: 4113:    printf("-e, --memory-file=<file>  (EXPERIMENTAL) mmap a file for item memory.\n"
        -: 4114:           "                          use only in ram disks or persistent memory mounts!\n"
        -: 4115:           "                          enables restartable cache (stop with SIGUSR1)\n");
        -: 4116:#ifdef TLS
        -: 4117:    printf("-Z, --enable-ssl          enable TLS/SSL\n");
        -: 4118:#endif
      298: 4119:    printf("-o, --extended            comma separated list of extended options\n"
        -: 4120:           "                          most options have a 'no_' prefix to disable\n"
        -: 4121:           "   - maxconns_fast:       immediately close new connections after limit (default: %s)\n"
        -: 4122:           "   - hashpower:           an integer multiplier for how large the hash\n"
        -: 4123:           "                          table should be. normally grows at runtime. (default starts at: %d)\n"
        -: 4124:           "                          set based on \"STAT hash_power_level\"\n"
        -: 4125:           "   - tail_repair_time:    time in seconds for how long to wait before\n"
        -: 4126:           "                          forcefully killing LRU tail item.\n"
        -: 4127:           "                          disabled by default; very dangerous option.\n"
        -: 4128:           "   - hash_algorithm:      the hash table algorithm\n"
        -: 4129:           "                          default is murmur3 hash. options: jenkins, murmur3, xxh3\n"
        -: 4130:           "   - no_lru_crawler:      disable LRU Crawler background thread.\n"
        -: 4131:           "   - lru_crawler_sleep:   microseconds to sleep between items\n"
        -: 4132:           "                          default is %d.\n"
        -: 4133:           "   - lru_crawler_tocrawl: max items to crawl per slab per run\n"
        -: 4134:           "                          default is %u (unlimited)\n",
      298: 4135:           flag_enabled_disabled(settings.maxconns_fast), settings.hashpower_init,
        -: 4136:           settings.lru_crawler_sleep, settings.lru_crawler_tocrawl);
      298: 4137:    printf("   - read_buf_mem_limit:  limit in megabytes for connection read/response buffers.\n"
        -: 4138:           "                          do not adjust unless you have high (20k+) conn. limits.\n"
        -: 4139:           "                          0 means unlimited (default: %u)\n",
        -: 4140:           settings.read_buf_mem_limit);
      298: 4141:    verify_default("read_buf_mem_limit", settings.read_buf_mem_limit == 0);
      298: 4142:    printf("   - no_lru_maintainer:   disable new LRU system + background thread.\n"
        -: 4143:           "   - hot_lru_pct:         pct of slab memory to reserve for hot lru.\n"
        -: 4144:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4145:           "   - warm_lru_pct:        pct of slab memory to reserve for warm lru.\n"
        -: 4146:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4147:           "   - hot_max_factor:      items idle > cold lru age * drop from hot lru. (default: %.2f)\n"
        -: 4148:           "   - warm_max_factor:     items idle > cold lru age * this drop from warm. (default: %.2f)\n"
        -: 4149:           "   - temporary_ttl:       TTL's below get separate LRU, can't be evicted.\n"
        -: 4150:           "                          (requires lru_maintainer, default: %d)\n"
        -: 4151:           "   - idle_timeout:        timeout for idle connections. (default: %d, no timeout)\n",
        -: 4152:           settings.hot_lru_pct, settings.warm_lru_pct, settings.hot_max_factor, settings.warm_max_factor,
        -: 4153:           settings.temporary_ttl, settings.idle_timeout);
      596: 4154:    printf("   - slab_chunk_max:      (EXPERIMENTAL) maximum slab size in kilobytes. use extreme care. (default: %d)\n"
        -: 4155:           "   - watcher_logbuf_size: size in kilobytes of per-watcher write buffer. (default: %u)\n"
        -: 4156:           "   - worker_logbuf_size:  size in kilobytes of per-worker-thread buffer\n"
        -: 4157:           "                          read by background thread, then written to watchers. (default: %u)\n"
        -: 4158:           "   - track_sizes:         enable dynamic reports for 'stats sizes' command.\n"
        -: 4159:           "                          note that counts for each size are approximate.\n"
        -: 4160:           "   - no_hashexpand:       disables hash table expansion (dangerous)\n"
        -: 4161:           "   - modern:              enables options which will be default in future.\n"
        -: 4162:           "                          currently: nothing\n"
        -: 4163:           "   - no_modern:           uses defaults of previous major version (1.4.x)\n",
      298: 4164:           settings.slab_chunk_size_max / (1 << 10), settings.logger_watcher_buf_size / (1 << 10),
      298: 4165:           settings.logger_buf_size / (1 << 10));
      298: 4166:    verify_default("tail_repair_time", settings.tail_repair_time == TAIL_REPAIR_TIME_DEFAULT);
      298: 4167:    verify_default("lru_crawler_tocrawl", settings.lru_crawler_tocrawl == 0);
      298: 4168:    verify_default("idle_timeout", settings.idle_timeout == 0);
        -: 4169:#ifdef HAVE_DROP_PRIVILEGES
        -: 4170:    printf("   - drop_privileges:     enable dropping extra syscall privileges\n"
        -: 4171:           "   - no_drop_privileges:  disable drop_privileges in case it causes issues with\n"
        -: 4172:           "                          some customisation.\n"
        -: 4173:           "                          (default is no_drop_privileges)\n");
        -: 4174:    verify_default("drop_privileges", !settings.drop_privileges);
        -: 4175:#ifdef MEMCACHED_DEBUG
        -: 4176:    printf("   - relaxed_privileges:  running tests requires extra privileges. (default: %s)\n",
        -: 4177:           flag_enabled_disabled(settings.relaxed_privileges));
        -: 4178:#endif
        -: 4179:#endif
        -: 4180:#ifdef SOCK_COOKIE_ID
      298: 4181:    printf("   - sock_cookie_id:      attributes an ID to a socket for ip filtering/firewalls \n");
        -: 4182:#endif
        -: 4183:#ifdef EXTSTORE
      298: 4184:    printf("\n   - External storage (ext_*) related options (see: https://memcached.org/extstore)\n");
      894: 4185:    printf("   - ext_path:            file to write to for external storage.\n"
        -: 4186:           "                          ie: ext_path=/mnt/d1/extstore:1G\n"
        -: 4187:           "   - ext_page_size:       size in megabytes of storage pages. (default: %u)\n"
        -: 4188:           "   - ext_wbuf_size:       size in megabytes of page write buffers. (default: %u)\n"
        -: 4189:           "   - ext_threads:         number of IO threads to run. (default: %u)\n"
        -: 4190:           "   - ext_item_size:       store items larger than this (bytes, default %u)\n"
        -: 4191:           "   - ext_item_age:        store items idle at least this long (seconds, default: no age limit)\n"
        -: 4192:           "   - ext_low_ttl:         consider TTLs lower than this specially (default: %u)\n"
        -: 4193:           "   - ext_drop_unread:     don't re-write unread values during compaction (default: %s)\n"
        -: 4194:           "   - ext_recache_rate:    recache an item every N accesses (default: %u)\n"
        -: 4195:           "   - ext_compact_under:   compact when fewer than this many free pages\n"
        -: 4196:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4197:           "   - ext_drop_under:      drop COLD items when fewer than this many free pages\n"
        -: 4198:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4199:           "   - ext_max_frag:        max page fragmentation to tolerate (default: %.2f)\n"
        -: 4200:           "   - ext_max_sleep:       max sleep time of background threads in us (default: %u)\n"
        -: 4201:           "   - slab_automove_freeratio: ratio of memory to hold free as buffer.\n"
        -: 4202:           "                          (see doc/storage.txt for more info, default: %.3f)\n",
      298: 4203:           settings.ext_page_size / (1 << 20), settings.ext_wbuf_size / (1 << 20), settings.ext_io_threadcount,
        -: 4204:           settings.ext_item_size, settings.ext_low_ttl,
      298: 4205:           flag_enabled_disabled(settings.ext_drop_unread), settings.ext_recache_rate,
        -: 4206:           settings.ext_max_frag, settings.ext_max_sleep, settings.slab_automove_freeratio);
      298: 4207:    verify_default("ext_item_age", settings.ext_item_age == UINT_MAX);
        -: 4208:#endif
        -: 4209:#ifdef PROXY
        -: 4210:    printf("   - proxy_config:        path to lua config file.\n");
        -: 4211:#endif
        -: 4212:#ifdef TLS
        -: 4213:    printf("   - ssl_chain_cert:      certificate chain file in PEM format\n"
        -: 4214:           "   - ssl_key:             private key, if not part of the -ssl_chain_cert\n"
        -: 4215:           "   - ssl_keyformat:       private key format (PEM, DER or ENGINE) (default: PEM)\n");
        -: 4216:    printf("   - ssl_verify_mode:     peer certificate verification mode, default is 0(None).\n"
        -: 4217:           "                          valid values are 0(None), 1(Request), 2(Require)\n"
        -: 4218:           "                          or 3(Once)\n");
        -: 4219:    printf("   - ssl_ciphers:         specify cipher list to be used\n"
        -: 4220:           "   - ssl_ca_cert:         PEM format file of acceptable client CA's\n"
        -: 4221:           "   - ssl_wbuf_size:       size in kilobytes of per-connection SSL output buffer\n"
        -: 4222:           "                          (default: %u)\n", settings.ssl_wbuf_size / (1 << 10));
        -: 4223:    printf("   - ssl_session_cache:   enable server-side SSL session cache, to support session\n"
        -: 4224:           "                          resumption\n"
        -: 4225:           "   - ssl_kernel_tls:      enable kernel TLS offload\n"
        -: 4226:           "   - ssl_min_version:     minimum protocol version to accept (default: %s)\n",
        -: 4227:           ssl_proto_text(settings.ssl_min_version));
        -: 4228:#if defined(TLS1_3_VERSION)
        -: 4229:    printf("                          valid values are 0(%s), 1(%s), 2(%s), or 3(%s).\n",
        -: 4230:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4231:           ssl_proto_text(TLS1_2_VERSION), ssl_proto_text(TLS1_3_VERSION));
        -: 4232:#else
        -: 4233:    printf("                          valid values are 0(%s), 1(%s), or 2(%s).\n",
        -: 4234:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4235:           ssl_proto_text(TLS1_2_VERSION));
        -: 4236:#endif
        -: 4237:    verify_default("ssl_keyformat", settings.ssl_keyformat == SSL_FILETYPE_PEM);
        -: 4238:    verify_default("ssl_verify_mode", settings.ssl_verify_mode == SSL_VERIFY_NONE);
        -: 4239:    verify_default("ssl_min_version", settings.ssl_min_version == TLS1_2_VERSION);
        -: 4240:#endif
      298: 4241:    printf("-N, --napi_ids            number of napi ids. see doc/napi_ids.txt for more details\n");
      298: 4242:    return;
        -: 4243:}
        -: 4244:
    #####: 4245:static void usage_license(void) {
    #####: 4246:    printf(PACKAGE " " VERSION "\n\n");
    #####: 4247:    printf(
        -: 4248:    "Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\n"
        -: 4249:    "All rights reserved.\n"
        -: 4250:    "\n"
        -: 4251:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4252:    "modification, are permitted provided that the following conditions are\n"
        -: 4253:    "met:\n"
        -: 4254:    "\n"
        -: 4255:    "    * Redistributions of source code must retain the above copyright\n"
        -: 4256:    "notice, this list of conditions and the following disclaimer.\n"
        -: 4257:    "\n"
        -: 4258:    "    * Redistributions in binary form must reproduce the above\n"
        -: 4259:    "copyright notice, this list of conditions and the following disclaimer\n"
        -: 4260:    "in the documentation and/or other materials provided with the\n"
        -: 4261:    "distribution.\n"
        -: 4262:    "\n"
        -: 4263:    "    * Neither the name of the Danga Interactive nor the names of its\n"
        -: 4264:    "contributors may be used to endorse or promote products derived from\n"
        -: 4265:    "this software without specific prior written permission.\n"
        -: 4266:    "\n"
        -: 4267:    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
        -: 4268:    "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
        -: 4269:    "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
        -: 4270:    "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
        -: 4271:    "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
        -: 4272:    "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
        -: 4273:    "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4274:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4275:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4276:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
        -: 4277:    "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4278:    );
        -: 4279:
    #####: 4280:    return;
        -: 4281:}
        -: 4282:
        1: 4283:static void save_pid(const char *pid_file) {
        1: 4284:    FILE *fp;
        1: 4285:    if (access(pid_file, F_OK) == 0) {
    #####: 4286:        if ((fp = fopen(pid_file, "r")) != NULL) {
    #####: 4287:            char buffer[1024];
    #####: 4288:            if (fgets(buffer, sizeof(buffer), fp) != NULL) {
    #####: 4289:                unsigned int pid;
    #####: 4290:                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {
    #####: 4291:                    fprintf(stderr, "WARNING: The pid file contained the following (running) pid: %u\n", pid);
        -: 4292:                }
        -: 4293:            }
    #####: 4294:            fclose(fp);
        -: 4295:        }
        -: 4296:    }
        -: 4297:
        -: 4298:    /* Create the pid file first with a temporary name, then
        -: 4299:     * atomically move the file to the real name to avoid a race with
        -: 4300:     * another process opening the file to read the pid, but finding
        -: 4301:     * it empty.
        -: 4302:     */
        1: 4303:    char tmp_pid_file[1024];
        1: 4304:    snprintf(tmp_pid_file, sizeof(tmp_pid_file), "%s.tmp", pid_file);
        -: 4305:
        1: 4306:    if ((fp = fopen(tmp_pid_file, "w")) == NULL) {
    #####: 4307:        vperror("Could not open the pid file %s for writing", tmp_pid_file);
    #####: 4308:        return;
        -: 4309:    }
        -: 4310:
        1: 4311:    fprintf(fp,"%ld\n", (long)getpid());
        1: 4312:    if (fclose(fp) == -1) {
    #####: 4313:        vperror("Could not close the pid file %s", tmp_pid_file);
        -: 4314:    }
        -: 4315:
        1: 4316:    if (rename(tmp_pid_file, pid_file) != 0) {
    #####: 4317:        vperror("Could not rename the pid file from %s to %s",
        -: 4318:                tmp_pid_file, pid_file);
        -: 4319:    }
        -: 4320:}
        -: 4321:
        1: 4322:static void remove_pidfile(const char *pid_file) {
        1: 4323:  if (pid_file == NULL)
        -: 4324:      return;
        -: 4325:
        1: 4326:  if (unlink(pid_file) != 0) {
    #####: 4327:      vperror("Could not remove the pid file %s", pid_file);
        -: 4328:  }
        -: 4329:
        -: 4330:}
        -: 4331:
      122: 4332:static void sig_handler(const int sig) {
      122: 4333:    stop_main_loop = EXIT_NORMALLY;
      122: 4334:}
        -: 4335:
        1: 4336:static void sighup_handler(const int sig) {
        1: 4337:    settings.sig_hup = true;
        1: 4338:}
        -: 4339:
        2: 4340:static void sig_usrhandler(const int sig) {
        2: 4341:    stop_main_loop = GRACE_STOP;
        2: 4342:}
        -: 4343:
        -: 4344:/*
        -: 4345: * On systems that supports multiple page sizes we may reduce the
        -: 4346: * number of TLB-misses by using the biggest available page size
        -: 4347: */
    #####: 4348:static int enable_large_pages(void) {
        -: 4349:#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)
        -: 4350:    int ret = -1;
        -: 4351:    size_t sizes[32];
        -: 4352:    int avail = getpagesizes(sizes, 32);
        -: 4353:    if (avail != -1) {
        -: 4354:        size_t max = sizes[0];
        -: 4355:        struct memcntl_mha arg = {0};
        -: 4356:        int ii;
        -: 4357:
        -: 4358:        for (ii = 1; ii < avail; ++ii) {
        -: 4359:            if (max < sizes[ii]) {
        -: 4360:                max = sizes[ii];
        -: 4361:            }
        -: 4362:        }
        -: 4363:
        -: 4364:        arg.mha_flags   = 0;
        -: 4365:        arg.mha_pagesize = max;
        -: 4366:        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;
        -: 4367:
        -: 4368:        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {
        -: 4369:            fprintf(stderr, "Failed to set large pages: %s\n",
        -: 4370:                    strerror(errno));
        -: 4371:            fprintf(stderr, "Will use default page size\n");
        -: 4372:        } else {
        -: 4373:            ret = 0;
        -: 4374:        }
        -: 4375:    } else {
        -: 4376:        fprintf(stderr, "Failed to get supported pagesizes: %s\n",
        -: 4377:                strerror(errno));
        -: 4378:        fprintf(stderr, "Will use default page size\n");
        -: 4379:    }
        -: 4380:
        -: 4381:    return ret;
        -: 4382:#elif defined(__linux__) && defined(MADV_HUGEPAGE)
        -: 4383:    /* check if transparent hugepages is compiled into the kernel */
        -: 4384:    /* RH based systems possibly uses a different path */
    #####: 4385:    static const char *mm_thp_paths[] = {
        -: 4386:        "/sys/kernel/mm/transparent_hugepage/enabled",
        -: 4387:        "/sys/kernel/mm/redhat_transparent_hugepage/enabled",
        -: 4388:        NULL
        -: 4389:    };
        -: 4390:
    #####: 4391:    char thpb[128] = {0};
    #####: 4392:    int pfd = -1;
    #####: 4393:    for (const char **p = mm_thp_paths; *p; p++) {
    #####: 4394:        if ((pfd = open(*p, O_RDONLY)) != -1)
        -: 4395:            break;
        -: 4396:    }
        -: 4397:
    #####: 4398:    if (pfd == -1) {
    #####: 4399:        fprintf(stderr, "Transparent huge pages support not detected.\n");
    #####: 4400:        fprintf(stderr, "Will use default page size.\n");
    #####: 4401:        return -1;
        -: 4402:    }
    #####: 4403:    ssize_t rd = read(pfd, thpb, sizeof(thpb));
    #####: 4404:    close(pfd);
    #####: 4405:    if (rd <= 0) {
    #####: 4406:        fprintf(stderr, "Transparent huge pages could not read the configuration.\n");
    #####: 4407:        fprintf(stderr, "Will use default page size.\n");
    #####: 4408:        return -1;
        -: 4409:    }
    #####: 4410:    thpb[rd] = 0;
    #####: 4411:    if (strstr(thpb, "[never]")) {
    #####: 4412:        fprintf(stderr, "Transparent huge pages support disabled.\n");
    #####: 4413:        fprintf(stderr, "Will use default page size.\n");
    #####: 4414:        return -1;
        -: 4415:    }
        -: 4416:    return 0;
        -: 4417:#elif defined(__FreeBSD__)
        -: 4418:    int spages;
        -: 4419:    size_t spagesl = sizeof(spages);
        -: 4420:
        -: 4421:    if (sysctlbyname("vm.pmap.pg_ps_enabled", &spages,
        -: 4422:    &spagesl, NULL, 0) != 0) {
        -: 4423:        fprintf(stderr, "Could not evaluate the presence of superpages features.");
        -: 4424:        return -1;
        -: 4425:    }
        -: 4426:    if (spages != 1) {
        -: 4427:        fprintf(stderr, "Superpages support not detected.\n");
        -: 4428:        fprintf(stderr, "Will use default page size.\n");
        -: 4429:        return -1;
        -: 4430:    }
        -: 4431:    return 0;
        -: 4432:#else
        -: 4433:    return -1;
        -: 4434:#endif
        -: 4435:}
        -: 4436:
        -: 4437:/**
        -: 4438: * Do basic sanity check of the runtime environment
        -: 4439: * @return true if no errors found, false if we can't use this env
        -: 4440: */
      428: 4441:static bool sanitycheck(void) {
        -: 4442:    /* One of our biggest problems is old and bogus libevents */
      428: 4443:    const char *ever = event_get_version();
      428: 4444:    if (ever != NULL) {
      428: 4445:        if (strncmp(ever, "1.", 2) == 0) {
    #####: 4446:            fprintf(stderr, "You are using libevent %s.\nPlease upgrade to 2.x"
        -: 4447:                        " or newer\n", event_get_version());
    #####: 4448:            return false;
        -: 4449:        }
        -: 4450:    }
        -: 4451:
        -: 4452:    return true;
        -: 4453:}
        -: 4454:
    #####: 4455:static bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {
    #####: 4456:    char *b = NULL;
    #####: 4457:    uint32_t size = 0;
    #####: 4458:    int i = 0;
    #####: 4459:    uint32_t last_size = 0;
        -: 4460:
    #####: 4461:    if (strlen(s) < 1)
        -: 4462:        return false;
        -: 4463:
    #####: 4464:    for (char *p = strtok_r(s, "-", &b);
    #####: 4465:         p != NULL;
    #####: 4466:         p = strtok_r(NULL, "-", &b)) {
    #####: 4467:        if (!safe_strtoul(p, &size) || size < settings.chunk_size
    #####: 4468:             || size > settings.slab_chunk_size_max) {
    #####: 4469:            fprintf(stderr, "slab size %u is out of valid range\n", size);
    #####: 4470:            return false;
        -: 4471:        }
    #####: 4472:        if (last_size >= size) {
    #####: 4473:            fprintf(stderr, "slab size %u cannot be lower than or equal to a previous class size\n", size);
    #####: 4474:            return false;
        -: 4475:        }
    #####: 4476:        if (size <= last_size + CHUNK_ALIGN_BYTES) {
    #####: 4477:            fprintf(stderr, "slab size %u must be at least %d bytes larger than previous class\n",
        -: 4478:                    size, CHUNK_ALIGN_BYTES);
    #####: 4479:            return false;
        -: 4480:        }
    #####: 4481:        slab_sizes[i++] = size;
    #####: 4482:        last_size = size;
    #####: 4483:        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {
    #####: 4484:            fprintf(stderr, "too many slab classes specified\n");
    #####: 4485:            return false;
        -: 4486:        }
        -: 4487:    }
        -: 4488:
    #####: 4489:    slab_sizes[i] = 0;
    #####: 4490:    return true;
        -: 4491:}
        -: 4492:
        -: 4493:struct _mc_meta_data {
        -: 4494:    void *mmap_base;
        -: 4495:    uint64_t old_base;
        -: 4496:    char *slab_config; // string containing either factor or custom slab list.
        -: 4497:    int64_t time_delta;
        -: 4498:    uint64_t process_started;
        -: 4499:    uint32_t current_time;
        -: 4500:};
        -: 4501:
        -: 4502:// We need to remember a combination of configuration settings and global
        -: 4503:// state for restart viability and resumption of internal services.
        -: 4504:// Compared to the number of tunables and state values, relatively little
        -: 4505:// does need to be remembered.
        -: 4506:// Time is the hardest; we have to assume the sys clock is correct and re-sync for
        -: 4507:// the lost time after restart.
        1: 4508:static int _mc_meta_save_cb(const char *tag, void *ctx, void *data) {
        1: 4509:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        -: 4510:
        -: 4511:    // Settings to remember.
        -: 4512:    // TODO: should get a version of version which is numeric, else
        -: 4513:    // comparisons for compat reasons are difficult.
        -: 4514:    // it may be possible to punt on this for now; since we can test for the
        -: 4515:    // absence of another key... such as the new numeric version.
        -: 4516:    //restart_set_kv(ctx, "version", "%s", VERSION);
        -: 4517:    // We hold the original factor or subopts _string_
        -: 4518:    // it can be directly compared without roundtripping through floats or
        -: 4519:    // serializing/deserializing the long options list.
        1: 4520:    restart_set_kv(ctx, "slab_config", "%s", meta->slab_config);
        1: 4521:    restart_set_kv(ctx, "maxbytes", "%llu", (unsigned long long) settings.maxbytes);
        1: 4522:    restart_set_kv(ctx, "chunk_size", "%d", settings.chunk_size);
        1: 4523:    restart_set_kv(ctx, "item_size_max", "%d", settings.item_size_max);
        1: 4524:    restart_set_kv(ctx, "slab_chunk_size_max", "%d", settings.slab_chunk_size_max);
        1: 4525:    restart_set_kv(ctx, "slab_page_size", "%d", settings.slab_page_size);
        1: 4526:    restart_set_kv(ctx, "use_cas", "%s", settings.use_cas ? "true" : "false");
        1: 4527:    restart_set_kv(ctx, "slab_reassign", "%s", settings.slab_reassign ? "true" : "false");
        -: 4528:
        -: 4529:    // Online state to remember.
        -: 4530:
        -: 4531:    // current time is tough. we need to rely on the clock being correct to
        -: 4532:    // pull the delta between stop and start times. we also need to know the
        -: 4533:    // delta between start time and now to restore monotonic clocks.
        -: 4534:    // for non-monotonic clocks (some OS?), process_started is the only
        -: 4535:    // important one.
        1: 4536:    restart_set_kv(ctx, "current_time", "%u", current_time);
        -: 4537:    // types are great until... this. some systems time_t could be big, but
        -: 4538:    // I'm assuming never negative.
        1: 4539:    restart_set_kv(ctx, "process_started", "%llu", (unsigned long long) process_started);
        -: 4540:    {
        1: 4541:        struct timeval tv;
        1: 4542:        gettimeofday(&tv, NULL);
        1: 4543:        restart_set_kv(ctx, "stop_time", "%lu", tv.tv_sec);
        -: 4544:    }
        -: 4545:
        -: 4546:    // Might as well just fetch the next CAS value to use than tightly
        -: 4547:    // coupling the internal variable into the restart system.
        1: 4548:    restart_set_kv(ctx, "current_cas", "%llu", (unsigned long long) get_cas_id());
        1: 4549:    restart_set_kv(ctx, "oldest_cas", "%llu", (unsigned long long) settings.oldest_cas);
        1: 4550:    restart_set_kv(ctx, "logger_gid", "%llu", logger_get_gid());
        1: 4551:    restart_set_kv(ctx, "hashpower", "%u", stats_state.hash_power_level);
        -: 4552:    // NOTE: oldest_live is a rel_time_t, which aliases for unsigned int.
        -: 4553:    // should future proof this with a 64bit upcast, or fetch value from a
        -: 4554:    // converter function/macro?
        1: 4555:    restart_set_kv(ctx, "oldest_live", "%u", settings.oldest_live);
        -: 4556:    // TODO: use uintptr_t etc? is it portable enough?
        1: 4557:    restart_set_kv(ctx, "mmap_oldbase", "%p", meta->mmap_base);
        -: 4558:
        1: 4559:    return 0;
        -: 4560:}
        -: 4561:
        -: 4562:// We must see at least this number of checked lines. Else empty/missing lines
        -: 4563:// could cause a false-positive.
        -: 4564:// TODO: Once crc32'ing of the metadata file is done this could be ensured better by
        -: 4565:// the restart module itself (crc32 + count of lines must match on the
        -: 4566:// backend)
        -: 4567:#define RESTART_REQUIRED_META 17
        -: 4568:
        -: 4569:// With this callback we make a decision on if the current configuration
        -: 4570:// matches up enough to allow reusing the cache.
        -: 4571:// We also re-load important runtime information.
        1: 4572:static int _mc_meta_load_cb(const char *tag, void *ctx, void *data) {
        1: 4573:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        1: 4574:    char *key;
        1: 4575:    char *val;
        1: 4576:    int reuse_mmap = 0;
        1: 4577:    meta->process_started = 0;
        1: 4578:    meta->time_delta = 0;
        1: 4579:    meta->current_time = 0;
        1: 4580:    int lines_seen = 0;
        -: 4581:
        -: 4582:    // TODO: not sure this is any better than just doing an if/else tree with
        -: 4583:    // strcmp's...
        1: 4584:    enum {
        -: 4585:        R_MMAP_OLDBASE = 0,
        -: 4586:        R_MAXBYTES,
        -: 4587:        R_CHUNK_SIZE,
        -: 4588:        R_ITEM_SIZE_MAX,
        -: 4589:        R_SLAB_CHUNK_SIZE_MAX,
        -: 4590:        R_SLAB_PAGE_SIZE,
        -: 4591:        R_SLAB_CONFIG,
        -: 4592:        R_USE_CAS,
        -: 4593:        R_SLAB_REASSIGN,
        -: 4594:        R_CURRENT_CAS,
        -: 4595:        R_OLDEST_CAS,
        -: 4596:        R_OLDEST_LIVE,
        -: 4597:        R_LOGGER_GID,
        -: 4598:        R_CURRENT_TIME,
        -: 4599:        R_STOP_TIME,
        -: 4600:        R_PROCESS_STARTED,
        -: 4601:        R_HASHPOWER,
        -: 4602:    };
        -: 4603:
        1: 4604:    const char *opts[] = {
        -: 4605:        [R_MMAP_OLDBASE] = "mmap_oldbase",
        -: 4606:        [R_MAXBYTES] = "maxbytes",
        -: 4607:        [R_CHUNK_SIZE] = "chunk_size",
        -: 4608:        [R_ITEM_SIZE_MAX] = "item_size_max",
        -: 4609:        [R_SLAB_CHUNK_SIZE_MAX] = "slab_chunk_size_max",
        -: 4610:        [R_SLAB_PAGE_SIZE] = "slab_page_size",
        -: 4611:        [R_SLAB_CONFIG] = "slab_config",
        -: 4612:        [R_USE_CAS] = "use_cas",
        -: 4613:        [R_SLAB_REASSIGN] = "slab_reassign",
        -: 4614:        [R_CURRENT_CAS] = "current_cas",
        -: 4615:        [R_OLDEST_CAS] = "oldest_cas",
        -: 4616:        [R_OLDEST_LIVE] = "oldest_live",
        -: 4617:        [R_LOGGER_GID] = "logger_gid",
        -: 4618:        [R_CURRENT_TIME] = "current_time",
        -: 4619:        [R_STOP_TIME] = "stop_time",
        -: 4620:        [R_PROCESS_STARTED] = "process_started",
        -: 4621:        [R_HASHPOWER] = "hashpower",
        -: 4622:        NULL
        -: 4623:    };
        -: 4624:
       18: 4625:    while (restart_get_kv(ctx, &key, &val) == RESTART_OK) {
       17: 4626:        int type = 0;
       17: 4627:        int32_t val_int = 0;
       17: 4628:        uint32_t val_uint = 0;
       17: 4629:        int64_t bigval_int = 0;
       17: 4630:        uint64_t bigval_uint = 0;
        -: 4631:
      153: 4632:        while (opts[type] != NULL && strcmp(key, opts[type]) != 0) {
      136: 4633:            type++;
        -: 4634:        }
       17: 4635:        if (opts[type] == NULL) {
    #####: 4636:            fprintf(stderr, "[restart] unknown/unhandled key: %s\n", key);
    #####: 4637:            continue;
        -: 4638:        }
       17: 4639:        lines_seen++;
        -: 4640:
        -: 4641:        // helper for any boolean checkers.
       17: 4642:        bool val_bool = false;
       17: 4643:        bool is_bool = true;
       17: 4644:        if (strcmp(val, "false") == 0) {
        -: 4645:            val_bool = false;
       17: 4646:        } else if (strcmp(val, "true") == 0) {
        -: 4647:            val_bool = true;
        -: 4648:        } else {
       15: 4649:            is_bool = false;
        -: 4650:        }
        -: 4651:
       17: 4652:        switch (type) {
        1: 4653:        case R_MMAP_OLDBASE:
        1: 4654:            if (!safe_strtoull_hex(val, &meta->old_base)) {
    #####: 4655:                fprintf(stderr, "[restart] failed to parse %s: %s\n", key, val);
    #####: 4656:                reuse_mmap = -1;
        -: 4657:            }
        -: 4658:            break;
        1: 4659:        case R_MAXBYTES:
        1: 4660:            if (!safe_strtoll(val, &bigval_int) || settings.maxbytes != bigval_int) {
        -: 4661:                reuse_mmap = -1;
        -: 4662:            }
        -: 4663:            break;
        1: 4664:        case R_CHUNK_SIZE:
        1: 4665:            if (!safe_strtol(val, &val_int) || settings.chunk_size != val_int) {
        -: 4666:                reuse_mmap = -1;
        -: 4667:            }
        -: 4668:            break;
        1: 4669:        case R_ITEM_SIZE_MAX:
        1: 4670:            if (!safe_strtol(val, &val_int) || settings.item_size_max != val_int) {
        -: 4671:                reuse_mmap = -1;
        -: 4672:            }
        -: 4673:            break;
        1: 4674:        case R_SLAB_CHUNK_SIZE_MAX:
        1: 4675:            if (!safe_strtol(val, &val_int) || settings.slab_chunk_size_max != val_int) {
        -: 4676:                reuse_mmap = -1;
        -: 4677:            }
        -: 4678:            break;
        1: 4679:        case R_SLAB_PAGE_SIZE:
        1: 4680:            if (!safe_strtol(val, &val_int) || settings.slab_page_size != val_int) {
        -: 4681:                reuse_mmap = -1;
        -: 4682:            }
        -: 4683:            break;
        1: 4684:        case R_SLAB_CONFIG:
        1: 4685:            if (strcmp(val, meta->slab_config) != 0) {
        -: 4686:                reuse_mmap = -1;
        -: 4687:            }
        -: 4688:            break;
        1: 4689:        case R_USE_CAS:
        1: 4690:            if (!is_bool || settings.use_cas != val_bool) {
        -: 4691:                reuse_mmap = -1;
        -: 4692:            }
        -: 4693:            break;
        1: 4694:        case R_SLAB_REASSIGN:
        1: 4695:            if (!is_bool || settings.slab_reassign != val_bool) {
        -: 4696:                reuse_mmap = -1;
        -: 4697:            }
        -: 4698:            break;
        1: 4699:        case R_CURRENT_CAS:
        -: 4700:            // FIXME: do we need to fail if these values _aren't_ found?
        1: 4701:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4702:                reuse_mmap = -1;
        -: 4703:            } else {
        1: 4704:                set_cas_id(bigval_uint);
        -: 4705:            }
        -: 4706:            break;
        1: 4707:        case R_OLDEST_CAS:
        1: 4708:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4709:                reuse_mmap = -1;
        -: 4710:            } else {
        1: 4711:                settings.oldest_cas = bigval_uint;
        -: 4712:            }
        -: 4713:            break;
        1: 4714:        case R_OLDEST_LIVE:
        1: 4715:            if (!safe_strtoul(val, &val_uint)) {
        -: 4716:                reuse_mmap = -1;
        -: 4717:            } else {
        1: 4718:                settings.oldest_live = val_uint;
        -: 4719:            }
        -: 4720:            break;
        1: 4721:        case R_LOGGER_GID:
        1: 4722:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4723:                reuse_mmap = -1;
        -: 4724:            } else {
        1: 4725:                logger_set_gid(bigval_uint);
        -: 4726:            }
        -: 4727:            break;
        1: 4728:        case R_PROCESS_STARTED:
        1: 4729:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4730:                reuse_mmap = -1;
        -: 4731:            } else {
        1: 4732:                meta->process_started = bigval_uint;
        -: 4733:            }
        -: 4734:            break;
        1: 4735:        case R_CURRENT_TIME:
        1: 4736:            if (!safe_strtoul(val, &val_uint)) {
        -: 4737:                reuse_mmap = -1;
        -: 4738:            } else {
        1: 4739:                meta->current_time = val_uint;
        -: 4740:            }
        -: 4741:            break;
        1: 4742:        case R_STOP_TIME:
        1: 4743:            if (!safe_strtoll(val, &bigval_int)) {
        -: 4744:                reuse_mmap = -1;
        -: 4745:            } else {
        1: 4746:                struct timeval t;
        1: 4747:                gettimeofday(&t, NULL);
        1: 4748:                meta->time_delta = t.tv_sec - bigval_int;
        -: 4749:                // clock has done something crazy.
        -: 4750:                // there are _lots_ of ways the clock can go wrong here, but
        -: 4751:                // this is a safe sanity check since there's nothing else we
        -: 4752:                // can realistically do.
        1: 4753:                if (meta->time_delta <= 0) {
    #####: 4754:                    reuse_mmap = -1;
        -: 4755:                }
        -: 4756:            }
        -: 4757:            break;
        1: 4758:        case R_HASHPOWER:
        1: 4759:            if (!safe_strtoul(val, &val_uint)) {
        -: 4760:                reuse_mmap = -1;
        -: 4761:            } else {
        1: 4762:                settings.hashpower_init = val_uint;
        -: 4763:            }
        -: 4764:            break;
    #####: 4765:        default:
    #####: 4766:            fprintf(stderr, "[restart] unhandled key: %s\n", key);
        -: 4767:        }
        -: 4768:
      17*: 4769:        if (reuse_mmap != 0) {
    #####: 4770:            fprintf(stderr, "[restart] restart incompatible due to setting for [%s] [old value: %s]\n", key, val);
    #####: 4771:            break;
        -: 4772:        }
        -: 4773:    }
        -: 4774:
        1: 4775:    if (lines_seen < RESTART_REQUIRED_META) {
    #####: 4776:        fprintf(stderr, "[restart] missing some metadata lines\n");
    #####: 4777:        reuse_mmap = -1;
        -: 4778:    }
        -: 4779:
        1: 4780:    return reuse_mmap;
        -: 4781:}
        -: 4782:
      428: 4783:int main (int argc, char **argv) {
      428: 4784:    int c;
      428: 4785:    bool lock_memory = false;
      428: 4786:    bool do_daemonize = false;
      428: 4787:    bool preallocate = false;
      428: 4788:    int maxcore = 0;
      428: 4789:    char *username = NULL;
      428: 4790:    char *pid_file = NULL;
      428: 4791:    struct passwd *pw;
      428: 4792:    struct rlimit rlim;
      428: 4793:    char *buf;
      428: 4794:    char unit = '\0';
      428: 4795:    int size_max = 0;
      428: 4796:    int retval = EXIT_SUCCESS;
      428: 4797:    bool protocol_specified = false;
      428: 4798:    bool tcp_specified = false;
      428: 4799:    bool udp_specified = false;
      428: 4800:    bool start_lru_maintainer = true;
      428: 4801:    bool start_lru_crawler = true;
      428: 4802:    bool start_assoc_maint = true;
      428: 4803:    enum hashfunc_type hash_type = MURMUR3_HASH;
      428: 4804:    uint32_t tocrawl;
      428: 4805:    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];
      428: 4806:    bool use_slab_sizes = false;
      428: 4807:    char *slab_sizes_unparsed = NULL;
      428: 4808:    bool slab_chunk_size_changed = false;
        -: 4809:    // struct for restart code. Initialized up here so we can curry
        -: 4810:    // important settings to save or validate.
      428: 4811:    struct _mc_meta_data *meta = malloc(sizeof(struct _mc_meta_data));
      428: 4812:    meta->slab_config = NULL;
      428: 4813:    char *subopts, *subopts_orig;
      428: 4814:    char *subopts_value;
      428: 4815:    enum {
        -: 4816:        MAXCONNS_FAST = 0,
        -: 4817:        HASHPOWER_INIT,
        -: 4818:        NO_HASHEXPAND,
        -: 4819:        SLAB_REASSIGN,
        -: 4820:        SLAB_AUTOMOVE,
        -: 4821:        SLAB_AUTOMOVE_RATIO,
        -: 4822:        SLAB_AUTOMOVE_WINDOW,
        -: 4823:        TAIL_REPAIR_TIME,
        -: 4824:        HASH_ALGORITHM,
        -: 4825:        LRU_CRAWLER,
        -: 4826:        LRU_CRAWLER_SLEEP,
        -: 4827:        LRU_CRAWLER_TOCRAWL,
        -: 4828:        LRU_MAINTAINER,
        -: 4829:        HOT_LRU_PCT,
        -: 4830:        WARM_LRU_PCT,
        -: 4831:        HOT_MAX_FACTOR,
        -: 4832:        WARM_MAX_FACTOR,
        -: 4833:        TEMPORARY_TTL,
        -: 4834:        IDLE_TIMEOUT,
        -: 4835:        WATCHER_LOGBUF_SIZE,
        -: 4836:        WORKER_LOGBUF_SIZE,
        -: 4837:        SLAB_SIZES,
        -: 4838:        SLAB_CHUNK_MAX,
        -: 4839:        TRACK_SIZES,
        -: 4840:        NO_INLINE_ASCII_RESP,
        -: 4841:        MODERN,
        -: 4842:        NO_MODERN,
        -: 4843:        NO_CHUNKED_ITEMS,
        -: 4844:        NO_SLAB_REASSIGN,
        -: 4845:        NO_SLAB_AUTOMOVE,
        -: 4846:        NO_MAXCONNS_FAST,
        -: 4847:        INLINE_ASCII_RESP,
        -: 4848:        NO_LRU_CRAWLER,
        -: 4849:        NO_LRU_MAINTAINER,
        -: 4850:        NO_DROP_PRIVILEGES,
        -: 4851:        DROP_PRIVILEGES,
        -: 4852:        RESP_OBJ_MEM_LIMIT,
        -: 4853:        READ_BUF_MEM_LIMIT,
        -: 4854:#ifdef TLS
        -: 4855:        SSL_CERT,
        -: 4856:        SSL_KEY,
        -: 4857:        SSL_VERIFY_MODE,
        -: 4858:        SSL_KEYFORM,
        -: 4859:        SSL_CIPHERS,
        -: 4860:        SSL_CA_CERT,
        -: 4861:        SSL_WBUF_SIZE,
        -: 4862:        SSL_SESSION_CACHE,
        -: 4863:        SSL_KERNEL_TLS,
        -: 4864:        SSL_MIN_VERSION,
        -: 4865:#endif
        -: 4866:#ifdef PROXY
        -: 4867:        PROXY_CONFIG,
        -: 4868:        PROXY_URING,
        -: 4869:        PROXY_MEMPROFILE,
        -: 4870:#endif
        -: 4871:#ifdef MEMCACHED_DEBUG
        -: 4872:        RELAXED_PRIVILEGES,
        -: 4873:#endif
        -: 4874:#ifdef SOCK_COOKIE_ID
        -: 4875:        COOKIE_ID,
        -: 4876:#endif
        -: 4877:    };
      428: 4878:    char *const subopts_tokens[] = {
        -: 4879:        [MAXCONNS_FAST] = "maxconns_fast",
        -: 4880:        [HASHPOWER_INIT] = "hashpower",
        -: 4881:        [NO_HASHEXPAND] = "no_hashexpand",
        -: 4882:        [SLAB_REASSIGN] = "slab_reassign",
        -: 4883:        [SLAB_AUTOMOVE] = "slab_automove",
        -: 4884:        [SLAB_AUTOMOVE_RATIO] = "slab_automove_ratio",
        -: 4885:        [SLAB_AUTOMOVE_WINDOW] = "slab_automove_window",
        -: 4886:        [TAIL_REPAIR_TIME] = "tail_repair_time",
        -: 4887:        [HASH_ALGORITHM] = "hash_algorithm",
        -: 4888:        [LRU_CRAWLER] = "lru_crawler",
        -: 4889:        [LRU_CRAWLER_SLEEP] = "lru_crawler_sleep",
        -: 4890:        [LRU_CRAWLER_TOCRAWL] = "lru_crawler_tocrawl",
        -: 4891:        [LRU_MAINTAINER] = "lru_maintainer",
        -: 4892:        [HOT_LRU_PCT] = "hot_lru_pct",
        -: 4893:        [WARM_LRU_PCT] = "warm_lru_pct",
        -: 4894:        [HOT_MAX_FACTOR] = "hot_max_factor",
        -: 4895:        [WARM_MAX_FACTOR] = "warm_max_factor",
        -: 4896:        [TEMPORARY_TTL] = "temporary_ttl",
        -: 4897:        [IDLE_TIMEOUT] = "idle_timeout",
        -: 4898:        [WATCHER_LOGBUF_SIZE] = "watcher_logbuf_size",
        -: 4899:        [WORKER_LOGBUF_SIZE] = "worker_logbuf_size",
        -: 4900:        [SLAB_SIZES] = "slab_sizes",
        -: 4901:        [SLAB_CHUNK_MAX] = "slab_chunk_max",
        -: 4902:        [TRACK_SIZES] = "track_sizes",
        -: 4903:        [NO_INLINE_ASCII_RESP] = "no_inline_ascii_resp",
        -: 4904:        [MODERN] = "modern",
        -: 4905:        [NO_MODERN] = "no_modern",
        -: 4906:        [NO_CHUNKED_ITEMS] = "no_chunked_items",
        -: 4907:        [NO_SLAB_REASSIGN] = "no_slab_reassign",
        -: 4908:        [NO_SLAB_AUTOMOVE] = "no_slab_automove",
        -: 4909:        [NO_MAXCONNS_FAST] = "no_maxconns_fast",
        -: 4910:        [INLINE_ASCII_RESP] = "inline_ascii_resp",
        -: 4911:        [NO_LRU_CRAWLER] = "no_lru_crawler",
        -: 4912:        [NO_LRU_MAINTAINER] = "no_lru_maintainer",
        -: 4913:        [NO_DROP_PRIVILEGES] = "no_drop_privileges",
        -: 4914:        [DROP_PRIVILEGES] = "drop_privileges",
        -: 4915:        [RESP_OBJ_MEM_LIMIT] = "resp_obj_mem_limit",
        -: 4916:        [READ_BUF_MEM_LIMIT] = "read_buf_mem_limit",
        -: 4917:#ifdef TLS
        -: 4918:        [SSL_CERT] = "ssl_chain_cert",
        -: 4919:        [SSL_KEY] = "ssl_key",
        -: 4920:        [SSL_VERIFY_MODE] = "ssl_verify_mode",
        -: 4921:        [SSL_KEYFORM] = "ssl_keyformat",
        -: 4922:        [SSL_CIPHERS] = "ssl_ciphers",
        -: 4923:        [SSL_CA_CERT] = "ssl_ca_cert",
        -: 4924:        [SSL_WBUF_SIZE] = "ssl_wbuf_size",
        -: 4925:        [SSL_SESSION_CACHE] = "ssl_session_cache",
        -: 4926:        [SSL_KERNEL_TLS] = "ssl_kernel_tls",
        -: 4927:        [SSL_MIN_VERSION] = "ssl_min_version",
        -: 4928:#endif
        -: 4929:#ifdef PROXY
        -: 4930:        [PROXY_CONFIG] = "proxy_config",
        -: 4931:        [PROXY_URING] = "proxy_uring",
        -: 4932:        [PROXY_MEMPROFILE] = "proxy_memprofile",
        -: 4933:#endif
        -: 4934:#ifdef MEMCACHED_DEBUG
        -: 4935:        [RELAXED_PRIVILEGES] = "relaxed_privileges",
        -: 4936:#endif
        -: 4937:#ifdef SOCK_COOKIE_ID
        -: 4938:        [COOKIE_ID] = "sock_cookie_id",
        -: 4939:#endif
        -: 4940:        NULL
        -: 4941:    };
        -: 4942:
      428: 4943:    if (!sanitycheck()) {
    #####: 4944:        free(meta);
    #####: 4945:        return EX_OSERR;
        -: 4946:    }
        -: 4947:
        -: 4948:    /* handle SIGINT, SIGTERM */
      428: 4949:    signal(SIGINT, sig_handler);
      428: 4950:    signal(SIGTERM, sig_handler);
      428: 4951:    signal(SIGHUP, sighup_handler);
      428: 4952:    signal(SIGUSR1, sig_usrhandler);
        -: 4953:
        -: 4954:    /* init settings */
      428: 4955:    settings_init();
      428: 4956:    verify_default("hash_algorithm", hash_type == MURMUR3_HASH);
        -: 4957:#ifdef EXTSTORE
      428: 4958:    void *storage = NULL;
      428: 4959:    void *storage_cf = storage_init_config(&settings);
      428: 4960:    bool storage_enabled = false;
      428: 4961:    if (storage_cf == NULL) {
    #####: 4962:        fprintf(stderr, "failed to allocate extstore config\n");
    #####: 4963:        return 1;
        -: 4964:    }
        -: 4965:#endif
        -: 4966:
        -: 4967:    /* set stderr non-buffering (for running under, say, daemontools) */
      428: 4968:    setbuf(stderr, NULL);
        -: 4969:
      428: 4970:    char *shortopts =
        -: 4971:          "a:"  /* access mask for unix socket */
        -: 4972:          "A"   /* enable admin shutdown command */
        -: 4973:          "Z"   /* enable SSL */
        -: 4974:          "p:"  /* TCP port number to listen on */
        -: 4975:          "s:"  /* unix socket path to listen on */
        -: 4976:          "U:"  /* UDP port number to listen on */
        -: 4977:          "m:"  /* max memory to use for items in megabytes */
        -: 4978:          "M"   /* return error on memory exhausted */
        -: 4979:          "c:"  /* max simultaneous connections */
        -: 4980:          "k"   /* lock down all paged memory */
        -: 4981:          "hiV" /* help, licence info, version */
        -: 4982:          "r"   /* maximize core file limit */
        -: 4983:          "v"   /* verbose */
        -: 4984:          "d"   /* daemon mode */
        -: 4985:          "l:"  /* interface to listen on */
        -: 4986:          "u:"  /* user identity to run as */
        -: 4987:          "P:"  /* save PID in file */
        -: 4988:          "f:"  /* factor? */
        -: 4989:          "n:"  /* minimum space allocated for key+value+flags */
        -: 4990:          "t:"  /* threads */
        -: 4991:          "D:"  /* prefix delimiter? */
        -: 4992:          "L"   /* Large memory pages */
        -: 4993:          "R:"  /* max requests per event */
        -: 4994:          "C"   /* Disable use of CAS */
        -: 4995:          "b:"  /* backlog queue limit */
        -: 4996:          "B:"  /* Binding protocol */
        -: 4997:          "I:"  /* Max item size */
        -: 4998:          "S"   /* Sasl ON */
        -: 4999:          "F"   /* Disable flush_all */
        -: 5000:          "X"   /* Disable dump commands */
        -: 5001:          "W"   /* Disable watch commands */
        -: 5002:          "Y:"   /* Enable token auth */
        -: 5003:          "e:"  /* mmap path for external item memory */
        -: 5004:          "o:"  /* Extended generic options */
        -: 5005:          "N:"  /* NAPI ID based thread selection */
        -: 5006:          ;
        -: 5007:
        -: 5008:    /* process arguments */
        -: 5009:#ifdef HAVE_GETOPT_LONG
      428: 5010:    const struct option longopts[] = {
        -: 5011:        {"unix-mask", required_argument, 0, 'a'},
        -: 5012:        {"enable-shutdown", no_argument, 0, 'A'},
        -: 5013:        {"enable-ssl", no_argument, 0, 'Z'},
        -: 5014:        {"port", required_argument, 0, 'p'},
        -: 5015:        {"unix-socket", required_argument, 0, 's'},
        -: 5016:        {"udp-port", required_argument, 0, 'U'},
        -: 5017:        {"memory-limit", required_argument, 0, 'm'},
        -: 5018:        {"disable-evictions", no_argument, 0, 'M'},
        -: 5019:        {"conn-limit", required_argument, 0, 'c'},
        -: 5020:        {"lock-memory", no_argument, 0, 'k'},
        -: 5021:        {"help", no_argument, 0, 'h'},
        -: 5022:        {"license", no_argument, 0, 'i'},
        -: 5023:        {"version", no_argument, 0, 'V'},
        -: 5024:        {"enable-coredumps", no_argument, 0, 'r'},
        -: 5025:        {"verbose", optional_argument, 0, 'v'},
        -: 5026:        {"daemon", no_argument, 0, 'd'},
        -: 5027:        {"listen", required_argument, 0, 'l'},
        -: 5028:        {"user", required_argument, 0, 'u'},
        -: 5029:        {"pidfile", required_argument, 0, 'P'},
        -: 5030:        {"slab-growth-factor", required_argument, 0, 'f'},
        -: 5031:        {"slab-min-size", required_argument, 0, 'n'},
        -: 5032:        {"threads", required_argument, 0, 't'},
        -: 5033:        {"enable-largepages", no_argument, 0, 'L'},
        -: 5034:        {"max-reqs-per-event", required_argument, 0, 'R'},
        -: 5035:        {"disable-cas", no_argument, 0, 'C'},
        -: 5036:        {"listen-backlog", required_argument, 0, 'b'},
        -: 5037:        {"protocol", required_argument, 0, 'B'},
        -: 5038:        {"max-item-size", required_argument, 0, 'I'},
        -: 5039:        {"enable-sasl", no_argument, 0, 'S'},
        -: 5040:        {"disable-flush-all", no_argument, 0, 'F'},
        -: 5041:        {"disable-dumping", no_argument, 0, 'X'},
        -: 5042:        {"disable-watch", no_argument, 0, 'W'},
        -: 5043:        {"auth-file", required_argument, 0, 'Y'},
        -: 5044:        {"memory-file", required_argument, 0, 'e'},
        -: 5045:        {"extended", required_argument, 0, 'o'},
        -: 5046:        {"napi-ids", required_argument, 0, 'N'},
        -: 5047:        {0, 0, 0, 0}
        -: 5048:    };
      428: 5049:    int optindex;
     1246: 5050:    while (-1 != (c = getopt_long(argc, argv, shortopts,
        -: 5051:                    longopts, &optindex))) {
        -: 5052:#else
        -: 5053:    while (-1 != (c = getopt(argc, argv, shortopts))) {
        -: 5054:#endif
      695: 5055:        switch (c) {
        6: 5056:        case 'A':
        -: 5057:            /* enables "shutdown" command */
        6: 5058:            settings.shutdown_command = true;
        6: 5059:            break;
    #####: 5060:        case 'Z':
        -: 5061:            /* enable secure communication*/
        -: 5062:#ifdef TLS
        -: 5063:            settings.ssl_enabled = true;
        -: 5064:#else
    #####: 5065:            fprintf(stderr, "This server is not built with TLS support.\n");
    #####: 5066:            exit(EX_USAGE);
        -: 5067:#endif
    #####: 5068:            break;
    #####: 5069:        case 'a':
        -: 5070:#ifndef DISABLE_UNIX_SOCKET
        -: 5071:            /* access for unix domain socket, as octal mask (like chmod)*/
    #####: 5072:            settings.access= strtol(optarg,NULL,8);
        -: 5073:#else
        -: 5074:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5075:            exit(EX_USAGE);
        -: 5076:#endif /* #ifndef DISABLE_UNIX_SOCKET */
    #####: 5077:            break;
       28: 5078:        case 'U':
       28: 5079:            settings.udpport = atoi(optarg);
       28: 5080:            udp_specified = true;
       28: 5081:            break;
       18: 5082:        case 'p':
       18: 5083:            settings.port = atoi(optarg);
       18: 5084:            tcp_specified = true;
       18: 5085:            break;
      102: 5086:        case 's':
        -: 5087:#ifndef DISABLE_UNIX_SOCKET
      102: 5088:            settings.socketpath = optarg;
        -: 5089:#else
        -: 5090:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5091:            exit(EX_USAGE);
        -: 5092:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      102: 5093:            break;
       33: 5094:        case 'm':
       33: 5095:            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;
       33: 5096:            break;
        2: 5097:        case 'M':
        2: 5098:            settings.evict_to_free = 0;
        2: 5099:            break;
        2: 5100:        case 'c':
        2: 5101:            settings.maxconns = atoi(optarg);
        2: 5102:            if (settings.maxconns <= 0) {
        2: 5103:                fprintf(stderr, "Maximum connections must be greater than 0\n");
        2: 5104:                return 1;
        -: 5105:            }
        -: 5106:            break;
      298: 5107:        case 'h':
      298: 5108:            usage();
      298: 5109:            exit(EXIT_SUCCESS);
    #####: 5110:        case 'i':
    #####: 5111:            usage_license();
    #####: 5112:            exit(EXIT_SUCCESS);
        -: 5113:        case 'V':
    #####: 5114:            printf(PACKAGE " " VERSION "\n");
    #####: 5115:            exit(EXIT_SUCCESS);
        -: 5116:        case 'k':
        -: 5117:            lock_memory = true;
        -: 5118:            break;
        6: 5119:        case 'v':
        6: 5120:            settings.verbose++;
        6: 5121:            break;
        7: 5122:        case 'l':
        7: 5123:            if (settings.inter != NULL) {
    #####: 5124:                if (strstr(settings.inter, optarg) != NULL) {
        -: 5125:                    break;
        -: 5126:                }
    #####: 5127:                size_t len = strlen(settings.inter) + strlen(optarg) + 2;
    #####: 5128:                char *p = malloc(len);
    #####: 5129:                if (p == NULL) {
    #####: 5130:                    fprintf(stderr, "Failed to allocate memory\n");
    #####: 5131:                    return 1;
        -: 5132:                }
    #####: 5133:                snprintf(p, len, "%s,%s", settings.inter, optarg);
    #####: 5134:                free(settings.inter);
    #####: 5135:                settings.inter = p;
        -: 5136:            } else {
        7: 5137:                settings.inter= strdup(optarg);
        -: 5138:            }
        -: 5139:            break;
        2: 5140:        case 'd':
        2: 5141:            do_daemonize = true;
        2: 5142:            break;
    #####: 5143:        case 'r':
    #####: 5144:            maxcore = 1;
    #####: 5145:            break;
        2: 5146:        case 'R':
        2: 5147:            settings.reqs_per_event = atoi(optarg);
        2: 5148:            if (settings.reqs_per_event <= 0) {
    #####: 5149:                fprintf(stderr, "Number of requests per event must be greater than 0\n");
    #####: 5150:                return 1;
        -: 5151:            }
        -: 5152:            break;
    #####: 5153:        case 'u':
    #####: 5154:            username = optarg;
    #####: 5155:            break;
        2: 5156:        case 'P':
        2: 5157:            pid_file = optarg;
        2: 5158:            break;
        2: 5159:        case 'e':
        2: 5160:            settings.memory_file = optarg;
        2: 5161:            break;
    #####: 5162:        case 'f':
    #####: 5163:            settings.factor = atof(optarg);
    #####: 5164:            if (settings.factor <= 1.0) {
    #####: 5165:                fprintf(stderr, "Factor must be greater than 1\n");
    #####: 5166:                return 1;
        -: 5167:            }
    #####: 5168:            meta->slab_config = strdup(optarg);
    #####: 5169:            break;
    #####: 5170:        case 'n':
    #####: 5171:            settings.chunk_size = atoi(optarg);
    #####: 5172:            if (settings.chunk_size <= 0) {
    #####: 5173:                fprintf(stderr, "Chunk size must be greater than 0\n");
    #####: 5174:                return 1;
        -: 5175:            }
        -: 5176:            break;
        2: 5177:        case 't':
        2: 5178:            settings.num_threads = atoi(optarg);
        2: 5179:            if (settings.num_threads <= 0) {
        1: 5180:                fprintf(stderr, "Number of threads must be greater than 0\n");
        1: 5181:                return 1;
        -: 5182:            }
        -: 5183:            /* There're other problems when you get above 64 threads.
        -: 5184:             * In the future we should portably detect # of cores for the
        -: 5185:             * default.
        -: 5186:             */
        1: 5187:            if (settings.num_threads > 64) {
     818*: 5188:                fprintf(stderr, "WARNING: Setting a high number of worker"
        -: 5189:                                "threads is not recommended.\n"
        -: 5190:                                " Set this value to the number of cores in"
        -: 5191:                                " your machine or less.\n");
        -: 5192:            }
        -: 5193:            break;
    #####: 5194:        case 'D':
    #####: 5195:            if (! optarg || ! optarg[0]) {
    #####: 5196:                fprintf(stderr, "No delimiter specified\n");
    #####: 5197:                return 1;
        -: 5198:            }
    #####: 5199:            settings.prefix_delimiter = optarg[0];
    #####: 5200:            settings.detail_enabled = 1;
    #####: 5201:            break;
    #####: 5202:        case 'L' :
    #####: 5203:            if (enable_large_pages() == 0) {
        -: 5204:                preallocate = true;
        -: 5205:            } else {
    #####: 5206:                fprintf(stderr, "Cannot enable large pages on this system\n"
        -: 5207:                    "(There is no support as of this version)\n");
    #####: 5208:                return 1;
        -: 5209:            }
        -: 5210:            break;
        2: 5211:        case 'C' :
        2: 5212:            settings.use_cas = false;
        2: 5213:            break;
        1: 5214:        case 'b' :
        1: 5215:            settings.backlog = atoi(optarg);
        1: 5216:            break;
        8: 5217:        case 'B':
        8: 5218:            protocol_specified = true;
        8: 5219:            if (strcmp(optarg, "auto") == 0) {
        2: 5220:                settings.binding_protocol = negotiating_prot;
        6: 5221:            } else if (strcmp(optarg, "binary") == 0) {
        3: 5222:                settings.binding_protocol = binary_prot;
        3: 5223:            } else if (strcmp(optarg, "ascii") == 0) {
        2: 5224:                settings.binding_protocol = ascii_prot;
        -: 5225:            } else {
        1: 5226:                fprintf(stderr, "Invalid value for binding protocol: %s\n"
        -: 5227:                        " -- should be one of auto, binary, or ascii\n", optarg);
        1: 5228:                exit(EX_USAGE);
        -: 5229:            }
        -: 5230:            break;
       10: 5231:        case 'I':
       10: 5232:            buf = strdup(optarg);
       10: 5233:            unit = buf[strlen(buf)-1];
       10: 5234:            if (unit == 'k' || unit == 'm' ||
        4: 5235:                unit == 'K' || unit == 'M') {
        6: 5236:                buf[strlen(buf)-1] = '\0';
        6: 5237:                size_max = atoi(buf);
        6: 5238:                if (unit == 'k' || unit == 'K')
        1: 5239:                    size_max *= 1024;
        6: 5240:                if (unit == 'm' || unit == 'M')
        5: 5241:                    size_max *= 1024 * 1024;
        6: 5242:                settings.item_size_max = size_max;
        -: 5243:            } else {
        4: 5244:                settings.item_size_max = atoi(buf);
        -: 5245:            }
       10: 5246:            free(buf);
       10: 5247:            break;
        1: 5248:        case 'S': /* set Sasl authentication to true. Default is false */
        -: 5249:#ifndef ENABLE_SASL
        1: 5250:            fprintf(stderr, "This server is not built with SASL support.\n");
        1: 5251:            exit(EX_USAGE);
        -: 5252:#endif
        -: 5253:            settings.sasl = true;
        -: 5254:            break;
        1: 5255:       case 'F' :
        1: 5256:            settings.flush_enabled = false;
        1: 5257:            break;
    #####: 5258:       case 'X' :
    #####: 5259:            settings.dump_enabled = false;
    #####: 5260:            break;
        1: 5261:       case 'W' :
        1: 5262:            settings.watch_enabled = false;
        1: 5263:            break;
        1: 5264:       case 'Y' :
        -: 5265:            // dupe the file path now just in case the options get mangled.
        1: 5266:            settings.auth_file = strdup(optarg);
        1: 5267:            break;
    #####: 5268:       case 'N':
    #####: 5269:            settings.num_napi_ids = atoi(optarg);
    #####: 5270:            if (settings.num_napi_ids <= 0) {
    #####: 5271:                fprintf(stderr, "Maximum number of NAPI IDs must be greater than 0\n");
    #####: 5272:                return 1;
        -: 5273:            }
        -: 5274:            break;
      158: 5275:        case 'o': /* It's sub-opts time! */
      158: 5276:            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */
        -: 5277:
      428: 5278:            while (*subopts != '\0') {
        -: 5279:            // BSD getsubopt (at least) has undefined behavior on -1, so
        -: 5280:            // if we want to retry the getsubopt call in submodules we
        -: 5281:            // need an extra layer of string copies.
      272: 5282:            char *subopts_temp_o = NULL;
      272: 5283:            char *subopts_temp = subopts_temp_o = strdup(subopts);
        -: 5284:
      272: 5285:            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {
    #####: 5286:            case MAXCONNS_FAST:
    #####: 5287:                settings.maxconns_fast = true;
    #####: 5288:                break;
    #####: 5289:            case HASHPOWER_INIT:
    #####: 5290:                if (subopts_value == NULL) {
    #####: 5291:                    fprintf(stderr, "Missing numeric argument for hashpower\n");
       2*: 5292:                    return 1;
        -: 5293:                }
    #####: 5294:                settings.hashpower_init = atoi(subopts_value);
    #####: 5295:                if (settings.hashpower_init < 12) {
    #####: 5296:                    fprintf(stderr, "Initial hashtable multiplier of %d is too low\n",
        -: 5297:                        settings.hashpower_init);
    #####: 5298:                    return 1;
    #####: 5299:                } else if (settings.hashpower_init > 32) {
    #####: 5300:                    fprintf(stderr, "Initial hashtable multiplier of %d is too high\n"
        -: 5301:                        "Choose a value based on \"STAT hash_power_level\" from a running instance\n",
        -: 5302:                        settings.hashpower_init);
    #####: 5303:                    return 1;
        -: 5304:                }
        -: 5305:                break;
    #####: 5306:            case NO_HASHEXPAND:
    #####: 5307:                start_assoc_maint = false;
    #####: 5308:                break;
        4: 5309:            case SLAB_REASSIGN:
        4: 5310:                settings.slab_reassign = true;
        4: 5311:                break;
       11: 5312:            case SLAB_AUTOMOVE:
       11: 5313:                if (subopts_value == NULL) {
        2: 5314:                    settings.slab_automove = 1;
        2: 5315:                    break;
        -: 5316:                }
        9: 5317:                settings.slab_automove = atoi(subopts_value);
        9: 5318:                if (settings.slab_automove < 0 || settings.slab_automove > 2) {
    #####: 5319:                    fprintf(stderr, "slab_automove must be between 0 and 2\n");
    #####: 5320:                    return 1;
        -: 5321:                }
        -: 5322:                break;
    #####: 5323:            case SLAB_AUTOMOVE_RATIO:
    #####: 5324:                if (subopts_value == NULL) {
    #####: 5325:                    fprintf(stderr, "Missing slab_automove_ratio argument\n");
    #####: 5326:                    return 1;
        -: 5327:                }
    #####: 5328:                settings.slab_automove_ratio = atof(subopts_value);
    #####: 5329:                if (settings.slab_automove_ratio <= 0 || settings.slab_automove_ratio > 1) {
    #####: 5330:                    fprintf(stderr, "slab_automove_ratio must be > 0 and < 1\n");
    #####: 5331:                    return 1;
        -: 5332:                }
        -: 5333:                break;
        2: 5334:            case SLAB_AUTOMOVE_WINDOW:
        2: 5335:                if (subopts_value == NULL) {
    #####: 5336:                    fprintf(stderr, "Missing slab_automove_window argument\n");
    #####: 5337:                    return 1;
        -: 5338:                }
        2: 5339:                settings.slab_automove_window = atoi(subopts_value);
        2: 5340:                if (settings.slab_automove_window < 3) {
    #####: 5341:                    fprintf(stderr, "slab_automove_window must be > 2\n");
    #####: 5342:                    return 1;
        -: 5343:                }
        -: 5344:                break;
    #####: 5345:            case TAIL_REPAIR_TIME:
    #####: 5346:                if (subopts_value == NULL) {
    #####: 5347:                    fprintf(stderr, "Missing numeric argument for tail_repair_time\n");
    #####: 5348:                    return 1;
        -: 5349:                }
    #####: 5350:                settings.tail_repair_time = atoi(subopts_value);
    #####: 5351:                if (settings.tail_repair_time < 10) {
    #####: 5352:                    fprintf(stderr, "Cannot set tail_repair_time to less than 10 seconds\n");
    #####: 5353:                    return 1;
        -: 5354:                }
        -: 5355:                break;
    #####: 5356:            case HASH_ALGORITHM:
    #####: 5357:                if (subopts_value == NULL) {
    #####: 5358:                    fprintf(stderr, "Missing hash_algorithm argument\n");
    #####: 5359:                    return 1;
    #####: 5360:                };
    #####: 5361:                if (strcmp(subopts_value, "jenkins") == 0) {
        -: 5362:                    hash_type = JENKINS_HASH;
    #####: 5363:                } else if (strcmp(subopts_value, "murmur3") == 0) {
        -: 5364:                    hash_type = MURMUR3_HASH;
    #####: 5365:                } else if (strcmp(subopts_value, "xxh3") == 0) {
        -: 5366:                    hash_type = XXH3_HASH;
        -: 5367:                } else {
    #####: 5368:                    fprintf(stderr, "Unknown hash_algorithm option (jenkins, murmur3, xxh3)\n");
    #####: 5369:                    return 1;
        -: 5370:                }
        -: 5371:                break;
        6: 5372:            case LRU_CRAWLER:
        6: 5373:                start_lru_crawler = true;
        6: 5374:                break;
    #####: 5375:            case LRU_CRAWLER_SLEEP:
    #####: 5376:                if (subopts_value == NULL) {
    #####: 5377:                    fprintf(stderr, "Missing lru_crawler_sleep value\n");
    #####: 5378:                    return 1;
        -: 5379:                }
    #####: 5380:                settings.lru_crawler_sleep = atoi(subopts_value);
    #####: 5381:                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {
    #####: 5382:                    fprintf(stderr, "LRU crawler sleep must be between 0 and 1 second\n");
    #####: 5383:                    return 1;
        -: 5384:                }
        -: 5385:                break;
    #####: 5386:            case LRU_CRAWLER_TOCRAWL:
    #####: 5387:                if (subopts_value == NULL) {
    #####: 5388:                    fprintf(stderr, "Missing lru_crawler_tocrawl value\n");
    #####: 5389:                    return 1;
        -: 5390:                }
    #####: 5391:                if (!safe_strtoul(subopts_value, &tocrawl)) {
    #####: 5392:                    fprintf(stderr, "lru_crawler_tocrawl takes a numeric 32bit value\n");
    #####: 5393:                    return 1;
        -: 5394:                }
    #####: 5395:                settings.lru_crawler_tocrawl = tocrawl;
    #####: 5396:                break;
        5: 5397:            case LRU_MAINTAINER:
        5: 5398:                start_lru_maintainer = true;
        5: 5399:                settings.lru_segmented = true;
        5: 5400:                break;
    #####: 5401:            case HOT_LRU_PCT:
    #####: 5402:                if (subopts_value == NULL) {
    #####: 5403:                    fprintf(stderr, "Missing hot_lru_pct argument\n");
    #####: 5404:                    return 1;
        -: 5405:                }
    #####: 5406:                settings.hot_lru_pct = atoi(subopts_value);
    #####: 5407:                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {
    #####: 5408:                    fprintf(stderr, "hot_lru_pct must be > 1 and < 80\n");
    #####: 5409:                    return 1;
        -: 5410:                }
        -: 5411:                break;
    #####: 5412:            case WARM_LRU_PCT:
    #####: 5413:                if (subopts_value == NULL) {
    #####: 5414:                    fprintf(stderr, "Missing warm_lru_pct argument\n");
    #####: 5415:                    return 1;
        -: 5416:                }
    #####: 5417:                settings.warm_lru_pct = atoi(subopts_value);
    #####: 5418:                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {
    #####: 5419:                    fprintf(stderr, "warm_lru_pct must be > 1 and < 80\n");
    #####: 5420:                    return 1;
        -: 5421:                }
        -: 5422:                break;
    #####: 5423:            case HOT_MAX_FACTOR:
    #####: 5424:                if (subopts_value == NULL) {
    #####: 5425:                    fprintf(stderr, "Missing hot_max_factor argument\n");
    #####: 5426:                    return 1;
        -: 5427:                }
    #####: 5428:                settings.hot_max_factor = atof(subopts_value);
    #####: 5429:                if (settings.hot_max_factor <= 0) {
    #####: 5430:                    fprintf(stderr, "hot_max_factor must be > 0\n");
    #####: 5431:                    return 1;
        -: 5432:                }
        -: 5433:                break;
    #####: 5434:            case WARM_MAX_FACTOR:
    #####: 5435:                if (subopts_value == NULL) {
    #####: 5436:                    fprintf(stderr, "Missing warm_max_factor argument\n");
    #####: 5437:                    return 1;
        -: 5438:                }
    #####: 5439:                settings.warm_max_factor = atof(subopts_value);
    #####: 5440:                if (settings.warm_max_factor <= 0) {
    #####: 5441:                    fprintf(stderr, "warm_max_factor must be > 0\n");
    #####: 5442:                    return 1;
        -: 5443:                }
        -: 5444:                break;
        1: 5445:            case TEMPORARY_TTL:
        1: 5446:                if (subopts_value == NULL) {
    #####: 5447:                    fprintf(stderr, "Missing temporary_ttl argument\n");
    #####: 5448:                    return 1;
        -: 5449:                }
        1: 5450:                settings.temp_lru = true;
        1: 5451:                settings.temporary_ttl = atoi(subopts_value);
        1: 5452:                break;
        1: 5453:            case IDLE_TIMEOUT:
        1: 5454:                if (subopts_value == NULL) {
    #####: 5455:                    fprintf(stderr, "Missing numeric argument for idle_timeout\n");
    #####: 5456:                    return 1;
        -: 5457:                }
        1: 5458:                settings.idle_timeout = atoi(subopts_value);
        1: 5459:                break;
        4: 5460:            case WATCHER_LOGBUF_SIZE:
        4: 5461:                if (subopts_value == NULL) {
    #####: 5462:                    fprintf(stderr, "Missing watcher_logbuf_size argument\n");
    #####: 5463:                    return 1;
        -: 5464:                }
        4: 5465:                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {
    #####: 5466:                    fprintf(stderr, "could not parse argument to watcher_logbuf_size\n");
    #####: 5467:                    return 1;
        -: 5468:                }
        4: 5469:                settings.logger_watcher_buf_size *= 1024; /* kilobytes */
        4: 5470:                break;
    #####: 5471:            case WORKER_LOGBUF_SIZE:
    #####: 5472:                if (subopts_value == NULL) {
    #####: 5473:                    fprintf(stderr, "Missing worker_logbuf_size argument\n");
    #####: 5474:                    return 1;
        -: 5475:                }
    #####: 5476:                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {
    #####: 5477:                    fprintf(stderr, "could not parse argument to worker_logbuf_size\n");
    #####: 5478:                    return 1;
        -: 5479:                }
    #####: 5480:                settings.logger_buf_size *= 1024; /* kilobytes */
    #####: 5481:            case SLAB_SIZES:
    #####: 5482:                slab_sizes_unparsed = strdup(subopts_value);
    #####: 5483:                break;
        7: 5484:            case SLAB_CHUNK_MAX:
        7: 5485:                if (subopts_value == NULL) {
    #####: 5486:                    fprintf(stderr, "Missing slab_chunk_max argument\n");
    #####: 5487:                    return 1;
        -: 5488:                }
        7: 5489:                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {
    #####: 5490:                    fprintf(stderr, "could not parse argument to slab_chunk_max\n");
    #####: 5491:                    return 1;
        -: 5492:                }
        7: 5493:                if (settings.slab_chunk_size_max <= 0) {
    #####: 5494:                    fprintf(stderr, "slab_chunk_max must be >= 0\n");
    #####: 5495:                    return 1;
        -: 5496:                }
        7: 5497:                if (settings.slab_chunk_size_max > (1 << 10)) {
    #####: 5498:                    fprintf(stderr, "slab_chunk_max must be specified in kilobytes.\n");
    #####: 5499:                    return 1;
        -: 5500:                }
        7: 5501:                settings.slab_chunk_size_max *= (1 << 10);
        7: 5502:                slab_chunk_size_changed = true;
        7: 5503:                break;
    #####: 5504:            case TRACK_SIZES:
    #####: 5505:                item_stats_sizes_init();
    #####: 5506:                break;
        -: 5507:            case NO_INLINE_ASCII_RESP:
        -: 5508:                break;
        -: 5509:            case INLINE_ASCII_RESP:
        -: 5510:                break;
    #####: 5511:            case NO_CHUNKED_ITEMS:
    #####: 5512:                settings.slab_chunk_size_max = settings.slab_page_size;
    #####: 5513:                break;
    #####: 5514:            case NO_SLAB_REASSIGN:
    #####: 5515:                settings.slab_reassign = false;
    #####: 5516:                break;
        1: 5517:            case NO_SLAB_AUTOMOVE:
        1: 5518:                settings.slab_automove = 0;
        1: 5519:                break;
    #####: 5520:            case NO_MAXCONNS_FAST:
    #####: 5521:                settings.maxconns_fast = false;
    #####: 5522:                break;
        3: 5523:            case NO_LRU_CRAWLER:
        3: 5524:                settings.lru_crawler = false;
        3: 5525:                start_lru_crawler = false;
        3: 5526:                break;
        1: 5527:            case NO_LRU_MAINTAINER:
        1: 5528:                start_lru_maintainer = false;
        1: 5529:                settings.lru_segmented = false;
        1: 5530:                break;
        -: 5531:#ifdef TLS
        -: 5532:            case SSL_CERT:
        -: 5533:                if (subopts_value == NULL) {
        -: 5534:                    fprintf(stderr, "Missing ssl_chain_cert argument\n");
        -: 5535:                    return 1;
        -: 5536:                }
        -: 5537:                settings.ssl_chain_cert = strdup(subopts_value);
        -: 5538:                break;
        -: 5539:            case SSL_KEY:
        -: 5540:                if (subopts_value == NULL) {
        -: 5541:                    fprintf(stderr, "Missing ssl_key argument\n");
        -: 5542:                    return 1;
        -: 5543:                }
        -: 5544:                settings.ssl_key = strdup(subopts_value);
        -: 5545:                break;
        -: 5546:            case SSL_VERIFY_MODE:
        -: 5547:            {
        -: 5548:                if (subopts_value == NULL) {
        -: 5549:                    fprintf(stderr, "Missing ssl_verify_mode argument\n");
        -: 5550:                    return 1;
        -: 5551:                }
        -: 5552:                int verify  = 0;
        -: 5553:                if (!safe_strtol(subopts_value, &verify)) {
        -: 5554:                    fprintf(stderr, "could not parse argument to ssl_verify_mode\n");
        -: 5555:                    return 1;
        -: 5556:                }
        -: 5557:                switch(verify) {
        -: 5558:                    case 0:
        -: 5559:                        settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -: 5560:                        break;
        -: 5561:                    case 1:
        -: 5562:                        settings.ssl_verify_mode = SSL_VERIFY_PEER;
        -: 5563:                        break;
        -: 5564:                    case 2:
        -: 5565:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5566:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
        -: 5567:                        break;
        -: 5568:                    case 3:
        -: 5569:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5570:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT |
        -: 5571:                                                    SSL_VERIFY_CLIENT_ONCE;
        -: 5572:                        break;
        -: 5573:                    default:
        -: 5574:                        fprintf(stderr, "Invalid ssl_verify_mode. Use help to see valid options.\n");
        -: 5575:                        return 1;
        -: 5576:                }
        -: 5577:                break;
        -: 5578:            }
        -: 5579:            case SSL_KEYFORM:
        -: 5580:                if (subopts_value == NULL) {
        -: 5581:                    fprintf(stderr, "Missing ssl_keyformat argument\n");
        -: 5582:                    return 1;
        -: 5583:                }
        -: 5584:                if (!safe_strtol(subopts_value, &settings.ssl_keyformat)) {
        -: 5585:                    fprintf(stderr, "could not parse argument to ssl_keyformat\n");
        -: 5586:                    return 1;
        -: 5587:                }
        -: 5588:                break;
        -: 5589:            case SSL_CIPHERS:
        -: 5590:                if (subopts_value == NULL) {
        -: 5591:                    fprintf(stderr, "Missing ssl_ciphers argument\n");
        -: 5592:                    return 1;
        -: 5593:                }
        -: 5594:                settings.ssl_ciphers = strdup(subopts_value);
        -: 5595:                break;
        -: 5596:            case SSL_CA_CERT:
        -: 5597:                if (subopts_value == NULL) {
        -: 5598:                    fprintf(stderr, "Missing ssl_ca_cert argument\n");
        -: 5599:                    return 1;
        -: 5600:                }
        -: 5601:                settings.ssl_ca_cert = strdup(subopts_value);
        -: 5602:                break;
        -: 5603:            case SSL_WBUF_SIZE:
        -: 5604:                if (subopts_value == NULL) {
        -: 5605:                    fprintf(stderr, "Missing ssl_wbuf_size argument\n");
        -: 5606:                    return 1;
        -: 5607:                }
        -: 5608:                if (!safe_strtoul(subopts_value, &settings.ssl_wbuf_size)) {
        -: 5609:                    fprintf(stderr, "could not parse argument to ssl_wbuf_size\n");
        -: 5610:                    return 1;
        -: 5611:                }
        -: 5612:                settings.ssl_wbuf_size *= 1024; /* kilobytes */
        -: 5613:                break;
        -: 5614:            case SSL_SESSION_CACHE:
        -: 5615:                settings.ssl_session_cache = true;
        -: 5616:                break;
        -: 5617:            case SSL_KERNEL_TLS:
        -: 5618:                settings.ssl_kernel_tls = true;
        -: 5619:                break;
        -: 5620:            case SSL_MIN_VERSION: {
        -: 5621:                int min_version;
        -: 5622:                if (subopts_value == NULL) {
        -: 5623:                    fprintf(stderr, "Missing ssl_min_version argument\n");
        -: 5624:                    return 1;
        -: 5625:                }
        -: 5626:                if (!safe_strtol(subopts_value, &min_version)) {
        -: 5627:                    fprintf(stderr, "could not parse argument to ssl_min_version\n");
        -: 5628:                    return 1;
        -: 5629:                }
        -: 5630:                switch (min_version) {
        -: 5631:                    case 0:
        -: 5632:                        settings.ssl_min_version = TLS1_VERSION;
        -: 5633:                        break;
        -: 5634:                    case 1:
        -: 5635:                        settings.ssl_min_version = TLS1_1_VERSION;
        -: 5636:                        break;
        -: 5637:                    case 2:
        -: 5638:                        settings.ssl_min_version = TLS1_2_VERSION;
        -: 5639:                        break;
        -: 5640:#if defined(TLS1_3_VERSION)
        -: 5641:                    case 3:
        -: 5642:                        settings.ssl_min_version = TLS1_3_VERSION;
        -: 5643:                        break;
        -: 5644:#endif
        -: 5645:                    default:
        -: 5646:                        fprintf(stderr, "Invalid ssl_min_version. Use help to see valid options.\n");
        -: 5647:                        return 1;
        -: 5648:                }
        -: 5649:                break;
        -: 5650:            }
        -: 5651:#endif
        -: 5652:            case MODERN:
        -: 5653:                /* currently no new defaults */
        -: 5654:                break;
        7: 5655:            case NO_MODERN:
        7: 5656:                if (!slab_chunk_size_changed) {
        7: 5657:                    settings.slab_chunk_size_max = settings.slab_page_size;
        -: 5658:                }
        7: 5659:                settings.slab_reassign = false;
        7: 5660:                settings.slab_automove = 0;
        7: 5661:                settings.maxconns_fast = false;
        7: 5662:                settings.lru_segmented = false;
        7: 5663:                hash_type = JENKINS_HASH;
        7: 5664:                start_lru_crawler = false;
        7: 5665:                start_lru_maintainer = false;
        7: 5666:                break;
    #####: 5667:            case NO_DROP_PRIVILEGES:
    #####: 5668:                settings.drop_privileges = false;
    #####: 5669:                break;
    #####: 5670:            case DROP_PRIVILEGES:
    #####: 5671:                settings.drop_privileges = true;
    #####: 5672:                break;
    #####: 5673:            case RESP_OBJ_MEM_LIMIT:
        -: 5674:                // TODO: Remove at some point in the future.
    #####: 5675:                fprintf(stderr, "DEPRECATED: resp_obj_mem_limit no longer used. See read_buf_mem_limit,\n");
        -: 5676:                break;
        1: 5677:            case READ_BUF_MEM_LIMIT:
        1: 5678:                if (subopts_value == NULL) {
    #####: 5679:                    fprintf(stderr, "Missing read_buf_mem_limit argument\n");
    #####: 5680:                    return 1;
        -: 5681:                }
        1: 5682:                if (!safe_strtoul(subopts_value, &settings.read_buf_mem_limit)) {
    #####: 5683:                    fprintf(stderr, "could not parse argument to read_buf_mem_limit\n");
    #####: 5684:                    return 1;
        -: 5685:                }
        1: 5686:                settings.read_buf_mem_limit *= 1024 * 1024; /* megabytes */
        1: 5687:                break;
        -: 5688:#ifdef PROXY
        -: 5689:            case PROXY_CONFIG:
        -: 5690:                if (subopts_value == NULL) {
        -: 5691:                    fprintf(stderr, "Missing proxy_config file argument\n");
        -: 5692:                    return 1;
        -: 5693:                }
        -: 5694:                if (protocol_specified) {
        -: 5695:                    fprintf(stderr, "Cannot specify a protocol with proxy mode enabled\n");
        -: 5696:                    return 1;
        -: 5697:                }
        -: 5698:                settings.proxy_startfile = strdup(subopts_value);
        -: 5699:                settings.proxy_enabled = true;
        -: 5700:                settings.binding_protocol = proxy_prot;
        -: 5701:                protocol_specified = true;
        -: 5702:                break;
        -: 5703:            case PROXY_URING:
        -: 5704:                settings.proxy_uring = true;
        -: 5705:                break;
        -: 5706:            case PROXY_MEMPROFILE:
        -: 5707:                settings.proxy_memprofile = true;
        -: 5708:                break;
        -: 5709:#endif
        -: 5710:#ifdef MEMCACHED_DEBUG
      120: 5711:            case RELAXED_PRIVILEGES:
      120: 5712:                settings.relaxed_privileges = true;
      120: 5713:                break;
        -: 5714:#endif
        -: 5715:#ifdef SOCK_COOKIE_ID
    #####: 5716:            case COOKIE_ID:
    #####: 5717:                (void)safe_strtoul(subopts_value, &settings.sock_cookie_id);
    #####: 5718:                break;
        -: 5719:#endif
       97: 5720:            default:
        -: 5721:#ifdef EXTSTORE
        -: 5722:                // TODO: differentiating response code.
       97: 5723:                if (storage_read_config(storage_cf, &subopts_temp)) {
        -: 5724:                    return 1;
        -: 5725:                }
        -: 5726:#else
        -: 5727:                printf("Illegal suboption \"%s\"\n", subopts_temp);
        -: 5728:                return 1;
        -: 5729:#endif
        -: 5730:            } // switch
      270: 5731:            if (subopts_temp_o) {
      270: 5732:                free(subopts_temp_o);
        -: 5733:            }
        -: 5734:
        -: 5735:            } // while
      156: 5736:            free(subopts_orig);
      156: 5737:            break;
    #####: 5738:        default:
    #####: 5739:            fprintf(stderr, "Illegal argument \"%c\"\n", c);
    #####: 5740:            return 1;
        -: 5741:        }
    #####: 5742:    }
        -: 5743:
      123: 5744:    if (settings.num_napi_ids > settings.num_threads) {
    #####: 5745:        fprintf(stderr, "Number of napi_ids(%d) cannot be greater than number of threads(%d)\n",
        -: 5746:                settings.num_napi_ids, settings.num_threads);
    #####: 5747:        exit(EX_USAGE);
        -: 5748:    }
        -: 5749:
      123: 5750:    if (settings.item_size_max < ITEM_SIZE_MAX_LOWER_LIMIT) {
        1: 5751:        fprintf(stderr, "Item max size cannot be less than 1024 bytes.\n");
        1: 5752:        exit(EX_USAGE);
        -: 5753:    }
      122: 5754:    if (settings.item_size_max > (settings.maxbytes / 2)) {
        1: 5755:        fprintf(stderr, "Cannot set item size limit higher than 1/2 of memory max.\n");
        1: 5756:        exit(EX_USAGE);
        -: 5757:    }
      121: 5758:    if (settings.item_size_max > (ITEM_SIZE_MAX_UPPER_LIMIT)) {
    #####: 5759:        fprintf(stderr, "Cannot set item size limit higher than a gigabyte.\n");
    #####: 5760:        exit(EX_USAGE);
        -: 5761:    }
      121: 5762:    if (settings.item_size_max > 1024 * 1024) {
        5: 5763:        if (!slab_chunk_size_changed) {
        -: 5764:            // Ideal new default is 16k, but needs stitching.
        5: 5765:            settings.slab_chunk_size_max = settings.slab_page_size / 2;
        -: 5766:        }
        -: 5767:    }
        -: 5768:
      121: 5769:    if (settings.slab_chunk_size_max > settings.item_size_max) {
    #####: 5770:        fprintf(stderr, "slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\n",
        -: 5771:                settings.slab_chunk_size_max, settings.item_size_max);
    #####: 5772:        exit(EX_USAGE);
        -: 5773:    }
        -: 5774:
      121: 5775:    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {
    #####: 5776:        fprintf(stderr, "-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\n",
        -: 5777:                settings.item_size_max, settings.slab_chunk_size_max);
    #####: 5778:        exit(EX_USAGE);
        -: 5779:    }
        -: 5780:
      121: 5781:    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {
    #####: 5782:        fprintf(stderr, "slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\n",
        -: 5783:                settings.slab_chunk_size_max, settings.slab_page_size);
    #####: 5784:        exit(EX_USAGE);
        -: 5785:    }
        -: 5786:#ifdef EXTSTORE
      121: 5787:    switch (storage_check_config(storage_cf)) {
       11: 5788:        case 0:
       11: 5789:            storage_enabled = true;
       11: 5790:            break;
    #####: 5791:        case 1:
    #####: 5792:            exit(EX_USAGE);
      121: 5793:            break;
        -: 5794:    }
        -: 5795:#endif
        -: 5796:    // Reserve this for the new default. If factor size hasn't changed, use
        -: 5797:    // new default.
        -: 5798:    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {
        -: 5799:        settings.factor = 1.08;
        -: 5800:    }*/
        -: 5801:
      121: 5802:    if (slab_sizes_unparsed != NULL) {
        -: 5803:        // want the unedited string for restart code.
    #####: 5804:        char *temp = strdup(slab_sizes_unparsed);
    #####: 5805:        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {
    #####: 5806:            use_slab_sizes = true;
    #####: 5807:            if (meta->slab_config) {
    #####: 5808:                free(meta->slab_config);
        -: 5809:            }
    #####: 5810:            meta->slab_config = temp;
        -: 5811:        } else {
    #####: 5812:            exit(EX_USAGE);
        -: 5813:        }
      121: 5814:    } else if (!meta->slab_config) {
        -: 5815:        // using the default factor.
      121: 5816:        meta->slab_config = "1.25";
        -: 5817:    }
        -: 5818:
      121: 5819:    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {
    #####: 5820:        fprintf(stderr, "hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\n");
    #####: 5821:        exit(EX_USAGE);
        -: 5822:    }
        -: 5823:
      121: 5824:    if (settings.temp_lru && !start_lru_maintainer) {
    #####: 5825:        fprintf(stderr, "temporary_ttl requires lru_maintainer to be enabled\n");
    #####: 5826:        exit(EX_USAGE);
        -: 5827:    }
        -: 5828:
      121: 5829:    if (hash_init(hash_type) != 0) {
    #####: 5830:        fprintf(stderr, "Failed to initialize hash_algorithm!\n");
    #####: 5831:        exit(EX_USAGE);
        -: 5832:    }
        -: 5833:
        -: 5834:    /*
        -: 5835:     * Use one workerthread to serve each UDP port if the user specified
        -: 5836:     * multiple ports
        -: 5837:     */
      121: 5838:    if (settings.inter != NULL && strchr(settings.inter, ',')) {
    #####: 5839:        settings.num_threads_per_udp = 1;
        -: 5840:    } else {
      121: 5841:        settings.num_threads_per_udp = settings.num_threads;
        -: 5842:    }
        -: 5843:
      121: 5844:    if (settings.sasl) {
    #####: 5845:        if (!protocol_specified) {
    #####: 5846:            settings.binding_protocol = binary_prot;
        -: 5847:        } else {
    #####: 5848:            if (settings.binding_protocol != binary_prot) {
    #####: 5849:                fprintf(stderr, "ERROR: You cannot allow the ASCII protocol while using SASL.\n");
    #####: 5850:                exit(EX_USAGE);
        -: 5851:            }
        -: 5852:        }
        -: 5853:
    #####: 5854:        if (settings.udpport) {
    #####: 5855:            fprintf(stderr, "ERROR: Cannot enable UDP while using binary SASL authentication.\n");
    #####: 5856:            exit(EX_USAGE);
        -: 5857:        }
        -: 5858:    }
        -: 5859:
      121: 5860:    if (settings.auth_file) {
        1: 5861:        if (!protocol_specified) {
        1: 5862:            settings.binding_protocol = ascii_prot;
        -: 5863:        } else {
    #####: 5864:            if (settings.binding_protocol != ascii_prot) {
    #####: 5865:                fprintf(stderr, "ERROR: You cannot allow the BINARY protocol while using ascii authentication tokens.\n");
    #####: 5866:                exit(EX_USAGE);
        -: 5867:            }
        -: 5868:        }
        -: 5869:    }
        -: 5870:
      121: 5871:    if (udp_specified && settings.udpport != 0 && !tcp_specified) {
        2: 5872:        settings.port = settings.udpport;
        -: 5873:    }
        -: 5874:
      121: 5875:    if (settings.port > 65535) {
    #####: 5876:        fprintf(stderr, "ERROR: Invalid port number %d.\n", settings.port);
    #####: 5877:        exit(EX_USAGE);
        -: 5878:    }
        -: 5879:
        -: 5880:
        -: 5881:#ifdef TLS
        -: 5882:    /*
        -: 5883:     * Setup SSL if enabled
        -: 5884:     */
        -: 5885:    if (settings.ssl_enabled) {
        -: 5886:        if (!settings.port) {
        -: 5887:            fprintf(stderr, "ERROR: You cannot enable SSL without a TCP port.\n");
        -: 5888:            exit(EX_USAGE);
        -: 5889:        }
        -: 5890:        // openssl init methods.
        -: 5891:        SSL_load_error_strings();
        -: 5892:        SSLeay_add_ssl_algorithms();
        -: 5893:        // Initiate the SSL context.
        -: 5894:        ssl_init();
        -: 5895:    }
        -: 5896:#endif
        -: 5897:
      121: 5898:    if (maxcore != 0) {
    #####: 5899:        struct rlimit rlim_new;
        -: 5900:        /*
        -: 5901:         * First try raising to infinity; if that fails, try bringing
        -: 5902:         * the soft limit to the hard.
        -: 5903:         */
    #####: 5904:        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
    #####: 5905:            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;
    #####: 5906:            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {
        -: 5907:                /* failed. try raising just to the old max */
    #####: 5908:                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;
    #####: 5909:                (void)setrlimit(RLIMIT_CORE, &rlim_new);
        -: 5910:            }
        -: 5911:        }
        -: 5912:        /*
        -: 5913:         * getrlimit again to see what we ended up with. Only fail if
        -: 5914:         * the soft limit ends up 0, because then no core files will be
        -: 5915:         * created at all.
        -: 5916:         */
        -: 5917:
    #####: 5918:        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {
    #####: 5919:            fprintf(stderr, "failed to ensure corefile creation\n");
    #####: 5920:            exit(EX_OSERR);
        -: 5921:        }
        -: 5922:    }
        -: 5923:
        -: 5924:    /*
        -: 5925:     * If needed, increase rlimits to allow as many connections
        -: 5926:     * as needed.
        -: 5927:     */
        -: 5928:
      121: 5929:    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {
    #####: 5930:        fprintf(stderr, "failed to getrlimit number of files\n");
    #####: 5931:        exit(EX_OSERR);
        -: 5932:    } else {
      121: 5933:        rlim.rlim_cur = settings.maxconns;
      121: 5934:        rlim.rlim_max = settings.maxconns;
      121: 5935:        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {
        -: 5936:#ifndef MEMCACHED_DEBUG
        -: 5937:            fprintf(stderr, "failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\n");
        -: 5938:            exit(EX_OSERR);
        -: 5939:#endif
      121: 5940:        }
        -: 5941:    }
        -: 5942:
        -: 5943:    /* lose root privileges if we have them */
      121: 5944:    if (getuid() == 0 || geteuid() == 0) {
    #####: 5945:        if (username == 0 || *username == '\0') {
    #####: 5946:            fprintf(stderr, "can't run as root without the -u switch\n");
    #####: 5947:            exit(EX_USAGE);
        -: 5948:        }
    #####: 5949:        if ((pw = getpwnam(username)) == 0) {
    #####: 5950:            fprintf(stderr, "can't find the user %s to switch to\n", username);
    #####: 5951:            exit(EX_NOUSER);
        -: 5952:        }
    #####: 5953:        if (setgroups(0, NULL) < 0) {
        -: 5954:            /* setgroups may fail with EPERM, indicating we are already in a
        -: 5955:             * minimally-privileged state. In that case we continue. For all
        -: 5956:             * other failure codes we exit.
        -: 5957:             *
        -: 5958:             * Note that errno is stored here because fprintf may change it.
        -: 5959:             */
    #####: 5960:            bool should_exit = errno != EPERM;
    #####: 5961:            fprintf(stderr, "failed to drop supplementary groups: %s\n",
        -: 5962:                    strerror(errno));
    #####: 5963:            if (should_exit) {
    #####: 5964:                exit(EX_OSERR);
        -: 5965:            }
        -: 5966:        }
    #####: 5967:        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
    #####: 5968:            fprintf(stderr, "failed to assume identity of user %s\n", username);
    #####: 5969:            exit(EX_OSERR);
        -: 5970:        }
        -: 5971:    }
        -: 5972:
        -: 5973:    /* Initialize Sasl if -S was specified */
      121: 5974:    if (settings.sasl) {
      121: 5975:        init_sasl();
        -: 5976:    }
        -: 5977:
        -: 5978:    /* daemonize if requested */
        -: 5979:    /* if we want to ensure our ability to dump core, don't chdir to / */
      121: 5980:    if (do_daemonize) {
        2: 5981:        if (daemonize(maxcore, settings.verbose) == -1) {
    #####: 5982:            fprintf(stderr, "failed to daemon() in order to daemonize\n");
    #####: 5983:            exit(EXIT_FAILURE);
        -: 5984:        }
        -: 5985:    }
        -: 5986:
        -: 5987:    /* lock paged memory if needed */
      120: 5988:    if (lock_memory) {
        -: 5989:#ifdef HAVE_MLOCKALL
    #####: 5990:        int res = mlockall(MCL_CURRENT | MCL_FUTURE);
    #####: 5991:        if (res != 0) {
    #####: 5992:            fprintf(stderr, "warning: -k invalid, mlockall() failed: %s\n",
    #####: 5993:                    strerror(errno));
        -: 5994:        }
        -: 5995:#else
        -: 5996:        fprintf(stderr, "warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\n");
        -: 5997:#endif
        -: 5998:    }
        -: 5999:
        -: 6000:    /* initialize main thread libevent instance */
        -: 6001:#if defined(LIBEVENT_VERSION_NUMBER) && LIBEVENT_VERSION_NUMBER >= 0x02000101
        -: 6002:    /* If libevent version is larger/equal to 2.0.2-alpha, use newer version */
      120: 6003:    struct event_config *ev_config;
      120: 6004:    ev_config = event_config_new();
      120: 6005:    event_config_set_flag(ev_config, EVENT_BASE_FLAG_NOLOCK);
      120: 6006:    main_base = event_base_new_with_config(ev_config);
      120: 6007:    event_config_free(ev_config);
        -: 6008:#else
        -: 6009:    /* Otherwise, use older API */
        -: 6010:    main_base = event_init();
        -: 6011:#endif
        -: 6012:
        -: 6013:    /* Load initial auth file if required */
      120: 6014:    if (settings.auth_file) {
        1: 6015:        if (settings.udpport) {
    #####: 6016:            fprintf(stderr, "Cannot use UDP with ascii authentication enabled (-U 0 to disable)\n");
    #####: 6017:            exit(EX_USAGE);
        -: 6018:        }
        -: 6019:
        1: 6020:        switch (authfile_load(settings.auth_file)) {
    #####: 6021:            case AUTHFILE_STATFAIL:
    #####: 6022:                vperror("Could not stat authfile [%s], error %s", settings.auth_file
    #####: 6023:                                                            , strerror(errno));
    #####: 6024:                exit(EXIT_FAILURE);
    #####: 6025:                break;
    #####: 6026:            case AUTHFILE_OPENFAIL:
    #####: 6027:                vperror("Could not open authfile [%s] for reading, error %s", settings.auth_file
    #####: 6028:                                                                           , strerror(errno));
    #####: 6029:                exit(EXIT_FAILURE);
    #####: 6030:                break;
    #####: 6031:            case AUTHFILE_OOM:
    #####: 6032:                fprintf(stderr, "Out of memory reading password file: %s", settings.auth_file);
    #####: 6033:                exit(EXIT_FAILURE);
    #####: 6034:                break;
    #####: 6035:            case AUTHFILE_MALFORMED:
    #####: 6036:                fprintf(stderr, "Authfile [%s] has a malformed entry. Should be 'user:password'", settings.auth_file);
    #####: 6037:                exit(EXIT_FAILURE);
        -: 6038:                break;
        -: 6039:            case AUTHFILE_OK:
        -: 6040:                break;
        -: 6041:        }
      119: 6042:    }
        -: 6043:
        -: 6044:    /* initialize other stuff */
      120: 6045:    stats_init();
      120: 6046:    logger_init();
      120: 6047:    conn_init();
      120: 6048:    bool reuse_mem = false;
      120: 6049:    void *mem_base = NULL;
      120: 6050:    bool prefill = false;
      120: 6051:    if (settings.memory_file != NULL) {
        2: 6052:        preallocate = true;
        -: 6053:        // Easier to manage memory if we prefill the global pool when reusing.
        2: 6054:        prefill = true;
        2: 6055:        restart_register("main", _mc_meta_load_cb, _mc_meta_save_cb, meta);
        4: 6056:        reuse_mem = restart_mmap_open(settings.maxbytes,
        2: 6057:                        settings.memory_file,
        -: 6058:                        &mem_base);
        -: 6059:        // The "save" callback gets called when we're closing out the mmap,
        -: 6060:        // but we don't know what the mmap_base is until after we call open.
        -: 6061:        // So we pass the struct above but have to fill it in here so the
        -: 6062:        // data's available during the save routine.
        2: 6063:        meta->mmap_base = mem_base;
        -: 6064:        // Also, the callbacks for load() run before _open returns, so we
        -: 6065:        // should have the old base in 'meta' as of here.
        -: 6066:    }
        -: 6067:    // Initialize the hash table _after_ checking restart metadata.
        -: 6068:    // We override the hash table start argument with what was live
        -: 6069:    // previously, to avoid filling a huge set of items into a tiny hash
        -: 6070:    // table.
      120: 6071:    assoc_init(settings.hashpower_init);
        -: 6072:#ifdef EXTSTORE
      120: 6073:    if (storage_enabled && reuse_mem) {
    #####: 6074:        fprintf(stderr, "[restart] memory restart with extstore not presently supported.\n");
    #####: 6075:        reuse_mem = false;
        -: 6076:    }
        -: 6077:#endif
      240: 6078:    slabs_init(settings.maxbytes, settings.factor, preallocate,
        -: 6079:            use_slab_sizes ? slab_sizes : NULL, mem_base, reuse_mem);
        -: 6080:#ifdef EXTSTORE
      120: 6081:    if (storage_enabled) {
       11: 6082:        storage = storage_init(storage_cf);
       11: 6083:        if (storage == NULL) {
        1: 6084:            exit(EXIT_FAILURE);
        -: 6085:        }
       10: 6086:        ext_storage = storage;
        -: 6087:        /* page mover algorithm for extstore needs memory prefilled */
       10: 6088:        prefill = true;
        -: 6089:    }
        -: 6090:#endif
        -: 6091:
      119: 6092:    if (settings.drop_privileges) {
      119: 6093:        setup_privilege_violations_handler();
        -: 6094:    }
        -: 6095:
      119: 6096:    if (prefill)
       12: 6097:        slabs_prefill_global();
        -: 6098:    /* In restartable mode and we've decided to issue a fixup on memory */
      119: 6099:    if (settings.memory_file != NULL && reuse_mem) {
        1: 6100:        mc_ptr_t old_base = meta->old_base;
        1: 6101:        assert(old_base == meta->old_base);
        -: 6102:
        -: 6103:        // should've pulled in process_started from meta file.
        1: 6104:        process_started = meta->process_started;
        -: 6105:        // TODO: must be a more canonical way of serializing/deserializing
        -: 6106:        // pointers? passing through uint64_t should work, and we're not
        -: 6107:        // annotating the pointer with anything, but it's still slightly
        -: 6108:        // insane.
        1: 6109:        restart_fixup((void *)old_base);
        -: 6110:    }
        -: 6111:    /*
        -: 6112:     * ignore SIGPIPE signals; we can use errno == EPIPE if we
        -: 6113:     * need that information
        -: 6114:     */
      119: 6115:    if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
    #####: 6116:        perror("failed to ignore SIGPIPE; sigaction");
    #####: 6117:        exit(EX_OSERR);
        -: 6118:    }
        -: 6119:    /* start up worker threads if MT mode */
        -: 6120:#ifdef PROXY
        -: 6121:    if (settings.proxy_enabled) {
        -: 6122:        settings.proxy_ctx = proxy_init(settings.proxy_uring, settings.proxy_memprofile);
        -: 6123:    }
        -: 6124:#endif
        -: 6125:#ifdef EXTSTORE
      119: 6126:    slabs_set_storage(storage);
      119: 6127:    memcached_thread_init(settings.num_threads, storage);
      119: 6128:    init_lru_crawler(storage);
        -: 6129:#else
        -: 6130:    memcached_thread_init(settings.num_threads, NULL);
        -: 6131:    init_lru_crawler(NULL);
        -: 6132:#endif
        -: 6133:
        -: 6134:#ifdef PROXY
        -: 6135:    if (settings.proxy_enabled) {
        -: 6136:        if (proxy_first_confload(settings.proxy_ctx) != 0) {
        -: 6137:            exit(EXIT_FAILURE);
        -: 6138:        }
        -: 6139:    }
        -: 6140:#endif
        -: 6141:
      119: 6142:    if (start_assoc_maint && start_assoc_maintenance_thread() == -1) {
    #####: 6143:        exit(EXIT_FAILURE);
        -: 6144:    }
      119: 6145:    if (start_lru_crawler && start_item_crawler_thread() != 0) {
    #####: 6146:        fprintf(stderr, "Failed to enable LRU crawler thread\n");
    #####: 6147:        exit(EXIT_FAILURE);
        -: 6148:    }
        -: 6149:#ifdef EXTSTORE
      119: 6150:    if (storage && start_storage_compact_thread(storage) != 0) {
    #####: 6151:        fprintf(stderr, "Failed to start storage compaction thread\n");
    #####: 6152:        exit(EXIT_FAILURE);
        -: 6153:    }
      119: 6154:    if (storage && start_storage_write_thread(storage) != 0) {
    #####: 6155:        fprintf(stderr, "Failed to start storage writer thread\n");
    #####: 6156:        exit(EXIT_FAILURE);
        -: 6157:    }
        -: 6158:
      119: 6159:    if (start_lru_maintainer && start_lru_maintainer_thread(storage) != 0) {
        -: 6160:#else
        -: 6161:    if (start_lru_maintainer && start_lru_maintainer_thread(NULL) != 0) {
        -: 6162:#endif
    #####: 6163:        fprintf(stderr, "Failed to enable LRU maintainer thread\n");
    #####: 6164:        free(meta);
    #####: 6165:        return 1;
        -: 6166:    }
        -: 6167:
      231: 6168:    if (settings.slab_reassign &&
      112: 6169:        start_slab_maintenance_thread() == -1) {
    #####: 6170:        exit(EXIT_FAILURE);
        -: 6171:    }
        -: 6172:
      119: 6173:    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {
    #####: 6174:        exit(EXIT_FAILURE);
        -: 6175:    }
        -: 6176:
        -: 6177:    /* initialise clock event */
        -: 6178:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 6179:    {
      119: 6180:        struct timespec ts;
      119: 6181:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
      119: 6182:            monotonic = true;
      119: 6183:            monotonic_start = ts.tv_sec;
        -: 6184:            // Monotonic clock needs special handling for restarts.
        -: 6185:            // We get a start time at an arbitrary place, so we need to
        -: 6186:            // restore the original time delta, which is always "now" - _start
      119: 6187:            if (reuse_mem) {
        -: 6188:                // the running timespan at stop time + the time we think we
        -: 6189:                // were stopped.
        1: 6190:                monotonic_start -= meta->current_time + meta->time_delta;
        -: 6191:            } else {
      118: 6192:                monotonic_start -= ITEM_UPDATE_INTERVAL + 2;
        -: 6193:            }
        -: 6194:        }
        -: 6195:    }
        -: 6196:#endif
      119: 6197:    clock_handler(0, 0, 0);
        -: 6198:
        -: 6199:    /* create unix mode sockets after dropping privileges */
      119: 6200:    if (settings.socketpath != NULL) {
       98: 6201:        errno = 0;
       98: 6202:        if (server_socket_unix(settings.socketpath,settings.access)) {
    #####: 6203:            vperror("failed to listen on UNIX socket: %s", settings.socketpath);
    #####: 6204:            exit(EX_OSERR);
        -: 6205:        }
        -: 6206:    }
        -: 6207:
        -: 6208:    /* create the listening socket, bind it, and init */
      119: 6209:    if (settings.socketpath == NULL) {
       21: 6210:        const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
       21: 6211:        char *temp_portnumber_filename = NULL;
       21: 6212:        size_t len;
       21: 6213:        FILE *portnumber_file = NULL;
        -: 6214:
       21: 6215:        if (portnumber_filename != NULL) {
       14: 6216:            len = strlen(portnumber_filename)+4+1;
       14: 6217:            temp_portnumber_filename = malloc(len);
       14: 6218:            snprintf(temp_portnumber_filename,
        -: 6219:                     len,
        -: 6220:                     "%s.lck", portnumber_filename);
        -: 6221:
       14: 6222:            portnumber_file = fopen(temp_portnumber_filename, "a");
       14: 6223:            if (portnumber_file == NULL) {
    #####: 6224:                fprintf(stderr, "Failed to open \"%s\": %s\n",
    #####: 6225:                        temp_portnumber_filename, strerror(errno));
        -: 6226:            }
        -: 6227:        }
        -: 6228:
       21: 6229:        errno = 0;
       21: 6230:        if (settings.port && server_sockets(settings.port, tcp_transport,
        -: 6231:                                           portnumber_file)) {
        1: 6232:            if (settings.inter == NULL) {
    #####: 6233:                vperror("failed to listen on TCP port %d", settings.port);
        -: 6234:            } else {
        1: 6235:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6236:            }
        1: 6237:            exit(EX_OSERR);
        -: 6238:        }
        -: 6239:
        -: 6240:        /*
        -: 6241:         * initialization order: first create the listening sockets
        -: 6242:         * (may need root on low ports), then drop root if needed,
        -: 6243:         * then daemonize if needed, then init libevent (in some cases
        -: 6244:         * descriptors created by libevent wouldn't survive forking).
        -: 6245:         */
        -: 6246:
        -: 6247:        /* create the UDP listening socket and bind it */
       20: 6248:        errno = 0;
       20: 6249:        if (settings.udpport && server_sockets(settings.udpport, udp_transport,
        -: 6250:                                              portnumber_file)) {
    #####: 6251:            if (settings.inter == NULL) {
    #####: 6252:                vperror("failed to listen on UDP port %d", settings.udpport);
        -: 6253:            } else {
    #####: 6254:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6255:            }
    #####: 6256:            exit(EX_OSERR);
        -: 6257:        }
        -: 6258:
       20: 6259:        if (portnumber_file) {
       14: 6260:            fclose(portnumber_file);
       14: 6261:            rename(temp_portnumber_filename, portnumber_filename);
        -: 6262:        }
       20: 6263:        if (temp_portnumber_filename)
       14: 6264:            free(temp_portnumber_filename);
        -: 6265:    }
        -: 6266:
        -: 6267:    /* Give the sockets a moment to open. I know this is dumb, but the error
        -: 6268:     * is only an advisory.
        -: 6269:     */
      118: 6270:    usleep(1000);
      118: 6271:    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {
    #####: 6272:        fprintf(stderr, "Maxconns setting is too low, use -c to increase.\n");
    #####: 6273:        exit(EXIT_FAILURE);
        -: 6274:    }
        -: 6275:
      118: 6276:    if (pid_file != NULL) {
        1: 6277:        save_pid(pid_file);
        -: 6278:    }
        -: 6279:
        -: 6280:    /* Drop privileges no longer needed */
      118: 6281:    if (settings.drop_privileges) {
      118: 6282:        drop_privileges();
        -: 6283:    }
        -: 6284:
        -: 6285:    /* Initialize the uriencode lookup table. */
      118: 6286:    uriencode_init();
        -: 6287:
        -: 6288:    /* enter the event loop */
     2655: 6289:    while (!stop_main_loop) {
     2537: 6290:        if (event_base_loop(main_base, EVLOOP_ONCE) != 0) {
        -: 6291:            retval = EXIT_FAILURE;
        -: 6292:            break;
        -: 6293:        }
        -: 6294:    }
        -: 6295:
      118: 6296:    switch (stop_main_loop) {
        2: 6297:        case GRACE_STOP:
        2: 6298:            fprintf(stderr, "Gracefully stopping\n");
        -: 6299:        break;
      116: 6300:        case EXIT_NORMALLY:
        -: 6301:            // Don't need to print anything to STDERR for a normal shutdown except
        -: 6302:            // if we want to.
        -: 6303:
      116: 6304:            if (settings.verbose) {
        3: 6305:                fprintf(stderr, "Exiting normally\n");
        -: 6306:            }
        -: 6307:
        -: 6308:        break;
    #####: 6309:        default:
    #####: 6310:            fprintf(stderr, "Exiting on error\n");
        -: 6311:        break;
        -: 6312:    }
        -: 6313:
      118: 6314:    if (stop_main_loop == GRACE_STOP) {
        2: 6315:        stop_threads();
        2: 6316:        if (settings.memory_file != NULL) {
        1: 6317:            restart_mmap_close();
        -: 6318:        }
        -: 6319:    }
        -: 6320:
        -: 6321:    /* remove the PID file if we're a daemon */
      118: 6322:    if (do_daemonize)
        1: 6323:        remove_pidfile(pid_file);
        -: 6324:    /* Clean up strdup() call for bind() address */
      118: 6325:    if (settings.inter)
        6: 6326:      free(settings.inter);
        -: 6327:
        -: 6328:    /* cleanup base */
      118: 6329:    event_base_free(main_base);
        -: 6330:
      118: 6331:    free(meta);
        -: 6332:
      118: 6333:    return retval;
        -: 6334:}
