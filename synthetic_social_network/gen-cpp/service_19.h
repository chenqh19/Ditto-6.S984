/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_19_H
#define service_19_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "auto_microservices_types.h"

namespace auto_microservices {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class service_19If {
 public:
  virtual ~service_19If() {}
  virtual void rpc_19(const std::map<std::string, std::string> & carrier) = 0;
};

class service_19IfFactory {
 public:
  typedef service_19If Handler;

  virtual ~service_19IfFactory() {}

  virtual service_19If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(service_19If* /* handler */) = 0;
};

class service_19IfSingletonFactory : virtual public service_19IfFactory {
 public:
  service_19IfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<service_19If>& iface) : iface_(iface) {}
  virtual ~service_19IfSingletonFactory() {}

  virtual service_19If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(service_19If* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<service_19If> iface_;
};

class service_19Null : virtual public service_19If {
 public:
  virtual ~service_19Null() {}
  void rpc_19(const std::map<std::string, std::string> & /* carrier */) {
    return;
  }
};

typedef struct _service_19_rpc_19_args__isset {
  _service_19_rpc_19_args__isset() : carrier(false) {}
  bool carrier :1;
} _service_19_rpc_19_args__isset;

class service_19_rpc_19_args {
 public:

  service_19_rpc_19_args(const service_19_rpc_19_args&);
  service_19_rpc_19_args& operator=(const service_19_rpc_19_args&);
  service_19_rpc_19_args() {
  }

  virtual ~service_19_rpc_19_args() throw();
  std::map<std::string, std::string>  carrier;

  _service_19_rpc_19_args__isset __isset;

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const service_19_rpc_19_args & rhs) const
  {
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const service_19_rpc_19_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_19_rpc_19_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class service_19_rpc_19_pargs {
 public:


  virtual ~service_19_rpc_19_pargs() throw();
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_19_rpc_19_result__isset {
  _service_19_rpc_19_result__isset() : se(false) {}
  bool se :1;
} _service_19_rpc_19_result__isset;

class service_19_rpc_19_result {
 public:

  service_19_rpc_19_result(const service_19_rpc_19_result&);
  service_19_rpc_19_result& operator=(const service_19_rpc_19_result&);
  service_19_rpc_19_result() {
  }

  virtual ~service_19_rpc_19_result() throw();
  ServiceException se;

  _service_19_rpc_19_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const service_19_rpc_19_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const service_19_rpc_19_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_19_rpc_19_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _service_19_rpc_19_presult__isset {
  _service_19_rpc_19_presult__isset() : se(false) {}
  bool se :1;
} _service_19_rpc_19_presult__isset;

class service_19_rpc_19_presult {
 public:


  virtual ~service_19_rpc_19_presult() throw();
  ServiceException se;

  _service_19_rpc_19_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class service_19Client : virtual public service_19If {
 public:
  service_19Client(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  service_19Client(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void rpc_19(const std::map<std::string, std::string> & carrier);
  void send_rpc_19(const std::map<std::string, std::string> & carrier);
  void recv_rpc_19();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class service_19Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<service_19If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (service_19Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_rpc_19(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  service_19Processor(::apache::thrift::stdcxx::shared_ptr<service_19If> iface) :
    iface_(iface) {
    processMap_["rpc_19"] = &service_19Processor::process_rpc_19;
  }

  virtual ~service_19Processor() {}
};

class service_19ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  service_19ProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< service_19IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< service_19IfFactory > handlerFactory_;
};

class service_19Multiface : virtual public service_19If {
 public:
  service_19Multiface(std::vector<apache::thrift::stdcxx::shared_ptr<service_19If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~service_19Multiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<service_19If> > ifaces_;
  service_19Multiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<service_19If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void rpc_19(const std::map<std::string, std::string> & carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rpc_19(carrier);
    }
    ifaces_[i]->rpc_19(carrier);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class service_19ConcurrentClient : virtual public service_19If {
 public:
  service_19ConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  service_19ConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void rpc_19(const std::map<std::string, std::string> & carrier);
  int32_t send_rpc_19(const std::map<std::string, std::string> & carrier);
  void recv_rpc_19(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
